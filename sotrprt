/* MAIN LAYOUT */
.dashboard-layout {
  display: flex;
  flex-direction: column;
  height: 100vh;
  width: 100%;
  overflow: hidden;
  background-color: #fafafa;
}

/* TOOLBAR STYLING */
.mat-toolbar-primary {
  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
  color: white;
  box-shadow: 0 2px 4px rgba(0,0,0,0.1);
  z-index: 1000;
}

.toolbar-title {
  font-size: 20px;
  font-weight: 500;
  margin: 0 16px;
}

.toolbar-spacer {
  flex: 1 1 auto;
}

.nav-menu-btn {
  margin-right: 8px;
}

.nav-menu-btn mat-icon {
  font-size: 24px;
}

/* NAVIGATION MENU */
.nav-menu {
  min-width: 250px;
}

.nav-menu .mat-menu-item {
  line-height: 48px;
  height: 48px;
}

.nav-menu .mat-menu-item mat-icon {
  margin-right: 16px;
  color: #666;
}

.nav-menu .mat-menu-item:hover:not([disabled]) {
  background-color: #f5f5f5;
}

.nav-menu .mat-menu-item[disabled] {
  background-color: #e3f2fd;
  color: #1976d2;
}

/* EXPANDABLE FILTER TOPBAR */
.filter-topbar {
  background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);
  border-bottom: 1px solid #dee2e6;
  transition: all 0.3s ease-in-out;
  overflow: hidden;
  position: relative;
  z-index: 999;
  box-shadow: 0 2px 4px rgba(0,0,0,0.05);
}

.filter-topbar.expanded {
  max-height: 200px;
  padding: 16px 0;
}

.filter-topbar.collapsed {
  max-height: 0;
  padding: 0;
}

.filter-container {
  max-width: 100%;
  margin: 0 auto;
  padding: 0 16px;
}

/* FILTER ROW */
.filter-row {
  display: grid;
  grid-template-columns: 150px 200px 300px 1fr auto;
  gap: 16px;
  align-items: end;
  width: 100%;
}

.filter-field {
  display: flex;
  flex-direction: column;
  min-width: 0;
}

.form-label {
  font-size: 12px;
  font-weight: 600;
  color: #495057;
  margin-bottom: 4px;
  text-transform: uppercase;
  letter-spacing: 0.5px;
}

.required-field .form-label::after {
  content: ' *';
  color: #dc3545;
}

.filter-field mat-form-field {
  width: 100%;
}

.filter-field .mat-form-field-wrapper {
  padding-bottom: 0;
}

/* PERIOD TOGGLE GROUP */
.period-toggle-group {
  height: 40px;
  border: 1px solid #ced4da;
  border-radius: 4px;
}

.period-toggle-group .mat-button-toggle {
  border: none;
  font-size: 12px;
  font-weight: 500;
}

.period-toggle-group .mat-button-toggle-checked {
  background-color: #007bff;
  color: white;
}

/* ACTION BUTTONS */
.action-buttons {
  display: flex;
  gap: 8px;
  align-items: flex-end;
}

.search-btn, .export-btn {
  height: 40px;
  min-width: 100px;
  font-weight: 500;
}

.search-btn {
  padding: 0 16px;
}

.search-btn mat-spinner {
  margin-right: 8px;
}

/* FILTER TOGGLE HINT */
.filter-toggle-hint {
  position: absolute;
  bottom: 0;
  left: 50%;
  transform: translateX(-50%);
  display: flex;
  align-items: center;
  gap: 4px;
  padding: 8px 16px;
  background-color: rgba(255,255,255,0.9);
  border-radius: 16px 16px 0 0;
  cursor: pointer;
  font-size: 12px;
  color: #6c757d;
  transition: all 0.2s ease;
}

.filter-toggle-hint:hover {
  background-color: white;
  color: #495057;
}

/* MAIN CONTENT */
.main-content {
  flex: 1;
  display: flex;
  flex-direction: column;
  overflow: hidden;
  transition: all 0.3s ease-in-out;
}

.main-content.filters-expanded {
  padding-top: 0;
}

/* TABLE CONTROLS */
.table-controls {
  display: flex;
  align-items: center;
  padding: 8px 16px;
  background: #f5f5f5;
  border-bottom: 1px solid #e0e0e0;
  gap: 12px;
}

.records-info {
  display: flex;
  align-items: center;
}

.record-count {
  font-size: 14px;
  color: #6c757d;
  font-weight: 500;
}

.top-paginator {
  border: none;
  background: transparent;
}

/* TABLE CONTAINER */
.table-container {
    width: 100%;
  height: 100%;
  position: relative;
  min-height: 75vh;
  max-height: 75vh;
}

.table-wrapper {
   flex: 1;
   overflow: auto;
   height: calc(75vh - 5px);
   width: 100%;
   overflow-x: auto;
   overflow-y: auto;
}

.table-wrapper mat-row, mat-footer-row {
    min-height: 40px !important;
}

.table-wrapper mat-header-row {
    min-height: 40px !important;
}

/* TABLE STYLING */
.performance-table {
  width: 100%;
  background: white;
  display: table;
  table-layout: auto;
  border-collapse: collapse;
  margin: 0px;
}

.performance-table.has-data {
  background-color: white;
}

/* HEADER STYLING */
.mat-header-row {
  background: linear-gradient(135deg, #495057 0%, #6c757d 100%);
  position: sticky;
  top: 0;
  z-index: 100;
  box-shadow: 0 2px 4px rgba(0,0,0,0.1);
}

.mat-header-cell {
  color: white;
  font-weight: 600;
  font-size: 12px;
  text-transform: uppercase;
  letter-spacing: 0.5px;
  border-bottom: none;
  padding: 16px 12px;
}

/* COLUMN WIDTHS */
/* .week-column { width: 100px; min-width: 100px; }
.state-column { width: 80px; min-width: 80px; }
.territory-column { width: 100px; min-width: 100px; }
.outlet-column { width: 80px; min-width: 80px; }
.store-num-column { width: 120px; min-width: 120px; }
.store-name-column { width: 200px; min-width: 180px; }
.task-column { width: 100px; min-width: 100px; }
.completion-column { width: 140px; min-width: 140px; }
.collected-column { width: 150px; min-width: 140px; }
.quality-column { width: 120px; min-width: 120px; }
.travel-time-column { width: 120px; min-width: 120px; }
.distance-column { width: 100px; min-width: 100px; }
.toll-column { width: 100px; min-width: 100px; }
.total-cost-column { width: 120px; min-width: 120px; } */

/* DATA ROW STYLING */
/* .data-row {
  transition: background-color 0.2s ease;
}

.data-row:hover {
  background-color: #f8f9fa;
}

.data-row.odd {
  background-color: #fafafa;
}

.mat-cell {
  padding: 12px;
  border-bottom: 1px solid #e9ecef;
  font-size: 13px;
  line-height: 1.4;
} */

/* TEXT ALIGNMENT */
.text-center { text-align: center; }
.text-right { text-align: right; }

/* BADGES AND STATUS INDICATORS */
.state-badge {
  display: inline-block;
  padding: 4px 8px;
  background-color: #e9ecef;
  border-radius: 4px;
  font-size: 11px;
  font-weight: 500;
  text-transform: uppercase;
}

.store-number {
  font-weight: 500;
  color: #495057;
}

.store-name {
  display: block;
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
  max-width: 180px;
}

/* COMPLETION BAR */
.completion-bar {
  position: relative;
  display: flex;
  align-items: center;
}

.completion-bar mat-progress-bar {
  flex: 1;
  margin-right: 8px;
  height: 8px;
  border-radius: 4px;
}

.completion-bar .mat-progress-bar-fill::after {
  border-radius: 4px;
}

.completion-text {
  font-size: 12px;
  font-weight: 500;
  min-width: 35px;
}

.completion-high .mat-progress-bar-fill::after { background-color: #28a745; }
.completion-medium .mat-progress-bar-fill::after { background-color: #ffc107; }
.completion-low .mat-progress-bar-fill::after { background-color: #dc3545; }

/* QUALITY BADGES */
.quality-badge, .badge {
  display: inline-block;
  padding: 4px 8px;
  border-radius: 12px;
  font-size: 10px;
  font-weight: 600;
  text-transform: uppercase;
  text-align: center;
  min-width: 50px;
}

.quality-approved { background-color: #d4edda; color: #155724; }
.quality-pending { background-color: #fff3cd; color: #856404; }
.quality-rejected { background-color: #f8d7da; color: #721c24; }

.badge-high { background-color: #d4edda; color: #155724; }
.badge-medium { background-color: #fff3cd; color: #856404; }
.badge-low { background-color: #f8d7da; color: #721c24; }

/* COST VALUE */
.cost-value {
  font-weight: 500;
  color: #495057;
}

/* NO DATA STATE */
.no-data-container {
  display: flex;
  align-items: center;
  justify-content: center;
  height: 400px;
  width: 100%;
}

.no-data-content {
  text-align: center;
  color: #6c757d;
}

.no-data-icon {
  font-size: 64px;
  width: 64px;
  height: 64px;
  margin-bottom: 16px;
  color: #dee2e6;
}

.no-data-content h3 {
  margin: 0 0 8px 0;
  font-size: 20px;
  font-weight: 500;
}

.no-data-content p {
  margin: 0;
  font-size: 14px;
}

/* BOTTOM PAGINATION */
.bottom-pagination {
  background-color: white;
  border-top: 1px solid #e0e0e0;
  padding: 8px 0;
}

/* LOADING OVERLAY */
.loading-overlay {
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background-color: rgba(0, 0, 0, 0.5);
  display: flex;
  align-items: center;
  justify-content: center;
  z-index: 9999;
}

.loading-content {
  text-align: center;
  color: white;
}

.loading-content p {
  margin: 16px 0 0 0;
  font-size: 16px;
}

/* RESPONSIVE DESIGN */
@media (max-width: 1400px) {
  .filter-row {
    grid-template-columns: 140px 180px 250px 1fr auto;
    gap: 12px;
  }
}

@media (max-width: 1200px) {
  .filter-row {
    grid-template-columns: repeat(auto-fit, minmax(140px, 1fr));
    gap: 12px;
  }
  
  .action-buttons {
    grid-column: 1 / -1;
    justify-content: center;
    margin-top: 12px;
  }
  
  .performance-table {
    min-width: 1200px;
  }
}

@media (max-width: 768px) {
  .dashboard-layout {
    height: 100vh;
  }
  
  .filter-container {
    padding: 0 8px;
  }
  
  .filter-row {
    display: flex;
    flex-direction: column;
    gap: 12px;
  }
  
  .table-controls {
    flex-direction: column;
    gap: 12px;
    align-items: stretch;
  }
  
  .performance-table {
    min-width: 1000px;
  }
}

<div class="dashboard-layout">
  
  <!-- TOP TOOLBAR with Navigation Menu -->
  <mat-toolbar class="mat-toolbar-primary">
    <!-- Navigation Menu Button -->
    <button mat-icon-button [matMenuTriggerFor]="navMenu" class="nav-menu-btn" matTooltip="Navigate">
      <mat-icon>apps</mat-icon>
    </button>
    
    <!-- Navigation Menu -->
    <mat-menu #navMenu="matMenu" class="nav-menu">
      <button mat-menu-item (click)="navigateToComponent('dashboard')">
        <mat-icon>dashboard</mat-icon>
        <span>Assignment Dashboard</span>
      </button>
      <button mat-menu-item (click)="navigateToComponent('performance')" disabled>
        <mat-icon>assessment</mat-icon>
        <span>Store Performance Report</span>
      </button>
      <button mat-menu-item (click)="navigateToComponent('analytics')">
        <mat-icon>analytics</mat-icon>
        <span>Analytics</span>
      </button>
      <mat-divider></mat-divider>
      <button mat-menu-item (click)="navigateToComponent('settings')">
        <mat-icon>settings</mat-icon>
        <span>Settings</span>
      </button>
    </mat-menu>

    <!-- Page Title -->
    <h1 class="toolbar-title">Store Performance Report</h1>
    
    <span class="toolbar-spacer"></span>

    <!-- Toolbar Actions -->
    <button mat-icon-button matTooltip="Refresh Data">
      <mat-icon>refresh</mat-icon>
    </button>
    
    <!-- Filter Toggle Button -->
    <button mat-icon-button (click)="toggleFilters()" matTooltip="Toggle Filters">
      <mat-icon>{{isFiltersExpanded ? 'expand_less' : 'expand_more'}}</mat-icon>
    </button>
  </mat-toolbar>

  <!-- EXPANDABLE FILTER TOPBAR -->
  <section class="filter-topbar" [class.expanded]="isFiltersExpanded" [class.collapsed]="!isFiltersExpanded">
    <div class="filter-container">
      
      <!-- Filter Row -->
      <div class="filter-row">
        
        <!-- Country Selection -->
        <div class="filter-field">
          <label class="form-label">Country</label>
          <mat-form-field appearance="outline">
            <mat-select [formControl]="countryctrl" (selectionChange)="onCountryChange($event)">
              <mat-option *ngFor="let country of countrylist" [value]="country.countryName">
                {{country.countryName}}
              </mat-option>
            </mat-select>
          </mat-form-field>
        </div>

        <!-- Report Week with Date Picker -->
        <div class="filter-field required-field">
          <label class="form-label">Report Week *</label>
          <mat-form-field appearance="outline">
            <input matInput [matDatepicker]="picker1" [formControl]="datetimectrl2" 
                   (dateChange)="onDateSelected($event,'iriweekctrl')" hidden>
            <input matInput [formControl]="iriweekctrl" maxlength="4" 
                   (keypress)="allowOnlyNumber($event)" placeholder="YYWW">
            <mat-datepicker-toggle matSuffix [for]="picker1"></mat-datepicker-toggle>
            <mat-datepicker #picker1></mat-datepicker>
          </mat-form-field>
        </div>

        <!-- Report Period Toggle -->
        <div class="filter-field">
          <label class="form-label">Report Period</label>
          <mat-button-toggle-group [formControl]="reportWeekCtrl" 
                                   (change)="getStorePerfReport()" 
                                   class="period-toggle-group">
            <mat-button-toggle value="WEEK">Week</mat-button-toggle>
            <mat-button-toggle value="4WEEK">4 Week</mat-button-toggle>
            <mat-button-toggle value="8WEEK">8 Week</mat-button-toggle>
            <mat-button-toggle value="QTY">QTD</mat-button-toggle>
            <mat-button-toggle value="YTD">YTD</mat-button-toggle>
          </mat-button-toggle-group>
        </div>

        <!-- Action Buttons -->
        <div class="action-buttons">
          <button mat-raised-button color="primary" 
                  [disabled]="showSpinner" 
                  (click)="getStorePerfReport()"
                  class="search-btn">
            <mat-spinner diameter="16" *ngIf="showSpinner"></mat-spinner>
            <mat-icon *ngIf="!showSpinner">search</mat-icon>
            Search
          </button>
          
          <button mat-stroked-button color="primary" 
                  matTooltip="Export to Excel" 
                  [disabled]="totalRecords === 0" 
                  (click)="exportToExcel()"
                  class="export-btn">
            <mat-icon>description</mat-icon>
            Export
          </button>
        </div>
      </div>
    </div>

    <!-- Filter Toggle Icon (when collapsed) -->
    <div class="filter-toggle-hint" *ngIf="!isFiltersExpanded" (click)="toggleFilters()">
      <mat-icon>keyboard_arrow_down</mat-icon>
      <span>Show Filters</span>
    </div>
  </section>

  <!-- MAIN CONTENT AREA -->
  <div class="main-content" [class.filters-expanded]="isFiltersExpanded">
    
    <!-- Table Controls Bar -->
    <div class="table-controls">
      <!-- Records Count -->
      <div class="records-info">
        <span class="record-count">{{totalRecords}} records</span>
      </div>

      <!-- Pagination (Top) -->
      <mat-paginator [length]="totalRecords"
                     [pageSize]="50"
                     [pageSizeOptions]="[50,100,150,200]"
                     showFirstLastButtons="true"
                     class="top-paginator">
      </mat-paginator>
    </div>

    <!-- TABLE CONTAINER -->
    <div class="table-container">
      <div class="table-wrapper" [class.no-data]="totalRecords === 0">
        
        <!-- Data Table -->
        <table mat-table [dataSource]="dataSource" matSort 
               (matSortChange)="announceSortChange($event)" 
               class="performance-table mat-elevation-4"
               [ngClass]="{'has-data': totalRecords > 0, 'no-data': totalRecords === 0}">

          <ng-container matColumnDef="reportWeek">
                <th mat-header-cell *matHeaderCellDef mat-sort-header>Report Week</th>
                <td mat-cell *matCellDef="let element"> {{element.reportWeek}}</td>
            </ng-container>

            <ng-container matColumnDef="stateCd">
                <th mat-header-cell *matHeaderCellDef mat-sort-header>State CD</th>
                <td mat-cell *matCellDef="let element"> {{element.stateCd}} </td>
            </ng-container>

            <ng-container matColumnDef="territory">
                <th mat-header-cell *matHeaderCellDef mat-sort-header>Territory</th>
                <td mat-cell *matCellDef="let element"> {{element.territory}} </td>
            </ng-container>

            <ng-container matColumnDef="outlet">
                <th mat-header-cell *matHeaderCellDef mat-sort-header>Outlet</th>
                <td mat-cell *matCellDef="let element"> {{element.outlet}} </td>
            </ng-container>

            <ng-container matColumnDef="storeNumber">
                <th mat-header-cell *matHeaderCellDef mat-sort-header>Store Number</th>
                <td mat-cell *matCellDef="let element"> {{element.storeNumber}} </td>
            </ng-container>

            <ng-container matColumnDef="storeName">
                <th mat-header-cell *matHeaderCellDef mat-sort-header>Store Name</th>
                <td mat-cell *matCellDef="let element"> {{element.storeName}} </td>
            </ng-container>

            <ng-container matColumnDef="taskNumber">
                <th mat-header-cell *matHeaderCellDef mat-sort-header>Task Number</th>
                <td mat-cell *matCellDef="let element"> {{element.taskNumber}} </td>
            </ng-container>

            <ng-container matColumnDef="completionPercent">
                <th mat-header-cell *matHeaderCellDef mat-sort-header>Completion %</th>
                <td mat-cell *matCellDef="let element"> {{element.completionPercent}} </td>
            </ng-container>

            <ng-container matColumnDef="collectedNotPortalAssigned">
                <th mat-header-cell *matHeaderCellDef mat-sort-header>Collected Not Portal Assigned</th>
                <td mat-cell *matCellDef="let element"> {{element.collectedNotPortalAssigned}} </td>
            </ng-container>

            <ng-container matColumnDef="qualityApproval">
                <th mat-header-cell *matHeaderCellDef mat-sort-header>Quality Approval</th>
                <td mat-cell *matCellDef="let element"> {{element.qualityApproval}} </td>
            </ng-container>

            <ng-container matColumnDef="gpsTravelTime">
                <th mat-header-cell *matHeaderCellDef mat-sort-header>GPS Travel Time</th>
                <td mat-cell *matCellDef="let element"> {{element.gpsTravelTime}} </td>
            </ng-container>

            <ng-container matColumnDef="gpsDistance">
                <th mat-header-cell *matHeaderCellDef mat-sort-header>GPS Distance</th>
                <td mat-cell *matCellDef="let element"> {{element.gpsDistance}} </td>
            </ng-container>

            <ng-container matColumnDef="toll">
                <th mat-header-cell *matHeaderCellDef mat-sort-header>Toll</th>
                <td mat-cell *matCellDef="let element"> {{element.toll}} </td>
            </ng-container>

            <ng-container matColumnDef="gpsTotalCost">
                <th mat-header-cell *matHeaderCellDef mat-sort-header>GPS Total Cost</th>
                <td mat-cell *matCellDef="let element"> {{element.gpsTotalCost}} </td>
            </ng-container>

            <tr mat-header-row *matHeaderRowDef="displayedColumns;sticky:true"></tr>
            <tr mat-row *matRowDef="let row; columns: displayedColumns;"></tr>
        </table>

        <ng-container *ngIf="this.totalRecords==0">
            <div class="no-data">No Data Found!!!</div>
        </ng-container>
    </div>

    <!-- Bottom Pagination -->
    <div class="bottom-pagination" *ngIf="totalRecords > 0">
      <mat-paginator [length]="totalRecords"
                     [pageSize]="50"
                     [pageSizeOptions]="[50,100,150,200]"
                     showFirstLastButtons="true">
      </mat-paginator>
    </div>
  </div>
</div>

<div class="mat-spinner-container">
    <mat-spinner mode="indeterminate" *ngIf="showSpinner"></mat-spinner>
    <div *ngIf="showSpinner" style="position:relative;left: 10px">Loading...</div>
</div>

<div class="filter-topbar">
  <div class="filter-container">
    <form [formGroup]="filterForm" class="filter-form">
      
      <!-- ROW 1: Primary Filters -->
      <div class="filter-row primary-row">
        
        <!-- IRI Week -->
        <div class="filter-field">
          <label class="form-label">IRI Week</label>
          <mat-form-field appearance="outline">
            <mat-select formControlName="iriWeek" (selectionChange)="onIriWeekChange()">
              <mat-option *ngFor="let week of iriWeeks" [value]="week.iri_week">
                {{week.iri_week_viewOnly}}
              </mat-option>
            </mat-select>
          </mat-form-field>
        </div>

        <!-- Territory -->
        <div class="filter-field">
          <label class="form-label">Territory</label>
          <mat-form-field appearance="outline">
            <mat-select formControlName="territory" (selectionChange)="onTerritoryChange()">
              <mat-option [value]="'-1'">ALL</mat-option>
              <mat-option *ngFor="let territory of territories" [value]="territory.territory_id">
                {{territory.territory_name}}
              </mat-option>
            </mat-select>
          </mat-form-field>
        </div>

        <!-- Store -->
        <div class="filter-field">
          <label class="form-label">Store</label>
          <mat-form-field appearance="outline">
            <input matInput [matAutocomplete]="storeAuto" formControlName="store" placeholder="Search stores...">
            <button mat-button *ngIf="filterForm.get('store')?.value" matSuffix mat-icon-button (click)="clearStrCtrl()">
              <mat-icon>cancel</mat-icon>
            </button>
            <mat-autocomplete #storeAuto="matAutocomplete" (optionSelected)="onStoreSelected($event)">
              <mat-option *ngFor="let store of filteredStores" [value]="store.store_name" [matTooltip]="store.store_name">
                {{store.store_name}} ({{store.store_number}})
              </mat-option>
            </mat-autocomplete>
          </mat-form-field>
        </div>

        <!-- FSR -->
        <div class="filter-field">
          <label class="form-label">FSR</label>
          <mat-form-field appearance="outline">
            <input matInput [matAutocomplete]="fsrAuto" formControlName="fsr" placeholder="Search FSR...">
            <button mat-button *ngIf="filterForm.get('fsr')?.value" matSuffix mat-icon-button (click)="clearFsrCtrl()">
              <mat-icon>cancel</mat-icon>
            </button>
            <mat-autocomplete #fsrAuto="matAutocomplete" (optionSelected)="onFsrSelected($event)">
              <mat-option *ngFor="let fsr of filteredFSR" [value]="fsr.emp_name" [matTooltip]="fsr.emp_name">
                {{fsr.emp_name}} ({{fsr.emp_id}})
              </mat-option>
            </mat-autocomplete>
          </mat-form-field>
        </div>

        <!-- Store Assignment (Changed from radio to dropdown) -->
        <div class="filter-field">
          <label class="form-label">Store Assignment</label>
          <mat-form-field appearance="outline">
            <mat-select formControlName="storeAssignment">
              <mat-option value="all">All Stores</mat-option>
              <mat-option value="assigned">Assigned Stores</mat-option>
              <mat-option value="unassigned">Unassigned Stores</mat-option>
            </mat-select>
          </mat-form-field>
        </div>

        <!-- Sample Type (Changed from radio to dropdown) -->
        <div class="filter-field">
          <label class="form-label">Sample Type</label>
          <mat-form-field appearance="outline">
            <mat-select formControlName="sampleType">
              <mat-option value="all">All Types</mat-option>
              <mat-option value="sample">Sample</mat-option>
              <mat-option value="nonSample">Non-Sample</mat-option>
            </mat-select>
          </mat-form-field>
        </div>

   
      </div>

      <!-- ROW 2: Secondary Filters -->
      <div class="filter-row secondary-row">
        
        <!-- State -->
        <div class="filter-field">
          <label class="form-label">State</label>
          <mat-form-field appearance="outline">
            <input matInput [matAutocomplete]="stateAuto" formControlName="state">
            <button mat-button *ngIf="filterForm.get('state')?.value" matSuffix mat-icon-button (click)="clearStaCtrl()">
              <mat-icon>cancel</mat-icon>
            </button>
            <mat-autocomplete #stateAuto="matAutocomplete" (optionSelected)="onStateSelected($event)">
              <mat-option *ngFor="let state of filteredState" [value]="state.state">
                {{state.state}}
              </mat-option>
            </mat-autocomplete>
          </mat-form-field>
        </div>

        <!-- City -->
        <div class="filter-field">
          <label class="form-label">City</label>
          <mat-form-field appearance="outline">
            <input matInput [matAutocomplete]="cityAuto" formControlName="city">
            <button mat-button *ngIf="filterForm.get('city')?.value" matSuffix mat-icon-button (click)="clearcityCtrl()">
              <mat-icon>cancel</mat-icon>
            </button>
            <mat-autocomplete #cityAuto="matAutocomplete" (optionSelected)="onCitySelected($event)">
              <mat-option *ngFor="let city of filteredCity" [value]="city.city">
                {{city.city}}
              </mat-option>
            </mat-autocomplete>
          </mat-form-field>
        </div>

        <!-- Cluster -->
        <div class="filter-field">
          <label class="form-label">Cluster</label>
          <mat-form-field appearance="outline">
            <input matInput [matAutocomplete]="clusterAuto" formControlName="cluster">
            <mat-autocomplete #clusterAuto="matAutocomplete" (optionSelected)="onClusterSelected($event)">
              <mat-option *ngFor="let cluster of filteredCluster" [value]="cluster.position_name">
                {{cluster.position_name}}
              </mat-option>
            </mat-autocomplete>
          </mat-form-field>
        </div>

        <!-- Task -->
        <div class="filter-field">
          <label class="form-label">Task</label>
          <mat-form-field appearance="outline">
            <input matInput [matAutocomplete]="taskAuto" formControlName="task">
            <button mat-button *ngIf="filterForm.get('task')?.value" matSuffix mat-icon-button (click)="clearTaskCtrl()">
              <mat-icon>cancel</mat-icon>
            </button>
            <mat-autocomplete #taskAuto="matAutocomplete" (optionSelected)="onTaskSelected($event)">
              <mat-option *ngFor="let task of filteredTask" [value]="task.task_name">
                {{task.task_name}} ({{task.task_number}})
              </mat-option>
            </mat-autocomplete>
          </mat-form-field>
        </div>

        <!-- FSR Hours (Combined operator and hours input) -->
        <div class="filter-field fsr-hours-field">
          <label class="form-label">FSR Hours</label>
          <div class="fsr-hours-container">
            <mat-form-field appearance="outline" class="operator-field">
              <mat-select formControlName="fsrHourOperator" (selectionChange)="onFsrHourOperatorChange()">
                <mat-option *ngFor="let op of fsrHourOperators" [value]="op.value">
                  {{op.label}}
                </mat-option>
              </mat-select>
            </mat-form-field>
            
            <mat-form-field appearance="outline" class="hour-field">
              <input matInput 
                    formControlName="fsrHour" 
                    type="number" 
                    placeholder="Hours"
                    (change)="onFsrHourChange()"
                    min="0"
                    max="999">
            </mat-form-field>
          </div>
        </div>

        <!-- Visible Columns -->
        <div class="filter-field">
          <label class="form-label">Visible Columns</label>
          <mat-form-field appearance="outline">
            <mat-label>Select Columns</mat-label>
            <mat-select multiple [(value)]="selectedColumns" (selectionChange)="onColumnSelectionChange()">
              <mat-option *ngFor="let column of availableColumns" 
                          [value]="column.key" 
                          [disabled]="column.required">
                {{column.label}}
                <span *ngIf="column.required" class="required-indicator"> *</span>
              </mat-option>
            </mat-select>
          </mat-form-field>
        </div>

        <!-- Multi FSR Store Checkbox -->
        <div class="checkbox-field">
          <label class="form-label">Options</label>
          <mat-checkbox formControlName="multiFsrStore" (change)="onMultiFsrStoreChange()">
            Multi FSR Store
          </mat-checkbox>
        </div>
      </div>
           <!-- Action Buttons -->
        <div class="action-buttons">
          <button mat-raised-button color="primary" (click)="onApplyFilters()">
            Apply Filters
          </button>
          <button mat-stroked-button (click)="onClearFilters()">
            Clear Filters
          </button>
        </div>
    </form>
  </div>
</div>

<footer>
  <div class="mat-spinner-container">
    <mat-spinner mode="indeterminate" *ngIf="showSpinner"></mat-spinner>
    <div *ngIf="showSpinner" style="position:relative;left: 10px">Loading...</div>
  </div>
</footer>
.filter-topbar {
  width: 100%;
  padding: 16px;
  background: #fafafa;
}

.filter-container {
  max-width: 100%;
  
}

.filter-form {
  /* display: flex;
  flex-direction: column;
  gap: 10px; */
  width: 100%;
}

.filter-row {
  /* display: flex;
  flex-wrap: wrap;
  gap: 10px;
  align-items: flex-end; */
   display: grid;
  gap: 16px;
  align-items: end;
  margin-bottom: 16px;
  width: 100%;
}

.primary-row {
  grid-template-columns: 
    1fr          /* IRI Week */
    1fr          /* Territory */
    1.2fr        /* Store */
    1.2fr        /* FSR */
    1fr          /* Store Assignment */
    1fr          /* Sample Type */
    auto;        /* Action Buttons */
}


.secondary-row {
  grid-template-columns: 
    1fr          /* State */
    1fr          /* City */
    1fr          /* Cluster */
    1.2fr        /* Task */
    1.5fr        /* FSR Hours (operator + input) */
    1.5fr        /* Visible Columns */
    auto;        /* Multi FSR Store */
}

.filter-field {
  display: flex;
  flex-direction: column;
  min-width: 0;
}

.form-label {
  font-size: 12px;
  font-weight: 500;
  color: #666;
  margin-bottom: 4px;
  text-transform: uppercase;
  letter-spacing: 0.5px;
}

.filter-field .mat-form-field {
  width: 100%;
  font-size: 14px;
}

.filter-field .mat-form-field .mat-form-field-wrapper {
  padding-bottom: 0;
}

.filter-row .mat-form-field-wrapper {
  padding-bottom: 0;
}

.action-buttons {
  display: flex;
  gap: 8px;
  align-items: flex-end;
  flex-direction: row-reverse;
  flex-shrink: 0;
}

.action-buttons button {
  min-width: 100px;
  height: 36px;
}

.advanced-filters {
  border-top: 1px solid #e0e0e0;
  padding-top: 10px;
  margin-top: 8px;
}

.options-filters {
  border-top: 1px solid #e0e0e0;
  padding-top: 10px;
  margin-top: 8px;
}

/* NEW: Toggle and Checkbox Styles */
.toggle-field {
  display: flex;
  flex-direction: column;
  flex: 1;
  min-width: 200px;
}

.radio-group {
  display: flex;
  flex-direction: column;
  gap: 8px;
}

.radio-group mat-radio-button {
  font-size: 14px;
}

.checkbox-field {
  display: flex;
  flex-direction: column;
  flex: 1;
  min-width: 150px;
}

.checkbox-field mat-checkbox {
  margin-top: 8px;
}

.advanced-toggle {
  display: flex;
  justify-content: center;
  margin-top: 12px;
}

.toggle-button {
  color: #1976d2;
  font-size: 14px;
}

.toggle-button mat-icon {
  margin-right: 4px;
}

.fsr-hours-container {
  display: flex;
  gap: 8px;
  align-items: center;
}

.operator-field {
  flex: 0 0 80px;
  min-width: 80px;
}

.hour-field {
  flex: 1;
  min-width: 100px;
}

.expanded-info {
  font-size: 12px;
  color: #666;
  font-weight: normal;
}

.required-indicator {
  color: #f44336;
  font-weight: bold;
}

.mat-option[aria-disabled="true"] {
  background-color: #f5f5f5;
  color: #999;
}

.column-selector-field {
  min-width: 200px;
}

.fsr-hours-container {
  display: grid;
  grid-template-columns: 80px 1fr;
  gap: 8px;
  width: 100%;
}

.operator-field {
  min-width: 60px;
}

.operator-field .mat-select-value {
  font-size: 13px;
  text-align: center;
}

.hour-field {
  flex: 1;
}

/* ACTION BUTTONS */
.action-buttons {
  display: flex;
  gap: 8px;
  align-items: flex-end;
}

.action-buttons button {
  min-width: 100px;
  height: 40px;
  font-size: 13px;
  font-weight: 500;
}

/* CHECKBOX FIELD */
.checkbox-field {
  display: flex;
  flex-direction: column;
  justify-content: flex-end;
  align-items: flex-start;
  min-height: 56px;
}

.checkbox-field mat-checkbox {
  margin-top: 8px;
}

.checkbox-field .form-label {
  margin-bottom: 8px;
}

/* MAT-SELECT STYLING */
.mat-select-panel {
  max-height: 300px;
}

.mat-option {
  font-size: 14px;
}

.required-indicator {
  color: #f44336;
  font-weight: bold;
}

/* RESPONSIVE DESIGN */
@media (max-width: 1600px) {
  .primary-row {
    grid-template-columns: 
      0.9fr 0.9fr 1.1fr 1.1fr 0.9fr 0.9fr auto;
  }
  
  .secondary-row {
    grid-template-columns: 
      0.9fr 0.9fr 0.9fr 1.1fr 1.5fr 1.4fr auto;
  }
}

@media (max-width: 1400px) {
  .filter-row {
    gap: 12px;
  }
  
  .primary-row {
    grid-template-columns: 
      0.8fr 0.8fr 1fr 1fr 0.8fr 0.8fr auto;
  }
  
  .secondary-row {
    grid-template-columns: 
      0.8fr 0.8fr 0.8fr 1fr 1.3fr 1.3fr auto;
  }
  
  .action-buttons button {
    min-width: 90px;
    font-size: 12px;
  }
}

@media (max-width: 1200px) {
  .filter-row {
    gap: 8px;
  }
  
  .primary-row,
  .secondary-row {
    grid-template-columns: repeat(auto-fit, minmax(140px, 1fr));
  }
  
  .action-buttons {
    grid-column: 1 / -1;
    justify-content: center;
    margin-top: 8px;
  }
  
  .checkbox-field {
    grid-column: 1 / -1;
    align-items: center;
  }
}

@media (max-width: 768px) {
  .filter-container {
    padding: 0 8px;
  }
  
  .filter-row {
    display: flex;
    flex-direction: column;
    gap: 12px;
  }
  
  .filter-field,
  .checkbox-field {
    width: 100%;
  }
  
  .fsr-hours-container {
    grid-template-columns: 80px 1fr;
  }
  
  .action-buttons {
    flex-direction: column;
    width: 100%;
  }
  
  .action-buttons button {
    width: 100%;
    min-width: unset;
  }
}

/* HOVER EFFECTS */
.filter-field:hover mat-form-field {
  transform: translateY(-1px);
  transition: transform 0.2s ease;
}

.action-buttons button:hover {
  transform: translateY(-1px);
  transition: transform 0.2s ease;
}

/* FOCUS STATES */
.mat-form-field.mat-focused {
  transform: scale(1.02);
  transition: transform 0.2s ease;
}

<div class="table-container">
  <mat-card class="table-card" [ngClass]="getWeekTypeClass()">
    <!-- <mat-card-header> -->
      <!-- Search Bar -->
      <!-- <div class="search-container">
        <mat-form-field appearance="outline" class="search-field">
          <mat-label>Search stores...</mat-label>
          <input matInput [formControl]="searchControl" 
                placeholder="Search by store number, name, address, city, state, assigned to, etc.">
          <mat-icon matPrefix>search</mat-icon>
          <button mat-button *ngIf="searchControl.value" matSuffix mat-icon-button (click)="clearSearch()">
            <mat-icon>clear</mat-icon>
          </button>
        </mat-form-field>
      </div> -->
    <!-- </mat-card-header> -->
    
    <mat-card-content>
      <div class="table-wrapper">
        <mat-table #table [dataSource]="dataSource" matSort class="store-table mat-elevation-2" [ngClass]="getWeekTypeTableClass()">
          
          <!-- Store Number Column -->
          <ng-container matColumnDef="store_number" *ngIf="isColumnVisible('store_number')">
            <mat-header-cell *matHeaderCellDef class="mat-header-style">
              <button mat-icon-button 
                      [disabled]="isExpandingAll"
                      (click)="expandAllRows()" 
                      [title]="allExpanded ? 'Collapse All' : 'Expand All'"
                      class="expand-all-btn">
                <mat-icon>{{allExpanded ? 'unfold_less' : 'unfold_more'}}</mat-icon>
              </button>
              Store #
            </mat-header-cell>
            <mat-cell *matCellDef="let element" class="store-number-cell">
              <div style="width: 100%;">
              <span class="caret" [class.clicked]="isRowExpanded(element)">▼</span>
              <span class="store-number">{{element.StoreNumber}}</span>
              </div>
             
            </mat-cell>
          </ng-container>

          <!-- Territory -->
         <ng-container matColumnDef="territory" *ngIf="isColumnVisible('territory')">
            <mat-header-cell *matHeaderCellDef class="mat-header-style" matTooltip="territory">Terr</mat-header-cell>
            <mat-cell *matCellDef="let element">{{element.FldTerrtyNbr}}</mat-cell>
          </ng-container>

                  <!-- Position Number -->
         <ng-container matColumnDef="position_number" *ngIf="isColumnVisible('position_number')">
            <mat-header-cell *matHeaderCellDef class="mat-header-style">Position #</mat-header-cell>
            <mat-cell *matCellDef="let element">{{element.PositionName}}</mat-cell>
          </ng-container>

                  <!-- BFD -->
         <ng-container matColumnDef="bdf" *ngIf="isColumnVisible('bdf')">
            <mat-header-cell *matHeaderCellDef class="mat-header-style">BFD</mat-header-cell>
            <mat-cell *matCellDef="let element">{{element.Bfd}}</mat-cell>
          </ng-container>

                          <!-- Outlet -->
         <ng-container matColumnDef="outlet" *ngIf="isColumnVisible('outlet')">
            <mat-header-cell *matHeaderCellDef class="mat-header-style">Outlet</mat-header-cell>
            <mat-cell *matCellDef="let element">{{element.OutletType}}</mat-cell>
          </ng-container>

          <!-- Store Name Column -->
          <ng-container matColumnDef="store_name" *ngIf="isColumnVisible('store_name')">
            <mat-header-cell *matHeaderCellDef class="mat-header-style">Store Name</mat-header-cell>
            <mat-cell *matCellDef="let element" class="store-name-cell">
              <div style="width: 100%;">
              <span class="store-name" (click)="openProximityDataDialog(element); $event.stopPropagation();">
                {{element.StoreName}}
              </span>
              </div>
             
            </mat-cell>
          </ng-container>

          <!-- Address Column -->
          <ng-container matColumnDef="addr_line1" *ngIf="isColumnVisible('addr_line1')">
            <mat-header-cell *matHeaderCellDef class="mat-header-style">Address</mat-header-cell>
            <mat-cell *matCellDef="let element">{{element.AddrLine1}}</mat-cell>
          </ng-container>

          <!-- City Column -->
          <ng-container matColumnDef="city" *ngIf="isColumnVisible('city')">
            <mat-header-cell *matHeaderCellDef class="mat-header-style">City</mat-header-cell>
            <mat-cell *matCellDef="let element">{{element.City}}</mat-cell>
          </ng-container>

          <!-- State Column -->
          <ng-container matColumnDef="state" *ngIf="isColumnVisible('state')">
            <mat-header-cell *matHeaderCellDef class="mat-header-style">State</mat-header-cell>
            <mat-cell *matCellDef="let element">

              <div style="width: 100%;"> <span class="state-badge">{{element.State}}</span></div>
            </mat-cell>
          </ng-container>

          <!-- Zip Column -->
          <ng-container matColumnDef="zip" *ngIf="isColumnVisible('zip')">
            <mat-header-cell *matHeaderCellDef class="mat-header-style">Zip</mat-header-cell>
            <mat-cell *matCellDef="let element">{{element.Zip}}</mat-cell>
          </ng-container>

          <!-- ENHANCED: Assigned To Column with line-by-line display -->
         <ng-container matColumnDef="assigned_to" *ngIf="isColumnVisible('assigned_to')">
              <mat-header-cell *matHeaderCellDef class="mat-header-style">Assigned To</mat-header-cell>
              <mat-cell *matCellDef="let element" class="assigned-cell" 
                        (click)="openAssignmentDialog(element, 'StoreLevel'); $event.stopPropagation()">
                <div class="assignment-container">
                  <div class="assignment-names" 
                      [ngClass]="getAssignmentClass(element.AssignedTo)"
                      [matTooltip]="getAssignedToTooltip(element.AssignedTo)"
                      matTooltipClass="multi-line-tooltip">
                    
                    <!-- Single person or NOT ASSIGNED - display normally -->
                    <div *ngIf="!shouldDisplayMultipleLines(element.AssignedTo)" class="single-name">
                      {{element.AssignedTo || 'NOT ASSIGNED'}}
                    </div>
                    
                    <!-- Multiple people - display line by line -->
                    <div *ngIf="shouldDisplayMultipleLines(element.AssignedTo)" class="multiple-names">
                      <div *ngFor="let name of getIndividualNames(element.AssignedTo); let i = index" 
                          class="name-line"
                          [class.first-name]="i === 0">
                        {{name}}
                      </div>
                    </div>
                    
                  </div>
                </div>
              </mat-cell>
            </ng-container>

          <!-- Task Completed Column -->
          <ng-container matColumnDef="task_completed" *ngIf="isColumnVisible('task_completed')">
            <mat-header-cell *matHeaderCellDef class="mat-header-style" matTooltip="Completed">Completed</mat-header-cell>
            <mat-cell *matCellDef="let element">
              <span class="status-badge" [ngClass]="getTaskCompletedClass(element.TaskCompleted)">
                {{formatTaskCompleted(element.TaskCompleted)}}
              </span>
            </mat-cell>
          </ng-container>

          <!-- Quality Column -->
          <ng-container matColumnDef="quality" *ngIf="isColumnVisible('quality')">
            <mat-header-cell *matHeaderCellDef class="mat-header-style" matTooltip="Quality">Quality</mat-header-cell>
            <mat-cell *matCellDef="let element">
              <span class="quality-badge" [ngClass]="getQualityClass(element.Quality)">
                {{formatQuality(element.Quality)}}
              </span>
            </mat-cell>
          </ng-container>

      

          <!-- Cost Over Column -->
          <ng-container matColumnDef="cost_over" *ngIf="isColumnVisible('cost_over')">
            <mat-header-cell *matHeaderCellDef class="mat-header-style">Over Cost</mat-header-cell>
            <mat-cell *matCellDef="let element">
              <span class="cost-badge" [ngClass]="getCostOverClass(element.CostOver)">
                {{formatCostOver(element.CostOver)}}
              </span>
            </mat-cell>
          </ng-container>

          <!-- Guaranteed Miles Column -->
          <ng-container matColumnDef="guaranteed_miles" *ngIf="isColumnVisible('guaranteed_miles')">
            <mat-header-cell *matHeaderCellDef class="mat-header-style">Miles</mat-header-cell>
            <mat-cell *matCellDef="let element">{{formatGuaranteedMiles(element.GuaranteedMiles)}}</mat-cell>
          </ng-container>

          <!-- Average Cost Column -->
          <ng-container matColumnDef="avg_cost" *ngIf="isColumnVisible('avg_cost')">
            <mat-header-cell *matHeaderCellDef class="mat-header-style">Avg Cost</mat-header-cell>
            <mat-cell *matCellDef="let element">{{element.AvgCost}}</mat-cell>
          </ng-container>

          <!-- WK1 Costs Column -->
          <ng-container matColumnDef="wk1_costs" *ngIf="isColumnVisible('wk1_costs')">
            <mat-header-cell *matHeaderCellDef class="mat-header-style">WK1 Cost</mat-header-cell>
            <mat-cell *matCellDef="let element">{{element.WK1FSRProdCost}}</mat-cell>
          </ng-container>

             <!-- WK1 Travel Costs Column -->
          <ng-container matColumnDef="wk1_travel" *ngIf="isColumnVisible('wk1_travel')">
            <mat-header-cell *matHeaderCellDef class="mat-header-style">WK1 Travel</mat-header-cell>
            <mat-cell *matCellDef="let element">{{element.WK1StoreTravelCost}}</mat-cell>
          </ng-container>

             <!-- wk1_ovg_travel Column -->
          <ng-container matColumnDef="wk1_ovg_travel" *ngIf="isColumnVisible('wk1_ovg_travel')">
            <mat-header-cell *matHeaderCellDef class="mat-header-style">WK1 Ovg Travel</mat-header-cell>
            <mat-cell *matCellDef="let element">{{element.WK1StoreTravelOvgCost}}</mat-cell>
          </ng-container>

          <!-- WK2 Costs Column -->
          <ng-container matColumnDef="wk2_costs" *ngIf="isColumnVisible('wk2_costs')">
            <mat-header-cell *matHeaderCellDef class="mat-header-style">WK2 Cost</mat-header-cell>
            <mat-cell *matCellDef="let element">{{element.WK2FSRProdCost}}</mat-cell>
          </ng-container>

                      <!-- WK1 Travel Costs Column -->
          <ng-container matColumnDef="wk2_travel" *ngIf="isColumnVisible('wk2_travel')">
            <mat-header-cell *matHeaderCellDef class="mat-header-style">WK2 Travel</mat-header-cell>
            <mat-cell *matCellDef="let element">{{element.WK2StoreTravelCost}}</mat-cell>
          </ng-container>

             <!-- wk2_ovg_travel Column -->
          <ng-container matColumnDef="wk2_ovg_travel" *ngIf="isColumnVisible('wk2_ovg_travel')">
            <mat-header-cell *matHeaderCellDef class="mat-header-style">WK1 Ovg Travel</mat-header-cell>
            <mat-cell *matCellDef="let element">{{element.WK2StoreTravelOvgCost}}</mat-cell>
          </ng-container>

          <!-- ENHANCED: Comments Column with Popup Dialog -->
          <ng-container matColumnDef="user_comment" *ngIf="isColumnVisible('user_comment')">
            <mat-header-cell *matHeaderCellDef class="mat-header-style">Comments</mat-header-cell>
            <mat-cell *matCellDef="let element" class="comment-cell">
              <div class="comment-display"
                   (click)="openCommentDialog(element); $event.stopPropagation();"
                   [title]="element.UserComment || 'Click to add/edit comment'"
                   [class.has-comment]="element.UserComment"
                   [class.clickable]="canEditComments || element.UserComment">
                
                <span class="comment-text">
                  {{getCommentDisplay(element.UserComment)}}
                </span>
                
                <!-- Comment icon indicator -->
                <!-- <mat-icon class="comment-icon" 
                          [class.has-content]="element.UserComment">
                  {{element.UserComment ? 'comment' : 'add_comment'}}
                </mat-icon> -->
              </div>
            </mat-cell>
          </ng-container>

          <!-- Header and Data Rows -->
          <mat-header-row *matHeaderRowDef="displayedColumns; sticky: true"></mat-header-row>
          <mat-row *matRowDef="let row; columns: displayedColumns; let i = index"
                  class="table-row"
                  [cdkDetailRow]="row" 
                  [cdkDetailRowTpl]="tpl"
                  (toggleChange)="GetSubgridData($event, row)"
                  (dataLoadRequest)="onDataLoadRequest($event)"
                  matRipple>
          </mat-row>
        </mat-table>
      </div>
      
      <mat-paginator [pageSizeOptions]="[50, 100, 150, 200]" 
                    showFirstLastButtons
                    class="table-paginator">
      </mat-paginator>
    </mat-card-content>
  </mat-card>
</div>

<!-- Inner Table Template -->
<ng-template #tpl let-element let-subgridData="subgridData" let-isLoading="isLoading">
  <div class="mat-row detail-row" style="overflow: hidden;">
    
    <!-- Loading indicator for this specific row -->
    <div *ngIf="isLoading" class="row-loading">
      <mat-spinner diameter="20"></mat-spinner>
      <span>Loading data for {{element.StoreName}}...</span>
    </div>
    
    <!-- Data table for this specific row -->
    <table class="expanded-table" *ngIf="!isLoading"> 
      <tr> 
        <th>Task Name</th>
        <th>Assigned To</th>              
        <th>CSR Info</th>
        <th>Wave</th>
        <th>Avg Coll Time</th>
      </tr>
      <tr *ngFor="let item of subgridData;">
        <td>{{item.TaskName}}</td>
        <td (click)="openTaskAssignmentDialog(item); $event.stopPropagation()">
          {{item.AssignedTo}}
        </td>              
        <td>{{item.CsrInfo}}</td>
        <td>{{item.Wave}}</td>
        <td>{{item.ExpectedCollectionTime}}</td>
      </tr>       
    </table>
  </div>
</ng-template>

<footer>
  <div class="mat-spinner-container">
    <mat-spinner mode="indeterminate" *ngIf="showSpinner"></mat-spinner>
    <div *ngIf="showSpinner" style="position:relative;left: 10px">Loading...</div>
  </div>
</footer>

.table-container {
  width: 100%;
  height: 100%;
  position: relative;
  min-height: 75vh;
  max-height: 75vh;
  /* overflow-x: auto; */
}

.table-card {
  height: 85vh;
  display: flex;
  flex-direction: column;
  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
  border-radius: 8px;
  width: 100%;
  max-width: none;
}

.table-wrapper {
   flex: 1;
   overflow: auto;
   height: calc(75vh - 5px);
   width: 100%;
   overflow-x: auto;
   overflow-y: auto;
}

.table-wrapper mat-row, mat-footer-row {
    min-height: 40px !important;
}

.table-wrapper mat-header-row {
    min-height: 40px !important;
}

.mat-card-content {
    display: block;
    margin-bottom: 0 !important;
}

.search-container {
  padding: 16px;
  background: #f8f9fa;
  border-bottom: 1px solid #dee2e6;
  display: flex;
  align-items: center;
  gap: 16px;
  flex-wrap: wrap;
}

.search-field {
  flex: 1;
  min-width: 300px;
}

.search-info {
  display: flex;
  align-items: center;
  gap: 8px;
  font-size: 14px;
  color: #666;
}

.searching-indicator {
  display: flex;
  align-items: center;
  gap: 4px;
  color: #1976d2;
}

.table-controls {
  display: flex;
  align-items: center;
  padding: 8px 16px;
  background: #f5f5f5;
  border-bottom: 1px solid #e0e0e0;
  gap: 12px;
}

.expand-all-btn {
  color: #1976d2;
}

.expand-all-btn:disabled {
  color: #ccc;
}

.expand-status {
  display: flex;
  align-items: center;
  gap: 8px;
  font-size: 14px;
  color: #666;
}


.store-table {
  width: 100%;
  /* min-width: 1400px; */
  /* max-width: 2200px; */
  background: white;
  display: table;
  table-layout: auto;
  border-collapse: collapse;
  margin: 0px;
}

/* Current week min-width: ~1520px */
.store-table.week-current {
  min-width: 1520px;
}

/* Future week min-width: ~1320px */
.store-table.week-future {
  min-width: 1320px;
}

/* Previous week min-width: ~2100px */
.store-table.week-previous {
  min-width: 2100px;
}

.store-table .mat-header-row {
  height: 40px;
}

.store-table .mat-row {
  max-width: 120%;
  cursor: pointer;
  transition: background-color 0.2s;
}

.store-table .mat-row:hover {
  background-color: mintcream;
}

.store-table .mat-row.selected-row {
  background-color: lightyellow;
}


.mat-header-style {
  font-weight: bold !important;
  font-size: 15px !important;
  background-color: lightgray !important;
}

.mat-column-store_number {
  width: 110px;
  min-width: 110px;
  max-width: 130px;
  text-align: center;
}


.mat-column-territory {
  width: 70px;
  min-width: 70px;
  max-width: 80px;
  text-align: center;
}


.mat-column-position_number {
  width: 120px;
  min-width: 120px;
  max-width: 140px;
  text-align: center;
}


.mat-column-bdf {
  width: 80px;
  min-width: 80px;
  max-width: 90px;
  text-align: center;
}


.mat-column-outlet {
  width: 80px;
  min-width: 80px;
  max-width: 90px;
  text-align: center;
}


.mat-column-store_name {
  width: 200px;
  min-width: 180px;
  max-width: 250px;
}

.mat-column-store_name .mat-cell,
.mat-column-store_name .mat-header-cell {
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
}


.mat-column-addr_line1 {
  width: 200px;
  min-width: 180px;
  max-width: 250px;
}

.mat-column-addr_line1 .mat-cell,
.mat-column-addr_line1 .mat-header-cell {
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
}


.mat-column-city {
  width: 140px;
  min-width: 120px;
  max-width: 180px;
}

.mat-column-city .mat-cell,
.mat-column-city .mat-header-cell {
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
}


.mat-column-state {
  width: 80px;
  min-width: 80px;
  max-width: 90px;
  text-align: center;
}


.mat-column-assigned_to {
  width: 180px;
  min-width: 160px;
  max-width: 220px;
}


.mat-column-task_completed {
  width: 80px;
  min-width: 80px;
  max-width: 90px;
  text-align: center;
}


.mat-column-quality {
  width: 110px;
  min-width: 100px;
  max-width: 120px;
  text-align: center;
}


.mat-column-guaranteed_miles {
  width: 100px;
  min-width: 90px;
  max-width: 120px;
  text-align: center;
}


.mat-column-avg_cost {
  width: 110px;
  min-width: 100px;
  max-width: 130px;
  text-align: right;
}


.mat-column-cost_over,
.mat-column-wk1_costs,
.mat-column-wk1_travel,
.mat-column-wk1_ovg_travel,
.mat-column-wk2_costs,
.mat-column-wk2_travel,
.mat-column-wk2_ovg_travel {
  width: 120px;
  min-width: 110px;
  max-width: 140px;
  text-align: right;
}

.mat-column-cost_over .mat-cell,
.mat-column-wk1_costs .mat-cell,
.mat-column-wk1_travel .mat-cell,
.mat-column-wk1_ovg_travel .mat-cell,
.mat-column-wk2_costs .mat-cell,
.mat-column-wk2_travel .mat-cell,
.mat-column-wk2_ovg_travel .mat-cell {
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
}

/* Caret styling  */
.caret {
  display: inline-block;
  margin-right: 5px;
  margin-top: -1px;
  transition: transform 0.3s;
  font-size: 18px;
  font-weight: 800;  
  /* transform: rotate(90deg); */
  cursor: pointer;
}

.caret.clicked  {
  transform: rotate(180deg);
  margin-top: -5px;
}


.store-number-cell {
  font-weight: 500;
}

.store-name-cell .store-name {
  font-weight: 500;
  color: #333;
}

.address-cell {
  color: #555;
}

.state-badge {
  background: #e8f5e8;
  color: #2e7d32;
  padding: 4px 8px;
  border-radius: 12px;
  font-size: 12px;
  font-weight: 500;
  display: inline-block;
}

.assignment-badge {
  padding: 6px 12px;
  border-radius: 16px;
  font-size: 12px;
  font-weight: 500;
  text-transform: uppercase;
  display: inline-block;
  white-space: nowrap;
}

.assignment-badge.assigned {
  background: #4caf50;
  color: white;
}

.assignment-badge.not-assigned {
  background: #ff9800;
  color: white;
}

.collection-time-cell {
  color: #666;
  font-size: 13px;
}

.cluster-cell {
  font-family: 'Monaco', 'Menlo', monospace;
  font-size: 12px;
  background: #f5f5f5;
  color: #333;
  border-radius: 4px;
}


.expanded-table {
  margin-top: 5px;
  margin-bottom: 15px;
  margin-left: 70px;
  border-collapse: collapse;
  border: 1px solid #ddd;
  font-size: 14px;
  width: calc(100% - 140px); 
}

.expanded-table th,
.expanded-table td {
  padding: 8px 12px;
  text-align: left;
  border-bottom: 1px solid #ddd;
  white-space: nowrap;
}

.expanded-table th {
  background-color: #f2f2f2;
  font-weight: bold;
}

.expanded-table td[style*="max-width"] {
  white-space: normal !important;
  word-wrap: break-word;
}

/* Detail row styling */
.detail-row {
  background: #fafafa;
  overflow: hidden;
}

/* Paginator */
.table-paginator {
  border-top: 1px solid #e0e0e0;
  background: #fafafa;
  position: sticky;
  bottom: 0;
  z-index: 10;
  height: 52px;
}

/* Responsive design */
@media (max-width: 768px) {
  .table-wrapper {
    overflow-x: auto;
  }
  
  .store-table {
    min-width: 800px;
  }
  
   .search-container {
    flex-direction: column;
    align-items: stretch;
  }
  
  .search-field {
    min-width: auto;
  }

  .expanded-table {
    margin-left: 20px;
    width: calc(100% - 40px);
    font-size: 12px;
  }

  .row-loading {
  display: flex;
  align-items: center;
  justify-content: center;
  gap: 12px;
  padding: 20px;
  background: #f8f9fa;
  border: 1px dashed #dee2e6;
  margin: 10px 20px;
  border-radius: 4px;
  font-size: 14px;
  color: #666;
}
  
  .expanded-table th,
  .expanded-table td {
    padding: 6px 8px;
  }
}

/* Spinner styling */
.mat-spinner-container {
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  padding: 20px;
}

.mat-spinner {
  z-index: 111;
}

.comment-cell {
  min-width: 200px;
  max-width: 300px;
}

.comment-view {
  display: flex;
  align-items: center;
  gap: 8px;
}

.comment-text {
  flex: 1;
  cursor: pointer;
  padding: 4px;
  border-radius: 4px;
  color: #666;
  font-style: italic;
}

.comment-text:hover {
  background-color: #f5f5f5;
}

.comment-text:not(:empty) {
  color: #333;
  font-style: normal;
}

.comment-edit-btn {
  opacity: 0;
  transition: opacity 0.2s;
}

.comment-view:hover .comment-edit-btn {
  opacity: 1;
}

.comment-edit {
  display: flex;
  flex-direction: column;
  gap: 8px;
}

.comment-field {
  width: 100%;
}

.comment-actions {
  display: flex;
  justify-content: flex-end;
  gap: 4px;
}

.assignment-container {
  display: flex;
  flex-direction: column;
  gap: 2px;
}

.assignment-badge.multiple-assigned {
  background: #2196f3;
  color: white;
  position: relative;
}

.assignment-badge.single-assigned {
  background: #4caf50;
  color: white;
}

.assignment-count {
  font-size: 10px;
  color: #666;
  font-style: italic;
}

/* Multi-line tooltip */
.mat-tooltip.multi-line-tooltip {
  white-space: pre-line;
  max-width: 300px;
  text-align: left;
}

/* Text overflow handling for all cells */
.mat-cell {
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
  /* max-width: 200px; */
}

.mat-cell[matTooltip] {
  cursor: help;
}

/* Specific column max-widths to prevent overflow */
.mat-column-store_name .mat-cell {
  max-width: 250px;
}

.mat-column-addr_line1 .mat-cell {
  max-width: 200px;
}

.mat-column-assigned_to .mat-cell {
  max-width: 180px;
}

.store-table {
  width: 100%;
  table-layout: fixed; 
  border-collapse: separate;
  border-spacing: 0;
}

.store-table .mat-header-cell,
.store-table .mat-cell {
  padding: 0px 5px;
  /* border-right: 1px solid #e0e0e0; */
  vertical-align: middle;
  word-wrap: break-word;
}

.store-table .mat-header-cell:last-child,
.store-table .mat-cell:last-child {
  border-right: none;
}

/* Fixed column widths */
.mat-column-store_number {
  width: 120px;
  min-width: 120px;
}

.mat-column-position_number {
  width: 80px;
  min-width: 80px;
}

.mat-column-store_name {
  width: 200px;
  min-width: 200px;
}

.mat-column-addr_line1 {
  width: 180px;
  min-width: 180px;
}

.mat-column-city {
  width: 150px;
  min-width: 150px;
}

.mat-column-state {
  width: 80px;
  min-width: 80px;
}

.mat-column-avg_cost {
  width: 80px;
  min-width: 80px;
}

.mat-column-assigned_to {
  width: 160px;
  min-width: 160px;
}

.mat-column-user_comment {
  width: 150px;
  min-width: 150px;
}

/* Header alignment */
.mat-header-cell {
  text-align: left;
  font-weight: 600;
  color: #333;
  background: #f8f9fa;
  border-bottom: 2px solid #dee2e6;
}

/* Cell alignment */
.mat-cell {
  text-align: left;
  vertical-align: top;
  line-height: 1.4;
}


.assignment-container {
  display: flex;
  flex-direction: column;
  align-items: flex-start;
  min-height: 32px;
  padding: 4px 2px;
  width: 100%;
}

.assignment-names {
  display: flex;
  flex-direction: column;
  align-items: flex-start;
  width: 100%;
  word-wrap: break-word;
}

.single-name {
  font-size: 13px;
  line-height: 1.3;
  font-weight: 500;
  max-width: 100%;
  word-wrap: break-word;
  overflow-wrap: break-word;
}

.multiple-names {
  display: flex;
  flex-direction: column;
  width: 100%;
}

.name-line {
  font-size: 12px;
  line-height: 1.2;
  padding: 1px 0;
  word-break: break-word;
  max-width: 100%;
}

.name-line.first-name {
  font-weight: 600;
  border-bottom: 1px solid #e0e0e0;
  padding-bottom: 2px;
  margin-bottom: 2px;
}

/* Assignment status styling */
.assignment-names.not-assigned .single-name {
  color: #f44336;
  font-style: italic;
  font-weight: 400;
}

.assignment-names.single-assigned .single-name {
  color: #4caf50;
  font-weight: 500;
}

.assignment-names.multiple-assigned {
  border-left: 3px solid #2196f3;
  padding-left: 6px;
  background-color: rgba(33, 150, 243, 0.05);
}

.assignment-names.multiple-assigned .name-line {
  color: #1976d2;
  font-weight: 500;
}

.assignment-names.multiple-assigned .name-line.first-name {
  color: #0d47a1;
  font-weight: 600;
}

/* Multi-line tooltip styling */
::ng-deep .multi-line-tooltip {
  white-space: pre-line;
  max-width: 300px;
  text-align: left;
  line-height: 1.4;
}

/* Column width for assigned_to */
.mat-column-assigned_to {
  width: 180px;
  min-width: 180px;
  max-width: 200px;
}
