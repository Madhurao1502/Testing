<div>
  <button mat-raised-button color="primary" (click)="openImportDialog()">Import CSV</button>
  <button mat-raised-button color="accent" (click)="save()">Save</button>
  <button mat-raised-button color="warn" (click)="generatePdf()">Generate PDF</button>
</div>

<table mat-table [dataSource]="upcForm.controls" class="mat-elevation-z8" *ngIf="upcForm.controls.length">

  <ng-container matColumnDef="CustId">
    <th mat-header-cell *matHeaderCellDef> Custom UPC List </th>
    <td mat-cell *matCellDef="let row; let i = index">
      <mat-select [formControl]="row.get('CustId')">
        <mat-option [value]="0">-- Select --</mat-option>
        <mat-option *ngFor="let item of customUpcList" [value]="item.CustId">{{ item.Name }}</mat-option>
      </mat-select>
    </td>
  </ng-container>

  <ng-container matColumnDef="CollCatName">
    <th mat-header-cell *matHeaderCellDef> Collection Category </th>
    <td mat-cell *matCellDef="let row"> <input matInput [formControl]="row.get('CollCatName')"> </td>
  </ng-container>

  <ng-container matColumnDef="QCUnderReq">
    <th mat-header-cell *matHeaderCellDef> QC Under </th>
    <td mat-cell *matCellDef="let row"> <mat-checkbox [formControl]="row.get('QCUnderReq')"></mat-checkbox> </td>
  </ng-container>

  <ng-container matColumnDef="QCUnderPercent">
    <th mat-header-cell *matHeaderCellDef> QC % </th>
    <td mat-cell *matCellDef="let row"> <input matInput type="number" maxlength="2" [formControl]="row.get('QCUnderPercent')"> </td>
  </ng-container>

  <ng-container matColumnDef="Weeks">
    <th mat-header-cell *matHeaderCellDef> Weeks </th>
    <td mat-cell *matCellDef="let row"> <input matInput type="number" maxlength="2" [formControl]="row.get('Weeks')"> </td>
  </ng-container>

  <ng-container matColumnDef="Delete">
    <th mat-header-cell *matHeaderCellDef> Delete </th>
    <td mat-cell *matCellDef="let row; let i = index">
      <button mat-icon-button color="warn" (click)="deleteRow(i)">
        <mat-icon>delete</mat-icon>
      </button>
    </td>
  </ng-container>




getCustomUpcList() {
    this.upcService.getCustomUpcList().subscribe(list => {
      this.customUpcList = list;
      this.getCustomUpcDetail();
    });
  }

  getCustomUpcDetail() {
    this.upcService.getCustomUpcListDetail(this.taskId).subscribe(details => {
      this.upcForm.clear();
      details.forEach((item: any) => {
        const group = this.buildUpcRow(item);
        this.watchCollCatChange(group);
        this.upcForm.push(group);
      });
      const newGroup = this.buildUpcRow({ RowId: details.length + 1 });
      this.watchCollCatChange(newGroup);
      this.upcForm.push(newGroup);
    });
  }

  buildUpcRow(data: any): FormGroup {
    return this.fb.group({
      RowId: [data.RowId || 0],
      CustId: [data.CustId || 0],
      Description: [data.Description || ''],
      CollCatName: [data.CollCatName || '', Validators.required],
      QCUnderReq: [data.QCUnderReq || 0],
      QCUnderPercent: [data.QCUnderPercent || '', [Validators.min(0), Validators.max(99)]],
      Weeks: [data.Weeks || '', [Validators.min(0), Validators.max(99)]],
      Translation_Task: [data.Translation_Task || '']
    });
  }

  watchCollCatChange(group: FormGroup): void {
    group.get('CollCatName')?.valueChanges.subscribe(val => {
      if (val && this.isLastRow(group)) {
        const newGroup = this.buildUpcRow({ RowId: this.upcForm.length + 1 });
        this.watchCollCatChange(newGroup);
        this.upcForm.push(newGroup);
      }
    });
  }

  isLastRow(group: FormGroup): boolean {
    return this.upcForm.at(this.upcForm.length - 1) === group;
  }

  openImportDialog(): void {
    const dialogRef = this.dialog.open(ImportUpcDialogComponent);

    dialogRef.afterClosed().subscribe(result => {
      if (result?.uploaded) {
        this.getCustomUpcList();
      }
    });
  }

  onCustIdChange(index: number): void {
    const group = this.upcForm.at(index) as FormGroup;
    const selectedId = group.get('CustId')?.value;
    const selectedItem = this.customUpcList.find(item => item.CustId === selectedId);

    const isDuplicate = this.upcForm.controls.some((ctrl, i) => {
      return i !== index && ctrl.get('CustId')?.value === selectedId;
    });

    if (isDuplicate) {
      alert(`The Custom UPC List [${selectedItem?.Name || selectedId}] already appears in the list.`);
      group.patchValue({ CustId: 0, Description: '' });
      return;
    }

    if (selectedItem) {
      group.patchValue({ Description: selectedItem.Description });
    } else {
      group.patchValue({ Description: '' });
    }
  }

  deleteRow(index: number): void {
    if (confirm('Are you sure to delete Custom UPC List item?')) {
      this.upcForm.removeAt(index);
      if (this.upcForm.length === 0) {
        const newGroup = this.buildUpcRow({ RowId: 1 });
        this.watchCollCatChange(newGroup);
        this.upcForm.push(newGroup);
      }
    }
  }

  save(): void {
    if (!this.validateForm()) return;

    const upcData = this.upcForm.getRawValue();
    this.upcService.saveCustomUpcListDetail(upcData, this.taskId).subscribe(() => {
      this.isCustomUpcListChanged = false;
      this.getCustomUpcDetail();
    });
  }

  validateForm(): boolean {
    for (const group of this.upcForm.controls) {
      const custId = group.get('CustId')?.value;
      const name = group.get('CollCatName')?.value?.trim();
      if (custId && !name) {
        alert('*Collection Category name can not be blank');
        return false;
      }
      if (!custId && name) {
        alert('*Custom UPC List name can not be blank');
        return false;
      }
    }
    return true;
  }

  <tr mat-header-row *matHeaderRowDef="['CustId', 'CollCatName', 'QCUnderReq', 'QCUnderPercent', 'Weeks', 'Delete']"></tr>
  <tr mat-row *matRowDef="let row; columns: ['CustId', 'CollCatName', 'QCUnderReq', 'QCUnderPercent', 'Weeks', 'Delete'];"></tr>
</table>
