<div>
  <button (click)="goToPage(1, currentPage1 - 1)" [disabled]="currentPage1 === 1">Prev</button>
  <span>Page {{ currentPage1 }} of {{ Math.ceil(dataSource1.length / pageSize) }}</span>
  <button (click)="goToPage(1, currentPage1 + 1)" 
          [disabled]="currentPage1 === Math.ceil(dataSource1.length / pageSize)">Next</button>
</div>

<div>
  <button (click)="goToPage(2, currentPage2 - 1)" [disabled]="currentPage2 === 1">Prev</button>
  <span>Page {{ currentPage2 }} of {{ Math.ceil(dataSource2.length / pageSize) }}</span>
  <button (click)="goToPage(2, currentPage2 + 1)" 
          [disabled]="currentPage2 === Math.ceil(dataSource2.length / pageSize)">Next</button>
</div>

<label>Rows per page: </label>
<select (change)="changePageSize($event)">
  <option *ngFor="let size of [5, 10, 20]" [value]="size">{{ size }}</option>
</select>

changePageSize(event: any) {
  this.pageSize = +event.target.value;
  this.currentPage1 = 1; // Reset to first page
  this.currentPage2 = 1;
  this.updatePaginatedData();
}

currentPage1 = 1;  // Current page for table 1
currentPage2 = 1;  // Current page for table 2
pageSize = 5;  // Number of items per page

dataSource1: any[] = [];  // Full dataset for table 1
dataSource2: any[] = [];  // Full dataset for table 2

paginatedData1: any[] = [];  // Paginated data for table 1
paginatedData2: any[] = [];  // Paginated data for table 2

ngOnInit() {
  // Example: Load data from an API or service
  this.dataSource1 = this.getMockData(20); // Assume 20 records
  this.dataSource2 = this.getMockData(12); // Assume 12 records
  
  this.updatePaginatedData(); // Apply pagination
}
updatePaginatedData() {
  const startIndex1 = (this.currentPage1 - 1) * this.pageSize;
  const startIndex2 = (this.currentPage2 - 1) * this.pageSize;

  this.paginatedData1 = this.dataSource1.slice(startIndex1, startIndex1 + this.pageSize);
  this.paginatedData2 = this.dataSource2.slice(startIndex2, startIndex2 + this.pageSize);
}

// **Navigate pages**
goToPage(table: number, page: number) {
  if (table === 1) {
    if (page > 0 && page <= Math.ceil(this.dataSource1.length / this.pageSize)) {
      this.currentPage1 = page;
      this.updatePaginatedData();
    }
  } else if (table === 2) {
    if (page > 0 && page <= Math.ceil(this.dataSource2.length / this.pageSize)) {
      this.currentPage2 = page;
      this.updatePaginatedData();
    }
  }
}
