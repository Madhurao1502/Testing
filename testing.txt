


   switch (state) {
      case 'AP':
        return ['Center 1', 'Center 2', 'Center 3', 'Center 4', 'Center 5'];
      case 'UP':
        return ['Center 1', 'Center 2', 'Center 3', 'Center 4', 'Center 5', 'Center 6'];
      case 'TN':
        return ['Center 1', 'Center 2', 'Center 3', 'Center 4', 'Center 5', 'Center 6', 'Center 7', 'Center 8', 'Center 9', 'Center 10'];
      case 'KA':
        return Array.from({ length: 20 }, (_, i) => `Center ${i + 1}`);
        // return ['Center 1', 'Center 2', 'Center 3', 'Center 4', 'Center 5', 'Center 6', 'Center 7', 'Center 8', 'Center 9', 'Center 10'];
      default:
        return [];
    }

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++


import { Component, OnInit } from '@angular/core';
import { FormBuilder, FormGroup, FormArray } from '@angular/forms';
import { StateService } from './state.service';
import { CenterService } from './center.service';

@Component({
  selector: 'app-root',
  templateUrl: './app.component.html',
  styleUrls: ['./app.component.css']
})
export class AppComponent implements OnInit {
  states: string[];
  centerForm: FormGroup;

  constructor(
    private formBuilder: FormBuilder,
    private stateService: StateService,
    private centerService: CenterService
  ) {}

  ngOnInit() {
    this.states = this.stateService.getStates();
    this.initForm();
  }

  initForm() {
    this.centerForm = this.formBuilder.group({
      state: [''],
      centers: this.formBuilder.array([]) // No need to cast as FormArray
    });
    this.updateCenters();
  }

  updateCenters() {
    const state = this.centerForm.get('state').value;
    const centers = this.centerService.getCenters(state);
  
    // Clear existing controls
    const centerFormArray = this.centerForm.get('centers') as FormArray;
    centerFormArray.clear();
    // Add new controls based on the number of centers
    centers.forEach((center) => {
      centerFormArray.push(this.formBuilder.control(''));
    });
  }

  getFilteredCenters(currentIndex: number): string[] {
    const state = this.centerForm.get('state').value;
    const centers = this.centerService.getCenters(state);
    const selectedCenters = this.centerForm.get('centers').value.filter((value, index) => index !== currentIndex);
    
    return centers.filter(center => !selectedCenters.includes(center));
  }

}

//   isCenterDisabled(center: string, currentIndex: number): boolean {
//     const centerControls = (this.centerForm.get('centers') as FormArray).controls;
  
//     // Check if the center is selected in any other dropdown
//     return centerControls.some((control, index) => index !== currentIndex && control.value === center);
//   }
// }
============================================================================================================================



   <form [formGroup]="centerForm">
    <div>
      <label for="state">Select State:</label>
      <select id="state" formControlName="state" (change)="updateCenters()">
        <option value="" disabled>Select State</option>
        <option *ngFor="let state of states" [value]="state">{{ state }}</option>
      </select>
    </div>
  
    <div formArrayName="centers">
        <div *ngFor="let centerControl of centerForm.get('centers')['controls']; let i = index">
          <label for="center{{ i }}">Select Center:</label>
          <select [id]="'center' + i" [formControl]="centerControl">
            <option value="" disabled>Select Center</option>
            <!-- <option *ngFor="let center of centerService.getCenters(centerForm.get('state').value)" [value]="center" [disabled]="isCenterDisabled(center, i)">{{ center }}</option> -->
            <option *ngFor="let center of getFilteredCenters(i)" [value]="center">{{ center }}</option> 
        </select>
        </div>
      </div>
  </form>

