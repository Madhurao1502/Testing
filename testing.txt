<div class="container">
  <!-- Available Items Table -->
  <div class="table-container">
    <h3>Available Items</h3>
    <mat-form-field appearance="outline" class="filter">
      <mat-label>Search</mat-label>
      <input matInput (keyup)="applyFilter($event.target.value, 'available')">
    </mat-form-field>
    <table mat-table [dataSource]="availableDataSource" class="mat-elevation-z2">
      <ng-container matColumnDef="select">
        <th mat-header-cell *matHeaderCellDef>
          <mat-checkbox
            [checked]="isAllSelected(availableDataSource, selectionAvailable)"
            (change)="masterToggle(availableDataSource, selectionAvailable)">
          </mat-checkbox>
        </th>
        <td mat-cell *matCellDef="let row">
          <mat-checkbox (click)="$event.stopPropagation()"
                        (change)="$event ? selectionAvailable.toggle(row) : null"
                        [checked]="selectionAvailable.isSelected(row)">
          </mat-checkbox>
        </td>
      </ng-container>

      <ng-container matColumnDef="Name">
        <th mat-header-cell *matHeaderCellDef>Name</th>
        <td mat-cell *matCellDef="let row">{{ row.Name }}</td>
      </ng-container>

      <ng-container matColumnDef="ID">
        <th mat-header-cell *matHeaderCellDef>ID</th>
        <td mat-cell *matCellDef="let row">{{ row.ID }}</td>
      </ng-container>

      <tr mat-header-row *matHeaderRowDef="displayedColumns"></tr>
      <tr mat-row *matRowDef="let row; columns: displayedColumns;"></tr>
    </table>
  </div>

  <!-- Control Buttons -->
  <div class="button-container">
    <button mat-raised-button color="primary" (click)="addItems()">Add →</button>
    <button mat-raised-button color="accent" (click)="removeItems()">← Remove</button>
  </div>

  <!-- Selected Items Table -->
  <div class="table-container">
    <h3>Selected Items</h3>
    <mat-form-field appearance="outline" class="filter">
      <mat-label>Search</mat-label>
      <input matInput (keyup)="applyFilter($event.target.value, 'selected')">
    </mat-form-field>
    <table mat-table [dataSource]="selectedDataSource" class="mat-elevation-z2">
      <ng-container matColumnDef="select">
        <th mat-header-cell *matHeaderCellDef>
          <mat-checkbox
            [checked]="isAllSelected(selectedDataSource, selectionSelected)"
            (change)="masterToggle(selectedDataSource, selectionSelected)">
          </mat-checkbox>
        </th>
        <td mat-cell *matCellDef="let row">
          <mat-checkbox (click)="$event.stopPropagation()"
                        (change)="$event ? selectionSelected.toggle(row) : null"
                        [checked]="selectionSelected.isSelected(row)">
          </mat-checkbox>
        </td>
      </ng-container>

      <ng-container matColumnDef="Name">
        <th mat-header-cell *matHeaderCellDef>Name</th>
        <td mat-cell *matCellDef="let row">{{ row.Name }}</td>
      </ng-container>

      <ng-container matColumnDef="ID">
        <th mat-header-cell *matHeaderCellDef>ID</th>
        <td mat-cell *matCellDef="let row">{{ row.ID }}</td>
      </ng-container>

      <tr mat-header-row *matHeaderRowDef="displayedColumns"></tr>
      <tr mat-row *matRowDef="let row; columns: displayedColumns;"></tr>
    </table>
  </div>
</div>



import { Component } from '@angular/core';
import { MatTableDataSource } from '@angular/material/table';
import { SelectionModel } from '@angular/cdk/collections';

interface Item {
  Name: string;
  ID: number;
  Key: number;
}

@Component({
  selector: 'app-root',
  templateUrl: './app.component.html',
  styleUrls: ['./app.component.css']
})
export class AppComponent {
  availableItems: Item[] = [
    { Name: 'SomeName', ID: 123, Key: 1 },
    { Name: 'SomeName1', ID: 1234, Key: 2 },
    { Name: 'SomeName2', ID: 1235, Key: 3 },
    { Name: 'SomeName3', ID: 1236, Key: 5 }
  ];
  selectedItems: Item[] = [];

  availableDataSource = new MatTableDataSource<Item>(this.availableItems);
  selectedDataSource = new MatTableDataSource<Item>(this.selectedItems);

  selectionAvailable = new SelectionModel<Item>(true, []);
  selectionSelected = new SelectionModel<Item>(true, []);

  displayedColumns: string[] = ['select', 'Name', 'ID'];

  applyFilter(filterValue: string, table: 'available' | 'selected') {
    if (table === 'available') {
      this.availableDataSource.filter = filterValue.trim().toLowerCase();
    } else {
      this.selectedDataSource.filter = filterValue.trim().toLowerCase();
    }
  }

  addItems() {
    const itemsToAdd = this.selectionAvailable.selected;
    this.selectedItems.push(...itemsToAdd);
    this.availableItems = this.availableItems.filter(item => !this.selectionAvailable.isSelected(item));

    this.availableDataSource.data = this.availableItems;
    this.selectedDataSource.data = this.selectedItems;

    this.selectionAvailable.clear();
  }

  removeItems() {
    const itemsToRemove = this.selectionSelected.selected;
    this.availableItems.push(...itemsToRemove);
    this.selectedItems = this.selectedItems.filter(item => !this.selectionSelected.isSelected(item));

    this.availableDataSource.data = this.availableItems;
    this.selectedDataSource.data = this.selectedItems;

    this.selectionSelected.clear();
  }

  isAllSelected(dataSource: MatTableDataSource<Item>, selection: SelectionModel<Item>) {
    const numSelected = selection.selected.length;
    const numRows = dataSource.filteredData.length;
    return numSelected === numRows;
  }

  masterToggle(dataSource: MatTableDataSource<Item>, selection: SelectionModel<Item>) {
    this.isAllSelected(dataSource, selection)
      ? selection.clear()
      : dataSource.filteredData.forEach(row => selection.select(row));
  }
}
