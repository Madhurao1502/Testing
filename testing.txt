import { Component, Inject, OnInit } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { FormControl } from '@angular/forms';
import { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material/dialog';

@Component({
  selector: 'app-comment-dialog',
  templateUrl: './comment-dialog.component.html',
  styleUrls: ['./comment-dialog.component.css']
})
export class CommentDialogComponent implements OnInit {
  comments: any[] = [];
  newComment = new FormControl('');
  editingCommentId: string | null = null;

  apiUrls: any = {
    dashboard: 'https://yourserver.com/api/dashboard/comments',
    other: 'https://yourserver.com/api/other/comments'
  };

  constructor(
    private http: HttpClient,
    @Inject(MAT_DIALOG_DATA) public data: { apiType: string },
    private dialogRef: MatDialogRef<CommentDialogComponent>
  ) {}

  ngOnInit() {
    this.loadComments();
  }

  loadComments() {
    const apiUrl = this.apiUrls[this.data.apiType] || this.apiUrls.dashboard;
    this.http.get<any[]>(apiUrl).subscribe({
      next: (res) => (this.comments = res),
      error: (err) => console.error('Error loading comments:', err)
    });
  }

  addComment() {
    if (!this.newComment.value.trim()) return;

    const apiUrl = this.apiUrls[this.data.apiType] || this.apiUrls.dashboard;
    const newCommentObj = { text: this.newComment.value, timestamp: new Date() };

    this.http.post(apiUrl, newCommentObj).subscribe({
      next: (res) => {
        this.comments.push(res);
        this.newComment.reset();
      },
      error: (err) => console.error('Error adding comment:', err)
    });
  }

  editComment(comment: any) {
    this.editingCommentId = comment.id;
  }

  saveEdit(comment: any) {
    const apiUrl = `${this.apiUrls[this.data.apiType] || this.apiUrls.dashboard}/${comment.id}`;
    this.http.put(apiUrl, comment).subscribe({
      next: () => (this.editingCommentId = null),
      error: (err) => console.error('Error updating comment:', err)
    });
  }

  deleteComment(commentId: string) {
    const apiUrl = `${this.apiUrls[this.data.apiType] || this.apiUrls.dashboard}/${commentId}`;
    this.http.delete(apiUrl).subscribe({
      next: () => {
        this.comments = this.comments.filter(c => c.id !== commentId);
      },
      error: (err) => console.error('Error deleting comment:', err)
    });
  }

  closeDialog() {
    this.dialogRef.close();
  }
}
