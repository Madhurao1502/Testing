import { Pipe, PipeTransform } from '@angular/core';
import { DatePipe } from '@angular/common';

@Pipe({
  name: 'customDateFormat'
})
export class CustomDateFormatPipe implements PipeTransform {
  constructor(private datePipe: DatePipe) {}

  transform(value: string): string {
    if (!value) return '';

    let parts: string[];

    if (value.includes('-')) {
      // Handle "dd-MM-yyyy HH:mm:ss"
      parts = value.split(/[- :]/);
    } else if (value.includes('/')) {
      // Handle "dd/MM/yyyy HH:mm:ss"
      parts = value.split(/[/ :]/);
    } else {
      return value; // Return original if format is unknown
    }

    // Convert to Date object
    const dateObj = new Date(
      +parts[2],     // Year
      +parts[1] - 1, // Month (0-based index)
      +parts[0]      // Day
    );

    return this.datePipe.transform(dateObj, 'dd/MM/yyyy') || '';
  }
}




function formatDate(inputDate) {
    let formattedDate;

    if (/^\d{2}-\d{2}-\d{4}$/.test(inputDate)) {
        // If the format is DD-MM-YYYY
        const [day, month, year] = inputDate.split("-");
        formattedDate = new Date(`${year}-${month}-${day}`);
    } else if (/^\d{2}\/\d{2}\/\d{4}$/.test(inputDate)) {
        // If the format is DD/MM/YYYY (valid for JS Date constructor)
        return inputDate; // No change needed
    } else {
        throw new Error("Invalid date format");
    }

    // Format the date into MM/DD/YYYY
    return new Intl.DateTimeFormat("en-US", {
        month: "2-digit",
        day: "2-digit",
        year: "numeric"
    }).format(formattedDate);
}
