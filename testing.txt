<mat-form-field appearance="fill" class="required-field">
  <mat-label>Client <span class="required-symbol">*</span></mat-label>
  <input type="text" matInput formControlName="clientSearch" [matAutocomplete]="autoClient">
  <mat-autocomplete #autoClient="matAutocomplete">
    <!-- List clients -->
    <mat-option *ngFor="let client of filteredClients | async" [value]="client.c_name">
      {{ client.c_name }}
    </mat-option>

    <!-- Add Client Option -->
    <mat-option (click)="openAddClientDialog()">
      <mat-icon>add</mat-icon> Add Client
    </mat-option>
  </mat-autocomplete>
</mat-form-field>


<h2 mat-dialog-title>Add Client</h2>
<mat-dialog-content class="dialog-content">
  <mat-form-field appearance="fill">
    <mat-label>Client Name</mat-label>
    <input matInput [formControl]="clientNameCtrl" [matAutocomplete]="autoClient">
    <mat-autocomplete #autoClient="matAutocomplete">
      <mat-option *ngFor="let client of filteredClients | async" [value]="client.c_name">
        {{ client.c_name }}
      </mat-option>
    </mat-autocomplete>
  </mat-form-field>
</mat-dialog-content>
<mat-dialog-actions align="end">
  <button mat-button (click)="onCancel()">Cancel</button>
  <button mat-button color="primary" (click)="onSave()">Save</button>
</mat-dialog-actions>


.dialog-content {
  display: flex;
  flex-direction: column;
  gap: 16px;
}

mat-dialog-actions {
  padding-top: 16px;
}

openAddClientDialog() {
    const dialogRef = this.dialog.open(AddClientDialogComponent, {
      width: '400px',
      data: { clients: this.clients },
    });

    dialogRef.afterClosed().subscribe(result => {
      if (result) {
        this.clients.push({ C_id: String(this.clients.length + 1), c_name: result });
        this.form.get('clientSearch')!.setValue(result);
      }
    });
  }

 clientNameCtrl = new FormControl('');
  filteredClients!: Observable<any[]>;

  constructor(
    public dialogRef: MatDialogRef<AddClientDialogComponent>,
    @Inject(MAT_DIALOG_DATA) public data: any
  ) {}

  ngOnInit() {
    this.filteredClients = this.clientNameCtrl.valueChanges.pipe(
      startWith(''),
      map(value => this.filterClients(value || ''))
    );
  }

  filterClients(value: string): any[] {
    const filterValue = value.toLowerCase();
    return this.data.clients.filter(client =>
      client.c_name.toLowerCase().includes(filterValue)
    );
  }

  onSave() {
    this.dialogRef.close(this.clientNameCtrl.value);
  }

  onCancel() {
    this.dialogRef.close();
  }
