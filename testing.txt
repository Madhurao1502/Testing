// ... (previous code)

validateFileHeaders(file: File) {
  const reader = new FileReader();

  reader.onload = (e: any) => {
    const contents = e.target.result;
    const lines = contents.split('\n');
    const headerRow = lines[0].trim(); // Assuming headers are in the first row

    const expectedHeaders = 'RequestID|Id|SYS|Vendor|Item|Height|width|depth';
    const expectedHeadersArray = expectedHeaders.split('|');
    const fileHeadersArray = headerRow.split('|');

    if (!this.areArraysEqual(expectedHeadersArray, fileHeadersArray)) {
      console.error('File headers are not valid');
      // Handle invalid headers (show error message, etc.)
      return;
    }

    const jsonDataArray = [];

    // Validate data and convert to JSON
    for (let i = 1; i < lines.length; i++) {
      const dataRow = lines[i].trim();
      if (dataRow !== '') {
        const dataValues = dataRow.split('|');

        if (dataValues.length === expectedHeadersArray.length) {
          const rowData = {};
          for (let j = 0; j < dataValues.length; j++) {
            const header = expectedHeadersArray[j];
            const value = dataValues[j].trim();
            // Add the key-value pair to the rowData object
            rowData[header] = value;
          }
          // Add the rowData object to the JSON array
          jsonDataArray.push(rowData);
        } else {
          console.error(`Invalid data at line ${i + 1}: Number of columns does not match headers`);
          // Handle invalid data (show error message, etc.)
          return;
        }
      }
    }

    // If all checks pass, jsonDataArray now contains the JSON representation of the CSV data
    console.log('JSON data:', jsonDataArray);

    // You can now use the jsonDataArray for further processing or send it to the server
  };

  reader.readAsText(file);
}
