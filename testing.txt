import { Pipe, PipeTransform } from '@angular/core';
import { DatePipe } from '@angular/common';

@Pipe({
  name: 'customDateFormat'
})
export class CustomDateFormatPipe implements PipeTransform {
  constructor(private datePipe: DatePipe) {}

  transform(value: string): string {
    if (!value) return '';

    let parts: string[];

    if (value.includes('-')) {
      // Handle "dd-MM-yyyy HH:mm:ss"
      parts = value.split(/[- :]/);
    } else if (value.includes('/')) {
      // Handle "dd/MM/yyyy HH:mm:ss"
      parts = value.split(/[/ :]/);
    } else {
      return value; // Return original if format is unknown
    }

    // Convert to Date object
    const dateObj = new Date(
      +parts[2],     // Year
      +parts[1] - 1, // Month (0-based index)
      +parts[0]      // Day
    );

    return this.datePipe.transform(dateObj, 'dd/MM/yyyy') || '';
  }
}




safeFormatDate(dateString) {
    let date;
    
    // Check if date is in "DD-MM-YYYY" format
    if (/^\d{2}-\d{2}-\d{4}$/.test(dateString)) {
        const [day, month, year] = dateString.split("-");
        date = new Date(`${year}-${month}-${day}T00:00:00Z`); // Convert to UTC
    }
    // Check if date is in "DD/MM/YYYY" format
    else if (/^\d{2}\/\d{2}\/\d{4}$/.test(dateString)) {
        const [day, month, year] = dateString.split("/");
        date = new Date(`${year}-${month}-${day}T00:00:00Z`);
    }
    // If already in ISO format "YYYY-MM-DD"
    else {
        date = new Date(dateString);
    }

    // Ensure the date is valid
    if (isNaN(date.getTime())) {
        console.error("Invalid date:", dateString);
        return null;
    }

    // Format using Intl.DateTimeFormat (for US format)
    return new Intl.DateTimeFormat("en-US", {
        year: "numeric",
        month: "2-digit",
        day: "2-digit"
    }).format(date);
}
