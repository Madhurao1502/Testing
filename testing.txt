<mat-form-field>
  <input matInput [matAutocomplete]="auto1" placeholder="Sort 1" [(ngModel)]="sortOptions[0]">
  <mat-autocomplete #auto1="matAutocomplete">
    <mat-option *ngFor="let option of sortOptionsList" [value]="option.value" [disabled]="isOptionDisabled(option.value, 0)">
      <span>{{ option.viewValue }}</span>
      <mat-icon (click)="clearSelection(0)">clear</mat-icon>
    </mat-option>
  </mat-autocomplete>
</mat-form-field>

<mat-form-field>
  <input matInput [matAutocomplete]="auto2" placeholder="Sort 2" [(ngModel)]="sortOptions[1]">
  <mat-autocomplete #auto2="matAutocomplete">
    <mat-option *ngFor="let option of sortOptionsList" [value]="option.value" [disabled]="isOptionDisabled(option.value, 1)">
      <span>{{ option.viewValue }}</span>
      <mat-icon (click)="clearSelection(1)">clear</mat-icon>
    </mat-option>
  </mat-autocomplete>
</mat-form-field>

<mat-form-field>
  <input matInput [matAutocomplete]="auto3" placeholder="Sort 3" [(ngModel)]="sortOptions[2]">
  <mat-autocomplete #auto3="matAutocomplete">
    <mat-option *ngFor="let option of sortOptionsList" [value]="option.value" [disabled]="isOptionDisabled(option.value, 2)">
      <span>{{ option.viewValue }}</span>
      <mat-icon (click)="clearSelection(2)">clear</mat-icon>
    </mat-option>
  </mat-autocomplete>
</mat-form-field>


>>>>>>>>>>>>>>>>>>>>>>>>>>>>>.

  sortOptionsList = [
    { value: 'nameAsc', viewValue: 'Name (Ascending)', disabled: false },
    { value: 'nameDesc', viewValue: 'Name (Descending)', disabled: false },
    { value: 'empIdAsc', viewValue: 'EmployeeID (Ascending)', disabled: false },
    { value: 'empIdDesc', viewValue: 'EmployeeID (Descending)', disabled: false },
    { value: 'companyIdAsc', viewValue: 'CompanyID (Ascending)', disabled: false },
    { value: 'companyIdDesc', viewValue: 'CompanyID (Descending)', disabled: false }
  ];

  sortOptions: string[] = ['', '', '']; // Array to hold selected options

  ngOnInit() {
    // Set initial selections
    this.sortOptions[0] = 'nameAsc';
    this.sortOptions[1] = 'empIdAsc';
    this.sortOptions[2] = 'companyIdAsc';
  }

  isOptionDisabled(optionValue: string, index: number): boolean {
    // Check if the option is already selected in other selects or within the same group
    const selectedOptions = this.sortOptions.filter((value, i) => i !== index);
    const optionGroup = this.getOptionGroup(optionValue);
    const isOptionInGroup = selectedOptions.some(option => this.getOptionGroup(option) === optionGroup);
    return isOptionInGroup;
  }

  updateOptions(index: number) {
    // Update the selected options to prevent duplicates
    const selectedOption = this.sortOptions[index];
    this.sortOptions.forEach((option, i) => {
      if (i !== index && option === selectedOption) {
        this.sortOptions[i] = ''; // Reset other selects if they have the same selection
      }
    });
  }

  clearSelection(index: number) {
    // Clear the selected option
    this.sortOptions[index] = '';

    // Enable previously disabled options
    this.enableAllOptions();
  }

  enableAllOptions() {
    // Enable all options
    this.sortOptionsList.forEach(option => option.disabled = false);
  }

  getOptionGroup(optionValue: string): string {
    // Helper function to determine the group of the given option
    switch (optionValue) {
      case 'nameAsc':
      case 'nameDesc':
        return 'name';
      case 'empIdAsc':
      case 'empIdDesc':
        return 'empId';
      case 'companyIdAsc':
      case 'companyIdDesc':
        return 'companyId';
      default:
        return '';
    }
  }
}
