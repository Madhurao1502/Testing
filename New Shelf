
onCategoryGridChange(event: { category: ReviewCategory, field: string, value: any }) {
  const { category, field, value } = event;
  const isKeycat = category.KeycatNumber > 0;
  const idx = this.selectedCategories.findIndex(s =>
    s.ReviewCategoryNumber === category.ReviewCategoryNumber &&
    s.KeycatNumber        === category.KeycatNumber
  );

  // 1. Remove on uncheck (Selected â†’ null)
  if (field === 'Selected' && value == null) {
    // Filter out this category or keycat
    this.selectedCategories = this.selectedCategories.filter(s =>
      !(
        s.ReviewCategoryNumber === category.ReviewCategoryNumber &&
        s.KeycatNumber        === category.KeycatNumber
      )
    );
    return;
  }

  // 2. Add on check
  if (field === 'Selected' && value === 1 && idx < 0) {
    this.selectedCategories = [
      ...this.selectedCategories,
      { ...category, Selected: 1 }
    ];
    return;
  }

  // 3. Update other fields (QCUnderReq, QCUnderPercent, NumberOfWeeks)
  if (idx >= 0 && field !== 'Selected') {
    const updated = { ...this.selectedCategories[idx], [field]: value };
    // If QCUnderReq toggled off, also clear percent & weeks
    if (field === 'QCUnderReq' && value == null) {
      updated.QCUnderPercent = null;
      updated.NumberOfWeeks  = null;
    }
    // If QCUnderReq toggled on, default weeks = 5
    if (field === 'QCUnderReq' && value === 1) {
      updated.NumberOfWeeks = 5;
    }
    this.selectedCategories = [
      ...this.selectedCategories.slice(0, idx),
      updated,
      ...this.selectedCategories.slice(idx + 1),
    ];
    return;
  }
}


onCategoryGridChange(event: { category: ReviewCategory, field: string, value: any }) {
  const { category, field, value } = event;
  const idx = this.selectedCategories.findIndex(s =>
    s.ReviewCategoryNumber === category.ReviewCategoryNumber &&
    s.KeycatNumber        === category.KeycatNumber
  );

  if (field === 'Selected' && category.KeycatNumber > 0 && value == null && idx >= 0) {
    this.selectedCategories = this.selectedCategories.filter(s =>
      !(
        s.ReviewCategoryNumber === category.ReviewCategoryNumber &&
        s.KeycatNumber        === category.KeycatNumber
      )
    );
    return;
  }

if (field === 'Selected' && category.KeycatNumber === 0 && value == null) {
    this.selectedCategories = this.selectedCategories.filter(s =>
      s.ReviewCategoryNumber !== category.ReviewCategoryNumber
    );
    return;
  }
  if (field === 'Selected') {
    if (value === 1 && idx < 0) {
      this.selectedCategories.push({ ...category, Selected: 1 });
    } else if (!value && idx >= 0) {
      this.selectedCategories.splice(idx, 1);
    }
  } else if (idx >= 0) {
    (this.selectedCategories[idx] as any)[field] = value;
  }

this.selectedCategories = [...this.selectedCategories]
}


  <div *ngIf="reviewCategories.length>0">
      <app-category-grid
      [categories]="reviewCategories"
      [selectedCategories]="selectedCategories"
      [disabled]="isLocked"
      (categoryChange)="onCategoryGridChange($event)"
      ></app-category-grid>
  </div>


<div class="category-grid-container">
  <mat-card>
    <mat-card-title>Categories</mat-card-title>
    <table mat-table
           [dataSource]="dataSource"
           multiTemplateDataRows
           class="mat-elevation-z8">

      <!-- Category Name Column -->
      <ng-container matColumnDef="ReviewCategoryName">
        <th mat-header-cell *matHeaderCellDef>Category</th>
        <td mat-cell *matCellDef="let row"><strong>{{ row.ReviewCategoryName }}</strong></td>
      </ng-container>

      <!-- Key Cat Number Column -->
      <ng-container matColumnDef="Keycat">
        <th mat-header-cell *matHeaderCellDef>Key Cat</th>
        <td mat-cell *matCellDef="let row">{{ row.KeycatNumber || '' }}</td>
      </ng-container>

      <!-- Key Cat Name Column -->
      <ng-container matColumnDef="KeycatName">
        <th mat-header-cell *matHeaderCellDef>Key Cat Name</th>
        <td mat-cell *matCellDef="let row">{{ row.KeycatName }}</td>
      </ng-container>

      <!-- Selected Checkbox -->
      <ng-container matColumnDef="Selected">
        <th mat-header-cell *matHeaderCellDef>Select</th>
        <td mat-cell *matCellDef="let row">
          <mat-checkbox
            [checked]="isSelected(row)"
            [disabled]="(row.KeycatNumber && isParentSelected(row)) || disabled"
            (change)="onCategorySelected(row, $event)">
          </mat-checkbox>
        </td>
      </ng-container>

      <!-- QC Under Checkbox -->
      <ng-container matColumnDef="QCUnderReq">
        <th mat-header-cell *matHeaderCellDef>QC Under</th>
        <td mat-cell *matCellDef="let row">
          <mat-checkbox
            [checked]="isQCUnder(row)"
            [disabled]="(row.KeycatNumber && isParentSelected(row)) || disabled"
            (change)="onQCUnderChanged(row, $event.checked)">
          </mat-checkbox>
        </td>
      </ng-container>

      <!-- Pass/Fail % Input -->
      <ng-container matColumnDef="QCUnderPercent">
        <th mat-header-cell *matHeaderCellDef>Pass/Fail %</th>
        <td mat-cell *matCellDef="let row">
          <input matInput
                 type="number"
                 maxlength="2"
                 [value]="getQCPercent(row)"
                 [disabled]="!isQCUnder(row) || disabled"
                 (change)="onPercentChanged(row, $event)"
                 (keypress)="onNumberOnlyInput($event)" />
        </td>
      </ng-container>

      <!-- Weeks Input -->
      <ng-container matColumnDef="NumberOfWeeks">
        <th mat-header-cell *matHeaderCellDef>Weeks</th>
        <td mat-cell *matCellDef="let row">
          <input matInput
                 type="number"
                 maxlength="2"
                 [value]="getWeeks(row)"
                 [disabled]="!isQCUnder(row) || disabled"
                 (change)="onWeeksChanged(row, $event)"
                 (keypress)="onNumberOnlyInput($event)" />
        </td>
      </ng-container>

      <!-- Expand Toggle -->
      <ng-container matColumnDef="expand">
        <th mat-header-cell *matHeaderCellDef></th>
        <td mat-cell *matCellDef="let row">
          <button mat-icon-button
                  *ngIf="hasKeycats(row)"
                  (click)="onToggleExpand(row)">
            <mat-icon>
              {{ expandedCategory === row ? 'expand_less' : 'expand_more' }}
            </mat-icon>
          </button>
        </td>
      </ng-container>

      <!-- Expanded Detail Column -->
      <ng-container matColumnDef="expandedDetail">
        <td mat-cell *matCellDef="let row" [attr.colspan]="displayedColumns.length">
          <ng-container *ngIf="expandedCategory === row">
            <table mat-table
                   [dataSource]="keycatsMap[row.ReviewCategoryNumber]"
                   class="sub-table">

              <ng-container matColumnDef="KeycatName">
                <th mat-header-cell *matHeaderCellDef>Keycat</th>
                <td mat-cell *matCellDef="let k">{{ k.KeycatName }}</td>
              </ng-container>

              <ng-container matColumnDef="Selected">
                <th mat-header-cell *matHeaderCellDef>Select</th>
                <td mat-cell *matCellDef="let k">
                  <mat-checkbox
                    [checked]="isSelected(k)"
                    [disabled]="isParentSelected(row) || disabled"
                    (change)="onKeycatSelected(k, $event)">
                  </mat-checkbox>
                </td>
              </ng-container>

              <ng-container matColumnDef="QCUnderReq">
                <th mat-header-cell *matHeaderCellDef>QC Under</th>
                <td mat-cell *matCellDef="let k">
                  <mat-checkbox
                    [checked]="isQCUnder(k)"
                    [disabled]="isParentSelected(row) || disabled"
                    (change)="onKeycatQCUnderChanged(k, $event)">
                  </mat-checkbox>
                </td>
              </ng-container>

              <ng-container matColumnDef="QCUnderPercent">
                <th mat-header-cell *matHeaderCellDef>Pass/Fail %</th>
                <td mat-cell *matCellDef="let k">
                  <input matInput
                         type="number"
                         maxlength="2"
                         [value]="getQCPercent(k)"
                         [disabled]="!isQCUnder(k) || disabled"
                         (change)="onPercentChanged(k, $event)"
                         (keypress)="onNumberOnlyInput($event)" />
                </td>
              </ng-container>

              <ng-container matColumnDef="NumberOfWeeks">
                <th mat-header-cell *matHeaderCellDef>Weeks</th>
                <td mat-cell *matCellDef="let k">
                  <input matInput
                         type="number"
                         maxlength="2"
                         [value]="getWeeks(k)"
                         [disabled]="!isQCUnder(k) || disabled"
                         (change)="onWeeksChanged(k, $event)"
                         (keypress)="onNumberOnlyInput($event)" />
                </td>
              </ng-container>

              <tr mat-header-row *matHeaderRowDef="['KeycatName','Selected','QCUnderReq','QCUnderPercent','NumberOfWeeks']"></tr>
              <tr mat-row *matRowDef="let row; columns: ['KeycatName','Selected','QCUnderReq','QCUnderPercent','NumberOfWeeks']"></tr>
            </table>
          </ng-container>
        </td>
      </ng-container>

      <!-- Header & Row Definitions -->
      <tr mat-header-row *matHeaderRowDef="displayedColumns"></tr>
      <tr mat-row *matRowDef="let row; columns: displayedColumns;" class="main-row"></tr>
      <tr mat-row *matRowDef="let row; columns: ['expandedDetail']" class="detail-row"></tr>
    </table>
  </mat-card>

  <mat-card *ngIf="selectedCategories.length > 0" class="selected-categories">
    <mat-card-title>Selected Categories</mat-card-title>
    <table mat-table [dataSource]="selectedDataSource">

      <ng-container matColumnDef="CategoryName">
        <th mat-header-cell *matHeaderCellDef>Category</th>
        <td mat-cell *matCellDef="let cat">{{ cat.CategoryName || cat.KeycatName }}</td>
      </ng-container>

      <ng-container matColumnDef="CatgDetail">
        <th mat-header-cell *matHeaderCellDef>Type</th>
        <td mat-cell *matCellDef="let cat">
          {{ cat.KeycatNumber && cat.KeycatNumber > 0 ? 'Keycat' : 'Category' }}
        </td>
      </ng-container>

      <ng-container matColumnDef="CategoryID">
        <th mat-header-cell *matHeaderCellDef>ID</th>
        <td mat-cell *matCellDef="let cat">
          {{ cat.KeycatNumber ? cat.KeycatNumber : cat.ReviewCategoryNumber }}
        </td>
      </ng-container>

      <ng-container matColumnDef="QCUnderReq">
        <th mat-header-cell *matHeaderCellDef>QC Under</th>
        <td mat-cell *matCellDef="let cat">
          <mat-icon *ngIf="cat.QCUnderReq === 1">check</mat-icon>
        </td>
      </ng-container>

      <ng-container matColumnDef="QCUnderPercent">
        <th mat-header-cell *matHeaderCellDef>Pass/Fail %</th>
        <td mat-cell *matCellDef="let cat">{{ cat.QCUnderPercent }}</td>
      </ng-container>

      <ng-container matColumnDef="NumberOfWeeks">
        <th mat-header-cell *matHeaderCellDef>Weeks</th>
        <td mat-cell *matCellDef="let cat">{{ cat.NumberOfWeeks }}</td>
      </ng-container>

      <tr mat-header-row *matHeaderRowDef="selectedDisplayedColumns"></tr>
      <tr mat-row *matRowDef="let row; columns: selectedDisplayedColumns"></tr>
    </table>
  </mat-card>
</div>

import { Component, EventEmitter, Input, OnChanges, OnInit, Output } from '@angular/core';
import { ReviewCategory } from '../shared/common.model';
import { MatTableDataSource } from '@angular/material/table';
import { MatCheckboxChange } from '@angular/material/checkbox';
interface CategoryRow {
  ReviewCategoryNumber: number;
  ReviewCategoryName: string;
  Selected: boolean;
  QCUnderReq: boolean;
  QCUnderPercent: number | null;
  NumberOfWeeks: number | null;
}

@Component({
  selector: 'app-category-grid',
  templateUrl: './category-grid.component.html',
  styleUrls: ['./category-grid.component.css']
})

export class CategoryGridComponent implements OnInit, OnChanges {
 @Input() categories: any[] = [];
  @Input() selectedCategories: any[] = [];
  @Input() disabled = false;
  @Output() categoryChange = new EventEmitter<{ category: any, field: string, value: any }>();

  // displayedColumns: string[] = [
  //   'expand',
  //   'ReviewCategoryName',
  //   'Keycat',
  //   'KeycatName',
  //   'Selected',
  //   'QCUnderReq',
  //   'QCUnderPercent',
  //   'NumberOfWeeks'
  // ];
  // selectedDisplayedColumns: string[] = [
  //   'CategoryName',
  //   'CatgDetail',
  //   'CategoryID',
  //   'QCUnderReq',
  //   'QCUnderPercent',
  //   'NumberOfWeeks'
  // ];

  displayedColumns = ['ReviewCategoryName', 'Keycat', 'KeycatName', 'Selected', 'QCUnderReq', 'QCUnderPercent', 'NumberOfWeeks', 'expand'];
selectedDisplayedColumns = ['CategoryName','CatgDetail','CategoryID','QCUnderReq','QCUnderPercent','NumberOfWeeks'];
multiTemplateDataRows = true;

  reviewCategories: any[] = [];
  keycatsMap: { [catId: number]: any[] } = {};
  dataSource = new MatTableDataSource<any>();
  selectedDataSource = new MatTableDataSource<any>();
  expandedCategory: any | null = null;

  ngOnInit() { this.refreshData(); }
  ngOnChanges() { this.refreshData(); }

  private refreshData() {
    this.reviewCategories = this.categories.filter(c => !c.KeycatNumber || c.KeycatNumber === 0);
    this.keycatsMap = {};
    for (const cat of this.categories) {
      if (cat.KeycatNumber && cat.KeycatNumber > 0) {
        this.keycatsMap[cat.ReviewCategoryNumber] = this.keycatsMap[cat.ReviewCategoryNumber] || [];
        this.keycatsMap[cat.ReviewCategoryNumber].push(cat);
      }
    }
    this.dataSource.data = this.reviewCategories;
    this.selectedDataSource.data = this.selectedCategories;
  }

  // --- Functionality Replication ---

  isSelected(cat: any): boolean {
    return this.selectedCategories.some(s =>
      s.ReviewCategoryNumber === cat.ReviewCategoryNumber &&
      s.KeycatNumber === cat.KeycatNumber &&
      s.Selected === 1
    );
  }
  isQCUnder(cat: any): boolean {
    return this.selectedCategories.some(s =>
      s.ReviewCategoryNumber === cat.ReviewCategoryNumber &&
      s.KeycatNumber === cat.KeycatNumber &&
      s.QCUnderReq === 1
    );
  }
  getQCPercent(cat: any): number | null {
    const found = this.selectedCategories.find(s =>
      s.ReviewCategoryNumber === cat.ReviewCategoryNumber &&
      s.KeycatNumber === cat.KeycatNumber
    );
    return found ? found.QCUnderPercent : null;
  }
  getWeeks(cat: any): number | null {
    const found = this.selectedCategories.find(s =>
      s.ReviewCategoryNumber === cat.ReviewCategoryNumber &&
      s.KeycatNumber === cat.KeycatNumber
    );
    return found ? found.NumberOfWeeks : null;
  }

  // Expand/collapse keycat rows
  onToggleExpand(cat: any) {
    this.expandedCategory = this.expandedCategory?.ReviewCategoryNumber === cat.ReviewCategoryNumber ? null : cat;
  }
  hasKeycats(category: any): boolean {
    return !!this.keycatsMap[category.ReviewCategoryNumber]?.length;
  }

  // Validation: only allow selecting parent or children, not both
  hasSelectedKeycats(catNumber: number): boolean {
    return this.selectedCategories.some(s =>
      s.ReviewCategoryNumber === catNumber && s.KeycatNumber && s.Selected === 1
    );
  }
  hasSelectedParentCategory(catNumber: number): boolean {
    return this.selectedCategories.some(s =>
      s.ReviewCategoryNumber === catNumber && (!s.KeycatNumber || s.KeycatNumber >0) && s.Selected === 1
    );
  }
  isParentCheckDisabled(cat: any): boolean {
    return this.hasSelectedKeycats(cat.ReviewCategoryNumber);
  }
  isChildCheckDisabled(child: any): boolean {
    return this.hasSelectedParentCategory(child.ReviewCategoryNumber);
  }

  // Editable fields enablement
  isPercentDisabled(cat: any): boolean {
    return this.disabled || !this.isQCUnder(cat);
  }
  isWeeksDisabled(cat: any): boolean {
    return this.disabled || !this.isQCUnder(cat);
  }

  // --- Event Handlers ---

  onCategorySelected(cat: any, checked: MatCheckboxChange) {
    if (this.disabled) return;
    
    if (checked.checked && this.hasSelectedKeycats(cat.ReviewCategoryNumber)) {
      alert("Can't select a Category when Keycats under it are selected");
      checked.source.checked=false;
      return;
    }
    this.categoryChange.emit({ category: cat, field: 'Selected', value: checked ? 1 : null });
  }

  onQCUnderChanged(cat: any, checked: boolean) {
    if (this.disabled) return;
    if (checked && this.hasSelectedKeycats(cat.ReviewCategoryNumber)) {
      alert("Can't select a Category when Keycats under it are selected");
      return;
    }
    if (checked) {
      this.categoryChange.emit({ category: cat, field: 'Selected', value: 1 });
      this.categoryChange.emit({ category: cat, field: 'NumberOfWeeks', value: 5 });
    } else {
      this.categoryChange.emit({ category: cat, field: 'NumberOfWeeks', value: null });
      this.categoryChange.emit({ category: cat, field: 'QCUnderPercent', value: null });
    }
    this.categoryChange.emit({ category: cat, field: 'QCUnderReq', value: checked ? 1 : null });
  }

  onPercentChanged(cat: any, e: Event) {
    if (this.disabled) return;
    const val = (e.target as HTMLInputElement).value;
    this.categoryChange.emit({ category: cat, field: 'QCUnderPercent', value: val ? Number(val) : null });
  }

  onWeeksChanged(cat: any, e: Event) {
    if (this.disabled) return;
    const val = (e.target as HTMLInputElement).value;
    this.categoryChange.emit({ category: cat, field: 'NumberOfWeeks', value: val ? Number(val) : null });
  }

  onKeycatSelected(cat: any, checked: MatCheckboxChange) {
    if (this.disabled) return;
    if (checked.checked && this.hasSelectedParentCategory(cat.ReviewCategoryNumber)) {
      alert("Can't select Keycat when its Category is selected");
      checked.source.checked=false;
      return;
    }
    this.categoryChange.emit({ category: cat, field: 'Selected', value: checked ? 1 : null });
  }

  onKeycatQCUnderChanged(cat: any, checked: MatCheckboxChange) {
    if (this.disabled) return;
    if (checked.checked && this.hasSelectedParentCategory(cat.ReviewCategoryNumber)) {
      alert("Can't select Keycat when Category is selected");
      checked.source.checked=false;
      return;
    }
    if (checked.checked) {
      this.categoryChange.emit({ category: cat, field: 'Selected', value: 1 });
      this.categoryChange.emit({ category: cat, field: 'NumberOfWeeks', value: 5 });
    } else {
      this.categoryChange.emit({ category: cat, field: 'NumberOfWeeks', value: null });
      this.categoryChange.emit({ category: cat, field: 'QCUnderPercent', value: null });
    }
    this.categoryChange.emit({ category: cat, field: 'QCUnderReq', value: checked ? 1 : null });
  }

  onNumberOnlyInput(e: KeyboardEvent): boolean {
    const charCode = e.which || e.keyCode;
    if (charCode < 32) { return true; }
    if (charCode >= 48 && charCode <= 57) { return true; }
    e.preventDefault();
    return false;
  }

   isParentSelected(cat: ReviewCategory): boolean {
  if (!cat.KeycatNumber || cat.KeycatNumber === 0) {
    return false;
  }

  return this.selectedCategories.some(selected =>
    selected.ReviewCategoryNumber === cat.ReviewCategoryNumber &&
    (!selected.KeycatNumber || selected.KeycatNumber === 0) &&
    selected.Selected === 1
  );
}
}
