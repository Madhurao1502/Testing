public string GetcurrentweekGridData(GetGridDataFilter filter)
{
    string rst = "";
    DataTable dt = new DataTable();
    List<CurrentWeekDataModel> _gdmGrid = new List<CurrentWeekDataModel>();
    try
    {


        using SqlConnection conn = new();
        conn.ConnectionString = _sqlConnString;
        conn.Open();
        SqlCommand cmd = new("USP_get_assignments_current_week", conn) { CommandType = CommandType.StoredProcedure };
        cmd.CommandTimeout = 180;
        cmd.Parameters.Add(new SqlParameter("@iri_week", filter.IriWeek));
        //cmd.Parameters.Add(new SqlParameter("@area_nbr", filter.Area));
        cmd.Parameters.Add(new SqlParameter("@territory", filter.TerritoryId));
        //cmd.Parameters.Add(new SqlParameter("@store_number", string.IsNullOrEmpty(filter.StoreNumber) ? DBNull.Value : filter.StoreNumber));
        //cmd.Parameters.Add(new SqlParameter("@fsr_id", string.IsNullOrEmpty(filter.EmpId) ? DBNull.Value : filter.EmpId));
        //cmd.Parameters.Add(new SqlParameter("@task_number", string.IsNullOrEmpty(filter.TaskNumber) ? DBNull.Value : filter.TaskNumber));
        //cmd.Parameters.Add(new SqlParameter("@store_state", string.IsNullOrEmpty(filter.State) ? DBNull.Value : filter.State));
        //cmd.Parameters.Add(new SqlParameter("@store_city", string.IsNullOrEmpty(filter.City) ? DBNull.Value : filter.City));
        //cmd.Parameters.Add(new SqlParameter("@position_number", string.IsNullOrEmpty(filter.PositionNumber) ? DBNull.Value : filter.PositionNumber));
        //cmd.Parameters.Add(new SqlParameter("@fsr_hour_operator", filter.FsrHourOperator));
        //cmd.Parameters.Add(new SqlParameter("@fsr_hour", filter.FsrHour));
        //cmd.Parameters.Add(new SqlParameter("@assigned_stores", filter.AssignedStores == "false" ? false : true));
        //cmd.Parameters.Add(new SqlParameter("@unassigned_stores", filter.UnassignedStores == "false" ? false : true));
        //cmd.Parameters.Add(new SqlParameter("@sample_stores", filter.Sample == "false" ? false : true));
        //cmd.Parameters.Add(new SqlParameter("@non_sample_stores", filter.NonSample == "false" ? false : true));
        //cmd.Parameters.Add(new SqlParameter("@multi_fsr_stores", filter.MultiFsrStore == "false" ? false : true));
        //cmd.Parameters.Add(new SqlParameter("@vacation", filter.Vacation == "false" ? false : true));
        cmd.Parameters.Add(new SqlParameter("@country_id", filter.CountryId));
        // cmd.Parameters.Add(new SqlParameter("@temporary", filter.Temporary == "false" ? false : true));


        using (SqlDataAdapter sda = new(cmd))
        {
            sda.Fill(dt);
        }
        conn.Close();


        if (dt != null && dt.Rows.Count > 0)
        {
            foreach (DataRow dr in dt.Rows)
            {
                CurrentWeekDataModel _gdm = new CurrentWeekDataModel();


                _gdm.IriWeek = dr["iri_week"].ToString();
                _gdm.PositionName = dr["position_name"].ToString();
                _gdm.Bfd = dr["bfd"].ToString();
                _gdm.OutletType = dr["outlet_type"].ToString();
                _gdm.StoreNumber = dr["store_number"].ToString();
                _gdm.StoreName = dr["store_name"].ToString();
                _gdm.AddrLine1 = dr["addr_line1"].ToString();
                _gdm.CityName = dr["city_name"].ToString();
                _gdm.StateCd = dr["state_cd"].ToString();
                _gdm.ZipCd = dr["zip_cd"].ToString();
                _gdm.EmpId = dr["emp_id"].ToString();
                _gdm.FirstName = dr["first_name"].ToString();
                _gdm.LastName = dr["last_name"].ToString();
                _gdm.TaskNumber = dr["task_number"].ToString();
                _gdm.TaskCompleted = dr["task_completed"].ToString();
                _gdm.Quality = dr["quality"].ToString();
                _gdm.CostOver = dr["cost_over"].ToString();
                _gdm.GuaranteedMiles = dr["guaranteed_miles"].ToString();

                _gdmGrid.Add(_gdm);
            }
        }
    }
    catch (Exception ex)
    {
        throw ex;
    }

    var gridList = _gdmGrid.ToList();
    rst = JsonConvert.SerializeObject(gridList);
    return rst;
}


public string GetfutureweekGridData(GetGridDataFilter filter)
{
    string rst = "";
    DataTable dt = new DataTable();
    List<FutureWeekDataModel> _gdmGrid = new List<FutureWeekDataModel>();
    try
    {


        using SqlConnection conn = new();
        conn.ConnectionString = _sqlConnString;
        conn.Open();
        SqlCommand cmd = new("USP_get_assignments", conn) { CommandType = CommandType.StoredProcedure };
        cmd.CommandTimeout = 180;
        cmd.Parameters.Add(new SqlParameter("@iri_week", filter.IriWeek));
        //cmd.Parameters.Add(new SqlParameter("@area_nbr", filter.Area));
        cmd.Parameters.Add(new SqlParameter("@territory", filter.TerritoryId));
        //cmd.Parameters.Add(new SqlParameter("@store_number", string.IsNullOrEmpty(filter.StoreNumber) ? DBNull.Value : filter.StoreNumber));
        //cmd.Parameters.Add(new SqlParameter("@fsr_id", string.IsNullOrEmpty(filter.EmpId) ? DBNull.Value : filter.EmpId));
        //cmd.Parameters.Add(new SqlParameter("@task_number", string.IsNullOrEmpty(filter.TaskNumber) ? DBNull.Value : filter.TaskNumber));
        //cmd.Parameters.Add(new SqlParameter("@store_state", string.IsNullOrEmpty(filter.State) ? DBNull.Value : filter.State));
        //cmd.Parameters.Add(new SqlParameter("@store_city", string.IsNullOrEmpty(filter.City) ? DBNull.Value : filter.City));
        //cmd.Parameters.Add(new SqlParameter("@position_number", string.IsNullOrEmpty(filter.PositionNumber) ? DBNull.Value : filter.PositionNumber));
        //cmd.Parameters.Add(new SqlParameter("@fsr_hour_operator", filter.FsrHourOperator));
        //cmd.Parameters.Add(new SqlParameter("@fsr_hour", filter.FsrHour));
        //cmd.Parameters.Add(new SqlParameter("@assigned_stores", filter.AssignedStores == "false" ? false : true));
        //cmd.Parameters.Add(new SqlParameter("@unassigned_stores", filter.UnassignedStores == "false" ? false : true));
        //cmd.Parameters.Add(new SqlParameter("@sample_stores", filter.Sample == "false" ? false : true));
        //cmd.Parameters.Add(new SqlParameter("@non_sample_stores", filter.NonSample == "false" ? false : true));
        //cmd.Parameters.Add(new SqlParameter("@multi_fsr_stores", filter.MultiFsrStore == "false" ? false : true));
        //cmd.Parameters.Add(new SqlParameter("@vacation", filter.Vacation == "false" ? false : true));
        cmd.Parameters.Add(new SqlParameter("@country_id", filter.CountryId));
        // cmd.Parameters.Add(new SqlParameter("@temporary", filter.Temporary == "false" ? false : true));


        using (SqlDataAdapter sda = new(cmd))
        {
            sda.Fill(dt);
        }
        conn.Close();


        if (dt != null && dt.Rows.Count > 0)
        {
            foreach (DataRow dr in dt.Rows)
            {
                FutureWeekDataModel _gdm = new FutureWeekDataModel();



                _gdm.IriWeek = dr["iri_week"].ToString();
                _gdm.FldTerrtyNbr = dr["fld_terrty_nbr"].ToString();
                _gdm.PositionName = dr["position_name"].ToString();
                _gdm.Bfd = dr["bfd"].ToString();
                _gdm.OutletType = dr["outlet_type"].ToString();
                _gdm.StoreNumber = dr["store_number"].ToString();
                _gdm.StoreName = dr["store_name"].ToString();
                _gdm.AddrLine1 = dr["addr_line1"].ToString();
                _gdm.CityName = dr["city_name"].ToString();
                _gdm.StateCd = dr["state_cd"].ToString();
                _gdm.ZipCd = dr["zip_cd"].ToString();
                _gdm.EmpId = dr["emp_id"].ToString();
                _gdm.FirstName = dr["first_name"].ToString();
                _gdm.LastName = dr["last_name"].ToString();
                _gdm.TaskNumber = dr["task_number"].ToString();
                _gdm.AvgCost = dr["avg_cost"].ToString();
                _gdm.GuaranteedMiles = dr["guaranteed_miles"].ToString();


                _gdmGrid.Add(_gdm);
            }
        }
    }
    catch (Exception ex)
    {
        throw ex;
    }

    var gridList = _gdmGrid.ToList();
    rst = JsonConvert.SerializeObject(gridList);
    return rst;
}


public string GetpreviousweekGridData(GetGridDataFilter filter)
{
    string rst = "";
    DataTable dt = new DataTable();
    List<PreviousWeekDataModel> _gdmGrid = new List<PreviousWeekDataModel>();
    try
    {


        using SqlConnection conn = new();
        conn.ConnectionString = _sqlConnString;
        conn.Open();
        SqlCommand cmd = new("USP_get_assignments_previous_weeks", conn) { CommandType = CommandType.StoredProcedure };
        cmd.CommandTimeout = 180;
        cmd.Parameters.Add(new SqlParameter("@iri_week", filter.IriWeek));
        //cmd.Parameters.Add(new SqlParameter("@area_nbr", filter.Area));
        cmd.Parameters.Add(new SqlParameter("@territory", filter.TerritoryId));
        //cmd.Parameters.Add(new SqlParameter("@store_number", string.IsNullOrEmpty(filter.StoreNumber) ? DBNull.Value : filter.StoreNumber));
        //cmd.Parameters.Add(new SqlParameter("@fsr_id", string.IsNullOrEmpty(filter.EmpId) ? DBNull.Value : filter.EmpId));
        //cmd.Parameters.Add(new SqlParameter("@task_number", string.IsNullOrEmpty(filter.TaskNumber) ? DBNull.Value : filter.TaskNumber));
        //cmd.Parameters.Add(new SqlParameter("@store_state", string.IsNullOrEmpty(filter.State) ? DBNull.Value : filter.State));
        //cmd.Parameters.Add(new SqlParameter("@store_city", string.IsNullOrEmpty(filter.City) ? DBNull.Value : filter.City));
        //cmd.Parameters.Add(new SqlParameter("@position_number", string.IsNullOrEmpty(filter.PositionNumber) ? DBNull.Value : filter.PositionNumber));
        //cmd.Parameters.Add(new SqlParameter("@fsr_hour_operator", filter.FsrHourOperator));
        //cmd.Parameters.Add(new SqlParameter("@fsr_hour", filter.FsrHour));
        //cmd.Parameters.Add(new SqlParameter("@assigned_stores", filter.AssignedStores == "false" ? false : true));
        //cmd.Parameters.Add(new SqlParameter("@unassigned_stores", filter.UnassignedStores == "false" ? false : true));
        //cmd.Parameters.Add(new SqlParameter("@sample_stores", filter.Sample == "false" ? false : true));
        //cmd.Parameters.Add(new SqlParameter("@non_sample_stores", filter.NonSample == "false" ? false : true));
        //cmd.Parameters.Add(new SqlParameter("@multi_fsr_stores", filter.MultiFsrStore == "false" ? false : true));
        //cmd.Parameters.Add(new SqlParameter("@vacation", filter.Vacation == "false" ? false : true));
        cmd.Parameters.Add(new SqlParameter("@country_id", filter.CountryId));
        // cmd.Parameters.Add(new SqlParameter("@temporary", filter.Temporary == "false" ? false : true));


        using (SqlDataAdapter sda = new(cmd))
        {
            sda.Fill(dt);
        }
        conn.Close();


        if (dt != null && dt.Rows.Count > 0)
        {
            foreach (DataRow dr in dt.Rows)
            {
                PreviousWeekDataModel _gdm = new PreviousWeekDataModel();




                _gdm.IriWeek = dr["iri_week"].ToString();
                _gdm.FldTerrtyNbr = dr["fld_terrty_nbr"].ToString();
                _gdm.PositionName = dr["position_name"].ToString();
                _gdm.Bfd = dr["bfd"].ToString();
                _gdm.OutletType = dr["outlet_type"].ToString();
                _gdm.StoreNumber = dr["store_number"].ToString();
                _gdm.StoreName = dr["store_name"].ToString();
                _gdm.AddrLine1 = dr["addr_line1"].ToString();
                _gdm.CityName = dr["city_name"].ToString();
                _gdm.StateCd = dr["state_cd"].ToString();
                _gdm.ZipCd = dr["zip_cd"].ToString();
                _gdm.EmpId = dr["emp_id"].ToString();
                _gdm.FirstName = dr["first_name"].ToString();
                _gdm.LastName = dr["last_name"].ToString();
                _gdm.TaskNumber = dr["task_number"].ToString();
                _gdm.TaskCompleted = dr["task_completed"].ToString();
                _gdm.Quality = dr["quality"].ToString();
                _gdm.CostOver = dr["cost_over"].ToString();
                _gdm.WK1FSRProdCost = dr["WK1FSRProdCost"].ToString();
                _gdm.WK1FSRProdCost = dr["WK1FSRProdCost"].ToString();
                _gdm.WK1FSRProdCost = dr["WK1FSRProdCost"].ToString();
                _gdm.WK1StoreTravelCost = dr["WK1StoreTravelCost"].ToString();
                _gdm.WK1StoreTravelOvgCost = dr["WK1StoreTravelOvgCost"].ToString();
                _gdm.WK2FSRProdCost = dr["WK2FSRProdCost"].ToString();
                _gdm.WK2StoreTravelCost = dr["WK2StoreTravelCost"].ToString();
                _gdm.WK2StoreTravelOvgCost = dr["WK2StoreTravelOvgCost"].ToString();



                _gdmGrid.Add(_gdm);
            }
        }
    }
    catch (Exception ex)
    {
        throw ex;
    }

    var gridList = _gdmGrid.ToList();
    rst = JsonConvert.SerializeObject(gridList);
    return rst;
}

store-table.component.html

<div class="table-container">
  <mat-card class="table-card">
    <!-- <mat-card-header>
      <mat-card-title>Store Assignment Data</mat-card-title>
      <mat-card-subtitle>{{dataSource.data.length}} stores found</mat-card-subtitle>
    </mat-card-header>
     -->
    <mat-card-content>
      <div class="table-wrapper">
        <!-- FIXED: Using your working table structure -->
        <mat-table #table [dataSource]="dataSource" matSort class="store-table mat-elevation-2">


          <!-- Add after position_name column -->
        <ng-container matColumnDef="user_comment">
          <mat-header-cell *matHeaderCellDef class="mat-header-style">Comments</mat-header-cell>
          <mat-cell *matCellDef="let element" class="comment-cell">
            <!-- View mode -->
            <div *ngIf="!element.IsCommentEditing" class="comment-view">
              <span class="comment-text" 
                    [title]="element.UserComment"
                    (click)="startCommentEdit(element); $event.stopPropagation();">
                {{element.UserComment || 'Add comment...'}}
              </span>
              <button mat-icon-button 
                      (click)="startCommentEdit(element); $event.stopPropagation();"
                      class="comment-edit-btn">
                <mat-icon>edit</mat-icon>
              </button>
            </div>
            
            <!-- Edit mode -->
            <div *ngIf="element.IsCommentEditing" class="comment-edit">
              <mat-form-field appearance="outline" class="comment-field">
                <textarea matInput
                          [value]="element.UserComment"
                          placeholder="Enter comment..."
                          (keydown)="onCommentKeydown($event, element)"
                          #commentInput
                          rows="2"
                          maxlength="500">
                </textarea>
              </mat-form-field>
              <div class="comment-actions">
                <button mat-icon-button 
                        color="primary"
                        (click)="saveComment(element, commentInput.value); $event.stopPropagation();">
                  <mat-icon>check</mat-icon>
                </button>
                <button mat-icon-button 
                        (click)="cancelCommentEdit(element); $event.stopPropagation();">
                  <mat-icon>close</mat-icon>
                </button>
              </div>
            </div>
          </mat-cell>
        </ng-container>
          
          <!-- Store Number Column with Expansion -->
          <ng-container matColumnDef="store_number">
            <mat-header-cell *matHeaderCellDef class="mat-header-style">
                <button 
            mat-icon-button 
            [disabled]="isExpandingAll"
            (click)="expandAllRows()" 
            [title]="allExpanded ? 'Collapse All' : 'Expand All'"
            class="expand-all-btn">
            <mat-icon>{{allExpanded ? 'unfold_less' : 'unfold_more'}}</mat-icon>
          </button>
              Store #
            </mat-header-cell>
            <mat-cell *matCellDef="let element" class="store-number-cell">
               <span class="caret" 
                    id="caretIcon" 
                    [class.clicked]="isRowExpanded(element)">▼</span>
              <span class="store-number">{{element.StoreNumber}}</span>
              <span *ngIf="!element.hasDetails">&nbsp;&nbsp;&nbsp;&nbsp;</span>
              <span class="store-number">{{element.StoreNumber}}</span>
            </mat-cell>
          </ng-container>

          <!-- Store Name Column -->
          <ng-container matColumnDef="store_name">
            <mat-header-cell *matHeaderCellDef  class="mat-header-style">Store Name</mat-header-cell>
            <mat-cell *matCellDef="let element" class="store-name-cell">
              <div class="store-info">
                <span class="store-name" (click)="openProximityDataDialog(element);$event.stopPropagation();">{{element.StoreName}}</span>
              </div>
            </mat-cell>
          </ng-container>

          <!-- Store Address Column -->
          <ng-container matColumnDef="addr_line1">
            <mat-header-cell *matHeaderCellDef class="mat-header-style">Store Address</mat-header-cell>
            <mat-cell *matCellDef="let element" class="address-cell">
              {{element.AddrLine1}}
            </mat-cell>
          </ng-container>

          <!-- City Column -->
          <ng-container matColumnDef="city">
            <mat-header-cell *matHeaderCellDef  class="mat-header-style">City</mat-header-cell>
            <mat-cell *matCellDef="let element" class="city-cell">{{element.City}}</mat-cell>
          </ng-container>

          <!-- State Column -->
          <ng-container matColumnDef="state">
            <mat-header-cell *matHeaderCellDef  class="mat-header-style">State</mat-header-cell>
            <mat-cell *matCellDef="let element" class="state-cell">
              <span class="state-badge">{{element.State}}</span>
            </mat-cell>
          </ng-container>

          <!-- Zip Column -->
          <ng-container matColumnDef="zip">
            <mat-header-cell *matHeaderCellDef  class="mat-header-style">Zip</mat-header-cell>
            <mat-cell *matCellDef="let element" class="zip-cell">{{element.Zip}}</mat-cell>
          </ng-container>

          <!-- Assigned To Column -->
          <ng-container matColumnDef="assigned_to">
            <mat-header-cell *matHeaderCellDef  class="mat-header-style">Assigned To</mat-header-cell>
            <mat-cell *matCellDef="let element" class="assigned-cell" (click)=" openAssignmentDialog(element,'StoreLevel');$event.stopPropagation()">
              <span class="assignment-badge" [ngClass]="getAssignmentClass(element.AssignedTo)">
                {{element.AssignedTo}}
              </span>
            </mat-cell>
          </ng-container>

          <!-- Average Collection Time Column -->
          <ng-container matColumnDef="expected_collection_time">
            <mat-header-cell *matHeaderCellDef  class="mat-header-style">Avg Coll Time</mat-header-cell>
            <mat-cell *matCellDef="let element" class="collection-time-cell">
              {{formatCollectionTime(element.ExpectedCollectionTime)}}
            </mat-cell>
          </ng-container>

          <!-- Cluster Column -->
          <ng-container matColumnDef="position_name">
            <mat-header-cell *matHeaderCellDef  class="mat-header-style">Cluster</mat-header-cell>
            <mat-cell *matCellDef="let element" class="cluster-cell">
              {{getClusterDisplay(element.PositionName)}}
            </mat-cell>
          </ng-container>

          <!--  Header and Data Rows    [ngClass]="{'selected-row': row === selectedRow}"-->
          <mat-header-row *matHeaderRowDef="displayedColumns; sticky: true"></mat-header-row>
          <mat-row 
            *matRowDef="let row; columns: displayedColumns; let i = index"
          
            class="table-row"
            [cdkDetailRow]="row" 
            [cdkDetailRowTpl]="tpl"
            (toggleChange)="GetSubgridData($event, row)"
            (dataLoadRequest)="onDataLoadRequest($event)"
            matRipple>
          </mat-row>
        </mat-table>
      </div>
      
      <mat-paginator 
        [pageSizeOptions]="[5, 10, 20, 50]" 
        showFirstLastButtons
        class="table-paginator">
      </mat-paginator>

      <!--  Inner Table Template  -->
         <ng-template #tpl let-element let-subgridData="subgridData" let-isLoading="isLoading">
        <div class="mat-row detail-row" style="overflow: hidden;">
          
          <!-- Loading indicator for this specific row -->
          <div *ngIf="isLoading" class="row-loading">
            <mat-spinner diameter="20"></mat-spinner>
            <span>Loading data for {{element.StoreName}}...</span>
          </div>
          
          <!-- Data table for this specific row -->
          <table class="expanded-table" *ngIf="!isLoading"> 
            <tr> 
             <th>Task Name</th>
              <th>Assigned To</th>              
              <th>CSR Info</th>
              <th>Wave</th>
              <th>Avg Coll Time</th>
            </tr>
            <tr *ngFor="let item of subgridData;">
              <td> {{item.TaskName}}</td>
              <td (click)="openTaskAssignmentDialog(item);$event.stopPropagation()">{{item.AssignedTo}} </td>              
              <td>{{item.CsrInfo}} </td>
              <td >
                {{item.Wave}}       
              </td>
              <td >
                {{item.ExpectedCollectionTime}}</td>
             
            </tr>       
          </table>
        </div>
      </ng-template>
      <!-- <ng-template #tpl let-element>
        <div class="mat-row detail-row" [@detailExpand] style="overflow: hidden;">
          <table class="expanded-table"> 
            <tr> 
              <th>Task Name</th>
              <th>Assigned To</th>              
              <th>CSR Info</th>
              <th>Wave</th>
              <th>Avg Coll Time</th>
             
            </tr>
            <tr *ngFor="let item of SubgridData">
              <td> {{item.TaskName}}</td>
              <td>{{item.AssignedTo}} </td>              
              <td>{{item.CsrInfo}} </td>
              <td >
                {{item.Wave}}       
              </td>
              <td >
                {{item.ExpectedCollectionTime}}</td>
             
            </tr>       
          </table>
        </div>
      </ng-template> -->
    </mat-card-content>
  </mat-card>
</div>

store-table.component.ts
import { trigger, state, style, transition, animate } from '@angular/animations';
import { SelectionModel } from '@angular/cdk/collections';
import { HttpClient } from '@angular/common/http';
import { AfterViewInit, Component, Inject, OnDestroy, OnInit, QueryList, ViewChild, ViewChildren } from '@angular/core';
import { MatDialog } from '@angular/material/dialog';
import { MatPaginator } from '@angular/material/paginator';
import { MatSort } from '@angular/material/sort';
import { MatTable, MatTableDataSource } from '@angular/material/table';
import { catchError, firstValueFrom, of, Subject, takeUntil } from 'rxjs';
import { AssignmentDialogComponent } from 'src/app/dialog/assignment-dialog/assignment-dialog.component';
import { ProximityDialogComponent } from 'src/app/dialog/proximity-dialog/proximity-dialog.component';
import { CdkDetailRowDirective } from 'src/app/shared/cdk-detail-row.directive';
import { GetGridDataFilter, Store } from 'src/app/shared/common.model';
import { CommonService } from 'src/app/shared/common.service';
@Component({
  selector: 'app-store-table',
  templateUrl: './store-table.component.html',
  styleUrls: ['./store-table.component.css'],
  animations: [
    trigger('detailExpand', [
      state('collapsed', style({height: '0px', minHeight: '0'})),
      state('expanded', style({height: '*'})),
      transition('expanded <=> collapsed', animate('225ms cubic-bezier(0.4, 0.0, 0.2, 1)')),
    ]),
  ],
})
export class StoreTableComponent implements OnInit, OnDestroy,AfterViewInit {
   @ViewChild(MatTable, { static: false }) table:MatTable<any>;
  @ViewChild(MatPaginator) paginator!: MatPaginator;
  @ViewChild(MatSort) sort!: MatSort;
@ViewChildren(CdkDetailRowDirective) detailRows!: QueryList<CdkDetailRowDirective>;
  isExpandingAll = false;
  allExpanded = false;
  expandedRowsData = new Map<string, any[]>();
  expandedRows=new Set<CdkDetailRowDirective>();
  selectedRows = new Set<any>();
  private unsubscribe$ = new Subject<void>();

  displayedColumns: string[] = ['store_number','store_name', 'addr_line1', 'city', 'state', 'zip', 'assigned_to', 'expected_collection_time', 'position_name', 'user_comment'];
  dataSource = new MatTableDataSource<Store>([]);
  selection = new SelectionModel<Store>(true, []);
  GetGridDataFilter:GetGridDataFilter 
  private destroy$ = new Subject<void>();
  loggeduser:string
  isExpansionDetailRow = (index, row) => row.hasOwnProperty('detailRow');
   
  constructor(private commonService: CommonService,
  public http: HttpClient,
  @Inject('BASE_URL') public baseUrl: string,
  private dialog:MatDialog) {this.loggeduser = localStorage.getItem("loggedUserId"); }

  ngOnInit(): void {
    this.commonService.gridData$
      .pipe(takeUntil(this.destroy$))
      .subscribe(stores => {
        this.dataSource = new MatTableDataSource<any>(stores);
        this.dataSource.paginator = this.paginator;
        this.dataSource.sort = this.sort;
        // Reset expansion state when data changes
        this.resetExpansionState();
      });
  }
getGridData(){
// this.showSpinner= true
 const payLoad:GetGridDataFilter ={
   countryId: "1",
   countryName: '',
   lanId: this.loggeduser,
   iriWeek: '2404',
   iriWeekViewOnly: '',
   area: '23',
   territoryId: '52',
   territoryName: '',
   fromDate: '',
   toDate: '',
   storeNumber: '',
   storeName: '',
   state: '',
   city: '',
   taskNumber: '',
   taskName: '',
   positionNumber: '',
   positionName: '',
   empId: '',
   firstName: '',
   lastName: '',
   empName: '',
   fsrOver25hrs: 'false',
   fsrOver6hrs: 'false',
   fsrHour: '',
   fsrHourOperator: 'NA',
   assignedStores: 'false',
   unassignedStores: 'false',
   sample: 'false',
   nonSample: 'false',
   multiFsrStore: 'false',
   vacation: 'false',
   action: '',
   comment: '',
   fmEmail: '',
   fmEmpId: '',
   assignmentMode: '',
   temporary: 'false'
 }
    this.http.post<any[]>(this.baseUrl + 'api/TaskAssinment/GetGridData',payLoad).pipe(takeUntil(this.unsubscribe$)).subscribe( { 
      next: 
      (response) => {                  
        this.dataSource=new MatTableDataSource<any>([]);
         this.dataSource = new MatTableDataSource<any>(response);
        this.dataSource.paginator = this.paginator;
        this.dataSource.sort = this.sort;
       },
       error: 
       (error) => { console.error(error); },
      });   
}

  ngAfterViewInit(): void {
    this.dataSource.paginator = this.paginator;
    this.dataSource.sort = this.sort;
    
    // ADD: Listen to pagination changes
     if (this.paginator) {
      this.paginator.page
        .pipe(takeUntil(this.destroy$))
        .subscribe(() => {
          console.log('Page changed - resetting expansion state');
          this.forceCollapseAllRows(); // Use forced collapse
          this.resetExpansionState();
        });
    }
  }

  ngOnDestroy(): void {
    this.destroy$.next();
    this.destroy$.complete();
  }

  /** Whether the number of selected elements matches the total number of rows. */
  isAllSelected() {
    const numSelected = this.selection.selected.length;
    const numRows = this.dataSource.data.length;
    return numSelected === numRows;
  }

  /** Selects all rows if they are not all selected; otherwise clear selection. */
 

  /** The label for the checkbox on the passed row */
  checkboxLabel(row?: Store): string {
    if (!row) {
      return `${this.isAllSelected() ? 'deselect' : 'select'} all`;
    }
    return `${this.selection.isSelected(row) ? 'deselect' : 'select'} row ${row.id}`;
  }


  /** Get full address string */
  getFullAddress(store: Store): string {
    return `${store.addr_line1}, ${store.city}, ${store.state} ${store.zip}`;
  }

  trackByStoreNumber(index: number, item: any): any {
  return item.storeNumber || item.StoreNumber || index;
}

async expandAllRows(): Promise<void> {
    if (this.isExpandingAll) {
      return;
    }
    
    this.isExpandingAll = true;
    
    try {
      if (this.allExpanded) {
        // Collapse all
        this.forceCollapseAllRows();
        this.allExpanded = false;
      } else {
        // First collapse any individually expanded rows
        this.forceCollapseAllRows();
        
        // Then expand all
        await this.expandAllRowsWithData();
        this.allExpanded = true;
      }
      
    } catch (error) {
      console.error('Error in expandAllRows:', error);
    } finally {
      this.isExpandingAll = false;
    }
  }

  private forceCollapseAllRows(): void {
    console.log('Force collapsing all rows...');
    
    const detailRowsArray = this.detailRows?.toArray() || [];
    
    // Collapse all directive rows
    detailRowsArray.forEach((detailRow) => {
      if (detailRow.isExpanded) {
        detailRow.collapse();
        console.log('Collapsed directive row');
      }
    });
    
    // Clear tracking sets
    this.expandedRows.clear();
    this.selectedRows.clear();
    
    // Force update all caret icons to collapsed state
    setTimeout(() => {
      const caretIcons = document.querySelectorAll('.caret');
      caretIcons.forEach(icon => {
        icon.classList.remove('clicked');
      });
      console.log('Updated all caret icons to collapsed state');
    }, 100);
    
    console.log('All rows force collapsed');
  }

  // FIXED: Expand rows with proper data assignment
  private async expandAllRowsWithData(): Promise<void> {
    console.log('Starting to expand all rows with data...');
    
    const currentPageData = this.getCurrentPageData();
    const detailRowsArray = this.detailRows?.toArray() || [];
    
    if (detailRowsArray.length === 0) {
      console.warn('No detail row directives found');
      return;
    }

    // Load all data first
    console.log('Loading data for all rows...');
    const dataLoadPromises = currentPageData.map(rowData => 
      this.loadSubgridDataForRow(rowData).catch(error => {
        console.error(`Error loading data for ${rowData.StoreNumber}:`, error);
        return [];
      })
    );

    const allRowData = await Promise.all(dataLoadPromises);
    console.log('All data loaded, expanding rows...');

    // Now expand each row with its specific data
    for (let i = 0; i < Math.min(currentPageData.length, detailRowsArray.length); i++) {
      const detailRowDirective = detailRowsArray[i];
      const rowData = allRowData[i];
      
      if (detailRowDirective && detailRowDirective.canExpand()) {
        try {
          // Expand with specific data for this row
          detailRowDirective.expandWithData(rowData);
          
          // Add to tracking sets
          this.expandedRows.add(detailRowDirective);
          this.selectedRows.add(currentPageData[i]);
          
          console.log(`Expanded row ${i + 1} with ${rowData.length} detail records`);
          
          // Small delay for UI smoothness
          await this.delay(25);
          
        } catch (error) {
          console.error(`Error expanding row ${i}:`, error);
        }
      }
    }
    
    // Update all caret icons to expanded state
    setTimeout(() => {
      const caretIcons = document.querySelectorAll('.caret');
      caretIcons.forEach(icon => {
        icon.classList.add('clicked');
      });
      console.log('Updated all caret icons to expanded state');
    }, 100);
    
    console.log('Finished expanding all rows');
  }

  // ENHANCED: Reset expansion state with forced cleanup
  private resetExpansionState(): void {
    console.log('Resetting expansion state');
    this.allExpanded = false;
    this.isExpandingAll = false;
    this.expandedRows.clear();
    this.selectedRows.clear();
    this.expandedRowsData.clear();
    
    // Force update all caret icons immediately
    setTimeout(() => {
      const caretIcons = document.querySelectorAll('.caret');
      caretIcons.forEach(icon => {
        icon.classList.remove('clicked');
      });
      console.log('Reset all caret icons');
    }, 50);
  }

  // ENHANCED: Update caret icon with better timing
  updateCaretIcon(cdkDetailRow: CdkDetailRowDirective, isExpanded: boolean): void {
    // Use multiple setTimeout attempts to ensure icon updates
    [0, 50, 100].forEach(delay => {
      setTimeout(() => {
        const rowElement = cdkDetailRow.viewContainerRef.element.nativeElement.parentElement;
        const caretIcon = rowElement?.querySelector('.caret');
        
        if (caretIcon) {
          if (isExpanded) {
            caretIcon.classList.add('clicked');
          } else {
            caretIcon.classList.remove('clicked');
          }
        }
      }, delay);
    });
  }



  // UPDATED: Collapse all rows
  private collapseAllRows(): void {
    console.log('Collapsing all rows...');
    
    this.expandedRows.forEach((detailRow) => {
      if (detailRow.isExpanded) {
        detailRow.collapse();
      }
    });
    
    this.expandedRows.clear();
    this.selectedRows.clear();
    console.log('All rows collapsed');
  }


  // UPDATED: Handle individual data load requests
  onDataLoadRequest(event: {directive: CdkDetailRowDirective, rowData: any}): void {
    const { directive, rowData } = event;
    
    // Check if we have cached data
    const storeKey = rowData.StoreNumber || rowData.store_number;
    if (this.expandedRowsData.has(storeKey)) {
      directive.setSubgridData(this.expandedRowsData.get(storeKey) || []);
    } else {
      // Load data from API
      this.loadSubgridDataForRow(rowData)
        .then(data => {
          directive.setSubgridData(data);
        })
        .catch(error => {
          console.error('Error loading subgrid data:', error);
          directive.setSubgridData([]);
        });
    }
  }

  // UPDATED: Load subgrid data method
  private loadSubgridDataForRow( row: any): Promise<any[]> {
    return new Promise((resolve, reject) => {
      const storeKey = row.StoreNumber || row.store_number;
      
      // Check cache first
      if (this.expandedRowsData.has(storeKey)) {
        resolve(this.expandedRowsData.get(storeKey) || []);
        return;
      }

      const payload = {
        IriWeek: row.IriWeek || row.iri_week,
        StoreNumber: storeKey
      };

      this.http.post<any[]>(this.baseUrl + 'api/TaskAssinment/GetSubgridData', payload)
        .pipe(takeUntil(this.unsubscribe$))
        .subscribe({
          next: (response) => {
            this.expandedRowsData.set(storeKey, response);
            resolve(response);
          },
          error: (error) => {
            console.error(`Error loading data for store ${storeKey}:`, error);
            reject(error);
          }
        });
    });
  }

  // SIMPLIFIED: Individual row expansion
  GetSubgridData(cdkDetailRow: CdkDetailRowDirective, row: any): void {
    console.log('Row toggle:', row.StoreNumber, 'Current state:', cdkDetailRow.isExpanded);
    
    if (cdkDetailRow.isExpanded) {
      this.expandedRows.add(cdkDetailRow);
      this.selectedRows.add(row);
    } else {
      this.expandedRows.delete(cdkDetailRow);
      this.selectedRows.delete(row);
      
      // If this was manually collapsed, update allExpanded state
      if (this.allExpanded && this.expandedRows.size < this.getCurrentPageData().length) {
        this.allExpanded = false;
      }
    }
    
    // Always update caret icon after state change
    this.updateCaretIcon(cdkDetailRow, cdkDetailRow.isExpanded);
    
    console.log(`Individual expansion: ${this.expandedRows.size} rows expanded`);
  }

 

  // UTILITY METHODS
  private getCurrentPageData(): any[] {
    if (!this.paginator) {
      return this.dataSource.data;
    }
    
    const startIndex = this.paginator.pageIndex * this.paginator.pageSize;
    const endIndex = startIndex + this.paginator.pageSize;
    return this.dataSource.data.slice(startIndex, endIndex);
  }



  private delay(ms: number): Promise<void> {
    return new Promise(resolve => setTimeout(resolve, ms));
  }

  // TEMPLATE HELPERS
  isRowExpanded(row: any): boolean {
    return this.selectedRows.has(row);
  }

  getExpandedRowCount(): number {
    return this.expandedRows.size;
  }

  getAssignmentClass(assignedTo: string): string {
    return assignedTo === 'NOT ASSIGNED' ? 'not-assigned' : 'assigned';
  }

  formatCollectionTime(time: string): string {
    return time || 'Not specified';
  }

  getClusterDisplay(positionName: string): string {
    return positionName || 'N/A';
  }

 

  UpdateTableWidth(){
  const tablewidth = document.getElementById('table'); 
  if(this.displayedColumns.length == 20){
    tablewidth.style.width = 150+'%' ;      
  }
 }



openProximityDataDialog(data:any){
    const dialogRef = this.dialog.open(ProximityDialogComponent,{
      width: '40vw',
      maxWidth: '40vw',
      minWidth: '600px',
      // height: '55vh',
      maxHeight: '55vh',
      minHeight:'250px',
      data:data,
      disableClose: true,
    })
  }

   async openAssignmentDialog(row: any, mode: 'StoreLevel' | 'TaskLevel' = 'StoreLevel'): Promise<void> {
  try {
    const currentFilters = await firstValueFrom(this.commonService.currentFilters$);
    
    if (!currentFilters || Object.keys(currentFilters).length === 0) {
      console.warn('No filters applied. Cannot open assignment dialog.');
      return;
    }
    const dialogRef = this.dialog.open(AssignmentDialogComponent, {
      width: '90vw',
      maxWidth: '1200px',
      height: '80vh',
      data: {
        storeNumber: row.StoreNumber,
        storeName: row.StoreName,
        iriWeek: row.IriWeek ,
        territoryId: currentFilters.territory_id,
        mode: mode
      },
      disableClose: true
    });

    dialogRef.afterClosed().subscribe(result => {
      if (result) {
        // Refresh the grid data
        this.refreshGridData();
      }
    });
  }catch (error) {
    console.error('Error opening assignment dialog:', error);
  }
}

  // ADD: Open assignment dialog for subgrid (task level)
async openTaskAssignmentDialog(taskData: any): Promise<void> {
  try {
    // Wait for current filters to complete
    const currentFilters = await firstValueFrom(this.commonService.currentFilters$);
    
    if (!currentFilters || Object.keys(currentFilters).length === 0) {
      console.warn('No filters applied. Cannot open assignment dialog.');
      return;
    }
    const dialogRef = this.dialog.open(AssignmentDialogComponent, {
      width: '90vw',
      maxWidth: '1200px', 
      height: '80vh',
      data: {
        storeNumber: taskData.StoreNumber,
        storeName: taskData.store_name,
        taskNumber: taskData.task_number,
        taskName: taskData.task_name,
        iriWeek: currentFilters.iriWeek,
        territoryId:currentFilters.territoryId,
        mode: 'TaskLevel'
      },
      disableClose: true
    });

    dialogRef.afterClosed().subscribe(result => {
      if (result) {
        this.refreshGridData();
      }
    });
  }catch (error) {
    console.error('Error opening task assignment dialog:', error);
  }
}

  private refreshGridData(): void {
    // This depends on your current data loading implementation
    console.log('Refreshing grid data after assignment change');
  }

    startCommentEdit(row: any): void {
    row.IsCommentEditing = true;
  }

  cancelCommentEdit(row: any): void {
    row.IsCommentEditing = false;
  }

  onCommentKeydown(event: KeyboardEvent, row: any): void {
    if (event.key === 'Enter' && !event.shiftKey) {
      event.preventDefault();
      const target = event.target as HTMLTextAreaElement;
      this.saveComment(row, target.value);
    } else if (event.key === 'Escape') {
      this.cancelCommentEdit(row);
    }
  }

   async saveComment(row: any, newComment: string): Promise<void> {
    try {
      await firstValueFrom(
        this.commonService.saveUserComment(row.StoreNumber, newComment)
      );
      
      row.UserComment = newComment;
      row.IsCommentEditing = false;
      
      console.log('Comment saved successfully');
      // Optional: Show success message
      
    } catch (error) {
      console.error('Error saving comment:', error);
      // Optional: Show error message
    }
  }

}
