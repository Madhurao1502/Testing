1. Country Selection State Management
Updated Common Service (Add Country Management)
typescript
// common.service.ts - ADD THESE METHODS

import { BehaviorSubject } from 'rxjs';

@Injectable({
  providedIn: 'root'
})
export class CommonService {
  
  // ADD: Country state management
  private countrySubject = new BehaviorSubject<string>('');
  public country$ = this.countrySubject.asObservable();

  // Existing code...
  private filtersSubject = new BehaviorSubject<GetGridDataFilter>(new GetGridDataFilter());
  public filters$ = this.filtersSubject.asObservable();

  private gridDataSubject = new BehaviorSubject<any[]>([]);
  public gridData$ = this.gridDataSubject.asObservable();

  // ADD: Set country method
  setCountry(countryId: string): void {
    this.countrySubject.next(countryId);
    console.log('Country updated:', countryId);
  }

  // ADD: Get current country
  getCurrentCountry(): string {
    return this.countrySubject.value;
  }

  // UPDATED: Apply filters with country validation
  applyFilters(filters: GetGridDataFilter): void {
    const currentCountry = this.getCurrentCountry();
    
    if (!currentCountry) {
      throw new Error('Please select a country first');
    }
    
    // Ensure country is set
    filters.countryId = currentCountry;
    
    this.filtersSubject.next(filters);
    // Call GetGridData API with filters
    this.getGridData(filters).subscribe({
      next: (data) => {
        this.gridDataSubject.next(data);
      },
      error: (error) => {
        console.error('Error applying filters:', error);
        this.gridDataSubject.next([]);
      }
    });
  }

  // Existing methods...
}
Updated Dashboard Layout Component
typescript
// dashboard-layout.component.ts - UPDATED

export class DashbordLayoutComponent implements OnInit, OnDestroy {
  // Existing properties...
  countrylist: countryModel[] = [];
  employeedata: any[] = [];
  countryctrl = new FormControl();
  isFiltersExpanded = false;
  currentIRIWeek: any;
  loggeduser: string;
  private destroy$ = new Subject<void>();

  constructor(
    private commonService: CommonService,
    public http: HttpClient,
    @Inject('BASE_URL') public baseUrl: string,
  ) { 
    this.loggeduser = localStorage.getItem("loggedUserId");
  }

  async ngOnInit(): Promise<void> {
    // Existing code...
    this.commonService.groupsStatus$.subscribe(userGroups => {    
      if(userGroups['isgTechnologyGroup']) { 
        this.countryctrl.enable();
      } else { 
        this.countryctrl.disable();
      }   
    });

    try {
      this.employeedata = await firstValueFrom(this.commonService.getEmployee(this.loggeduser));
      this.countrylist = await this.commonService.getcountry();
      
      // Set default country based on employee data
      if (this.employeedata.length > 0) {
        const defaultCountryId = this.employeedata?.countryId || '1';
        this.countryctrl.setValue(defaultCountryId);
        // IMPORTANT: Set country in service
        this.commonService.setCountry(defaultCountryId);
      }
    } catch(error) {
      console.error('Error fetching data:', error);
    }

    // Listen to country control changes
    this.countryctrl.valueChanges
      .pipe(takeUntil(this.destroy$))
      .subscribe(countryId => {
        if (countryId) {
          this.commonService.setCountry(countryId);
        }
      });
  }

  selectedcountry(event: any) {
    if (event.isUserInput && event.source.value) {
      this.commonService.setCountry(event.source.value);
      console.log('Country selected:', event.source.value);
    }
  }

  // Rest of existing methods...
}
2. Expand All Rows Functionality
Updated Store Table Component
typescript
// store-table.component.ts - ADD EXPAND ALL FUNCTIONALITY

export class StoreTableComponent implements OnInit, OnDestroy {
  // Existing properties...
  @ViewChild(MatTable, { static: false }) table: MatTable<any>;
  @ViewChild(MatPaginator) paginator!: MatPaginator;
  @ViewChild(MatSort) sort!: MatSort;

  // ADD: Expand all functionality
  isExpandingAll = false;
  allExpanded = false;
  expandedRows = new Set<any>();

  SubgridData = [];
  allSubgridData = new Map<string, any[]>(); // Store all expanded data
  private unsubscribe$ = new Subject<void>();
  
  displayedColumns: string[] = ['store_number','store_name', 'addr_line1', 'city', 'state', 'zip', 'assigned_to', 'expected_collection_time', 'position_name'];
  dataSource = new MatTableDataSource<Store>([]);
  
  // Existing constructor and ngOnInit...

  // ADD: Expand all rows method
  async expandAllRows(): Promise<void> {
    if (this.isExpandingAll) return; // Prevent multiple calls
    
    this.isExpandingAll = true;
    this.allExpanded = !this.allExpanded;
    
    try {
      if (this.allExpanded) {
        // Expand all rows
        console.log('Expanding all rows...');
        const currentPageData = this.getCurrentPageData();
        
        // Process rows in batches to avoid overwhelming the server
        const batchSize = 5;
        for (let i = 0; i < currentPageData.length; i += batchSize) {
          const batch = currentPageData.slice(i, i + batchSize);
          await this.processBatch(batch);
          // Small delay between batches
          await this.delay(100);
        }
        
        console.log('All rows expanded successfully');
      } else {
        // Collapse all rows
        this.collapseAllRows();
      }
    } catch (error) {
      console.error('Error expanding all rows:', error);
    } finally {
      this.isExpandingAll = false;
    }
  }

  // ADD: Process batch of rows
  private async processBatch(rows: any[]): Promise<void> {
    const promises = rows.map(row => this.loadSubgridDataForRow(row));
    await Promise.all(promises);
  }

  // ADD: Load subgrid data for specific row
  private loadSubgridDataForRow(row: any): Promise<void> {
    return new Promise((resolve, reject) => {
      const payload = {
        IriWeek: row.IriWeek,
        StoreNumber: row.StoreNumber
      };

      this.http.post<any[]>(this.baseUrl + 'api/TaskAssinment/GetSubgridData', payload)
        .pipe(takeUntil(this.unsubscribe$))
        .subscribe({
          next: (response) => {
            this.allSubgridData.set(row.StoreNumber, response);
            this.expandedRows.add(row);
            resolve();
          },
          error: (error) => {
            console.error(`Error loading data for store ${row.StoreNumber}:`, error);
            reject(error);
          }
        });
    });
  }

  // ADD: Collapse all rows
  private collapseAllRows(): void {
    this.expandedRows.clear();
    this.allSubgridData.clear();
    this.SubgridData = [];
    console.log('All rows collapsed');
  }

  // ADD: Get current page data
  private getCurrentPageData(): any[] {
    if (!this.paginator) return this.dataSource.data;
    
    const startIndex = this.paginator.pageIndex * this.paginator.pageSize;
    const endIndex = startIndex + this.paginator.pageSize;
    return this.dataSource.data.slice(startIndex, endIndex);
  }

  // ADD: Utility delay function
  private delay(ms: number): Promise<void> {
    return new Promise(resolve => setTimeout(resolve, ms));
  }

  // UPDATED: GetSubgridData method
  GetSubgridData(cdkDetailRow: CdkDetailRowDirective, row: any): void {
    if (this.expandedRow && this.expandedRow.isExpanded) {
      this.expandedRow.toggleRow();
    }
    this.expandedRow = cdkDetailRow.isExpanded ? cdkDetailRow : undefined;

    if (cdkDetailRow.isExpandedClass) {
      // Check if we already have data for this row (from expand all)
      if (this.allSubgridData.has(row.StoreNumber)) {
        this.SubgridData = this.allSubgridData.get(row.StoreNumber);
      } else {
        // Load data individually
        this.SubgridData = [];
        this.http.post<any[]>(this.baseUrl + 'api/TaskAssinment/GetSubgridData', {
          IriWeek: row.IriWeek,
          StoreNumber: row.StoreNumber
        }).subscribe({
          next: (response) => {
            this.SubgridData = response;
            this.allSubgridData.set(row.StoreNumber, response);
          },
          error: (error) => {
            console.error(error);
          }
        });
      }
    }

    this.updateCaratIcon(cdkDetailRow, cdkDetailRow.isExpanded);
  }

  // ADD: Check if row is expanded (for template)
  isRowExpanded(row: any): boolean {
    return this.expandedRows.has(row) || this.selectedRow === row;
  }

  // Existing methods remain the same...
}
Updated Store Table HTML
xml
<!-- store-table.component.html - ADD EXPAND ALL BUTTON -->

<div class="table-container">
  <mat-card class="table-card">
    <mat-card-content>
      <div class="table-wrapper">
        <!-- ADD: Table controls -->
        <div class="table-controls">
          <button 
            mat-icon-button 
            [disabled]="isExpandingAll"
            (click)="expandAllRows()" 
            [title]="allExpanded ? 'Collapse All' : 'Expand All'"
            class="expand-all-btn">
            <mat-icon>{{allExpanded ? 'unfold_less' : 'unfold_more'}}</mat-icon>
          </button>
          <span class="expand-status" *ngIf="isExpandingAll">
            <mat-spinner diameter="20"></mat-spinner>
            Expanding rows...
          </span>
        </div>

        <mat-table #table [dataSource]="dataSource" matSort class="store-table mat-elevation-2">
          <!-- Existing column definitions... -->
          
          <!-- Store Number Column with Expansion -->
          <ng-container matColumnDef="store_number">
            <mat-header-cell *matHeaderCellDef mat-sort-header class="mat-header-style">
              Store #
            </mat-header-cell>
            <mat-cell *matCellDef="let element" class="store-number-cell">
              <span class="caret" #caretIcon id="caretIcon" 
                    [class.clicked]="isRowExpanded(element)">â–¼</span>
              <span class="store-number">{{element.StoreNumber}}</span>
            </mat-cell>
          </ng-container>

          <!-- Rest of existing columns... -->

          <!-- Header and Data Rows -->
          <mat-header-row *matHeaderRowDef="displayedColumns; sticky: true"></mat-header-row>
          <mat-row 
            *matRowDef="let row; columns: displayedColumns; let i = index"
            [ngClass]="{'selected-row': row === selectedRow}"
            class="table-row"
            (click)="selectedRow = selectedRow === row ? null : row"
            [cdkDetailRow]="row" 
            [cdkDetailRowTpl]="tpl"
            (toggleChange)="GetSubgridData($event, row)"
            matRipple>
          </mat-row>
        </mat-table>
      </div>
      
      <!-- Existing paginator and template... -->
    </mat-card-content>
  </mat-card>
</div>
Updated Store Table CSS
css
/* store-table.component.css - ADD STYLES */

/* ADD: Table controls styling */
.table-controls {
  display: flex;
  align-items: center;
  padding: 8px 16px;
  background: #f5f5f5;
  border-bottom: 1px solid #e0e0e0;
  gap: 12px;
}

.expand-all-btn {
  color: #1976d2;
}

.expand-all-btn:disabled {
  color: #ccc;
}

.expand-status {
  display: flex;
  align-items: center;
  gap: 8px;
  font-size: 14px;
  color: #666;
}

/* Update caret to show expanded state for expand-all */
.caret.clicked {
  transform: rotate(180deg);
  margin-top: -5px;
}

/* Existing styles remain... */
3. Enhanced Filter Sidebar Component
Updated Filter Sidebar Component
typescript
// filter-sidebar.component.ts - MAJOR UPDATES

export class FilterSidebarComponent implements OnInit, OnDestroy {
  @Output() filtersChanged = new EventEmitter<GetGridDataFilter>();
  @Output() clearFilters = new EventEmitter<void>();

  filterForm!: FormGroup;
  showAdvancedFilters = false;
  showSpinner = false;
  
  // Data arrays
  employeedata: any[] = [];
  iriWeeks: any[] = [];
  territories: any[] = [];
  filteredStores: any[] = [];
  filteredState: any[] = [];
  filteredCity: any[] = [];
  filteredCluster: any[] = [];
  filteredTask: any[] = [];
  filteredFSR: any[] = [];

  // Selected values
  selectedStoreNumber = '';
  selectedState = '';
  selectedCity = '';
  selectedCluster = '';
  selectedTask = '';
  selectedFsrId = '';
  areaNBRctrl = new FormControl();
  
  // ADD: Initialization state management
  private initializationState = {
    countryReady: false,
    iriWeekReady: false,
    territoryReady: false
  };

  private unsubscribe$ = new Subject<void>();
  private loggeduser: string;

  constructor(
    private fb: FormBuilder,
    private commonService: CommonService,
    public http: HttpClient,
    @Inject('BASE_URL') public baseUrl: string,
    private snackBar: MatSnackBar // ADD for error messages
  ) {
    this.initializeForm();
    this.loggeduser = localStorage.getItem("loggedUserId") || '';
  }

  async ngOnInit(): Promise<void> {
    try {
      this.employeedata = await firstValueFrom(this.commonService.getEmployee(this.loggeduser));
      
      // UPDATED: Wait for country selection
      this.waitForCountrySelection();
      
      this.setupFormSubscriptions();
    } catch (error) {
      console.error('Error initializing filter component:', error);
    }
  }

  // ADD: Wait for country selection
  private waitForCountrySelection(): void {
    this.commonService.country$
      .pipe(takeUntil(this.unsubscribe$))
      .subscribe(countryId => {
        if (countryId) {
          this.initializationState.countryReady = true;
          console.log('Country is ready:', countryId);
          this.initializeFilters();
        } else {
          this.initializationState.countryReady = false;
          this.showError('Please select a country to load filters');
        }
      });
  }

  // UPDATED: Initialize filters after country is selected
  private async initializeFilters(): Promise<void> {
    try {
      await this.getIriWeek();
      await this.getTerritory();
      this.checkAndApplyDefaultFilters();
    } catch (error) {
      console.error('Error initializing filters:', error);
      this.showError('Error loading filter data');
    }
  }

  // UPDATED: Get IRI Week with state management
  private getIriWeek(): Promise<void> {
    return new Promise((resolve, reject) => {
      this.http.get<any[]>(this.baseUrl + 'api/TaskAssinment/GetIriWeek')
        .pipe(takeUntil(this.unsubscribe$))
        .subscribe({
          next: (response) => {
            this.iriWeeks = response;
            if (this.iriWeeks.length > 0) {
              this.filterForm.get('iriWeek')?.setValue(this.iriWeeks?.['iri_week'], { emitEvent: false });
              this.initializationState.iriWeekReady = true;
              resolve();
            } else {
              reject(new Error('No IRI weeks found'));
            }
          },
          error: (error) => { 
            console.error('Error fetching IRI weeks:', error);
            reject(error);
          }
        });
    });
  }

  // UPDATED: Get Territory with state management and area handling
  private getTerritory(): Promise<void> {
    return new Promise((resolve, reject) => {
      this.showSpinner = true;
      this.http.get<any[]>(this.baseUrl + 'api/TaskAssinment/GetTerritory')
        .pipe(takeUntil(this.unsubscribe$))
        .subscribe({
          next: (response) => {
            this.territories = response;
            
            // Set default territory and area
            const defaultTerritory = this.employeedata?.?.['fieldTerritoryNumber'] == 0 || 
                                    !this.employeedata?.?.['fieldTerritoryNumber']
                                    ? this.territories?.?.['territory_id']
                                    : this.employeedata?.?.['fieldTerritoryNumber'];
            
            this.filterForm.get('territory')?.setValue(defaultTerritory, { emitEvent: false });
            
            // FIXED: Set area based on selected territory
            const selectedTerritory = this.territories.find(t => t.territory_id === defaultTerritory);
            this.areaNBRctrl.setValue(selectedTerritory?.area || this.territories?.?.['area'] || '23');
            
            this.initializationState.territoryReady = true;
            this.showSpinner = false;
            resolve();
          },
          error: (error) => { 
            console.error('Error fetching territories:', error);
            this.showSpinner = false;
            reject(error);
          }
        });
    });
  }

  // UPDATED: Territory change handler with area update
  onTerritoryChange(event?: any): void {
    const selectedTerritoryId = event?.value || this.filterForm.get('territory')?.value;
    
    // Update area based on selected territory
    const selectedTerritory = this.territories.find(t => t.territory_id == selectedTerritoryId);
    if (selectedTerritory) {
      this.areaNBRctrl.setValue(selectedTerritory.area);
      console.log('Territory changed, area updated to:', selectedTerritory.area);
    }

    // Clear dependent fields when territory changes
    this.filterForm.patchValue({
      store: '',
      state: '',
      city: '',
      cluster: '',
      task: '',
      fsr: ''
    });
    this.clearSelectedValues();
  }

  // UPDATED: IRI Week change handler
  onIriWeekChange(): void {
    // Clear dependent fields when IRI week changes
    this.filterForm.patchValue({
      store: '',
      state: '',
      city: '',
      cluster: '',
      task: '',
      fsr: ''
    });
    this.clearSelectedValues();
  }

  // ADD: Check if all required data is ready before applying filters
  private checkAndApplyDefaultFilters(): void {
    const allReady = Object.values(this.initializationState).every(state => state);
    
    if (allReady) {
      console.log('All initialization complete, applying default filters...');
      setTimeout(() => {
        this.onApplyFilters();
      }, 500);
    } else {
      console.log('Waiting for initialization to complete...', this.initializationState);
    }
  }

  // UPDATED: Apply filters with validation
  onApplyFilters(): void {
    // Validate country selection
    const currentCountry = this.commonService.getCurrentCountry();
    if (!currentCountry) {
      this.showError('Please select a country first');
      return;
    }

    // Validate required fields
    if (!this.initializationState.iriWeekReady || !this.initializationState.territoryReady) {
      this.showError('Please wait for filters to load completely');
      return;
    }

    const formValue = this.filterForm.value;
    
    const filters = new GetGridDataFilter();
    filters.countryId = currentCountry; // Use current country from service
    filters.lanId = this.loggeduser;
    filters.iriWeek = formValue.iriWeek || '';
    filters.territoryId = formValue.territory || '';
    filters.area = this.areaNBRctrl.value || '23'; // Use current area value
    filters.storeNumber = this.selectedStoreNumber;
    filters.storeName = formValue.store || '';
    filters.state = this.selectedState;
    filters.city = this.selectedCity;
    filters.positionNumber = this.selectedCluster;
    filters.taskNumber = this.selectedTask;
    filters.empId = this.selectedFsrId;
    filters.fsrHour = formValue.fsrHour || '';
    
    // Static values as per your requirements
    filters.fsrOver25hrs = 'false';
    filters.fsrOver6hrs = 'false';
    filters.fsrHourOperator = 'NA';
    filters.temporary = 'false';
    
    // Handle radio button selections
    if (formValue.storeAssignment === 'assigned') {
      filters.assignedStores = 'true';
      filters.unassignedStores = 'false';
    } else if (formValue.storeAssignment === 'unassigned') {
      filters.assignedStores = 'false';
      filters.unassignedStores = 'true';
    } else {
      filters.assignedStores = 'false';
      filters.unassignedStores = 'false';
    }

    if (formValue.sampleType === 'sample') {
      filters.sample = 'true';
      filters.nonSample = 'false';
    } else if (formValue.sampleType === 'nonSample') {
      filters.sample = 'false';
      filters.nonSample = 'true';
    } else {
      filters.sample = 'false';
      filters.nonSample = 'false';
    }

    filters.multiFsrStore = formValue.multiFsrStore ? 'true' : 'false';
    
    console.log('Applying filters:', filters);
    this.filtersChanged.emit(filters);
  }

  // UPDATED: Clear filters with proper area reset
  onClearFilters(): void {
    // Get current territory and area for reset
    const defaultTerritory = this.employeedata?.?.['fieldTerritoryNumber'] == 0 || 
                            !this.employeedata?.?.['fieldTerritoryNumber']
                            ? this.territories?.?.['territory_id']
                            : this.employeedata?.?.['fieldTerritoryNumber'];

    const selectedTerritory = this.territories.find(t => t.territory_id == defaultTerritory);
    const defaultArea = selectedTerritory?.area || this.territories?.?.['area'] || '23';

    this.filterForm.reset({
      iriWeek: this.iriWeeks.length > 0 ? this.iriWeeks?.['iri_week'] : '',
      territory: defaultTerritory,
      storeAssignment: 'all',
      sampleType: 'all',
      multiFsrStore: false
    });
    
    // Reset area control
    this.areaNBRctrl.setValue(defaultArea);
    
    this.clearSelectedValues();
    this.clearFilters.emit();
  }

  // ADD: Show error message
  private showError(message: string): void {
    this.snackBar.open(message, 'Close', {
      duration: 5000,
      panelClass: ['error-snackbar']
    });
  }

  // Rest of existing methods remain the same...
}
4. Code Simplification Suggestions
Territory Selection Template Update
xml
<!-- filter-sidebar.component.html - UPDATE TERRITORY SELECTION -->

<div class="filter-field">
  <label class="form-label">Territory</label>
  <mat-form-field appearance="outline">
    <mat-select formControlName="territory" (selectionChange)="onTerritoryChange($event)">
      <mat-option [value]="-1">ALL</mat-option>
      <mat-option *ngFor="let territory of territories" [value]="territory.territory_id">
        {{territory.territory_name}} (Area: {{territory.area}})
      </mat-option>
    </mat-select>
  </mat-form-field>
</div>
Module Requirements
typescript
// app.module.ts - ENSURE THESE IMPORTS

import { MatSnackBarModule } from '@angular/material/snack-bar';
import { MatProgressSpinnerModule } from '@angular/material/progress-spinner';

@NgModule({
  imports: [
    // ... existing imports
    MatSnackBarModule,
    MatProgressSpinnerModule,
    // ... other imports
  ],
  // ... rest of module
})
