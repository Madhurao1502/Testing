Optimized Column Widths Based on Your Specifications
Based on your column specifications, here are the calculated optimal widths:

Column Width Calculations:
Formula Used:
Character width estimation: ~8px per character (average for 13px font)

Padding: 24px total (12px left + 12px right)

Header text: Considered for minimum width

Buffer space: 10-20px for comfortable reading

1. UPDATED store-table.component.ts (Column Definitions)
typescript
export class StoreTableComponent implements OnInit, OnDestroy, AfterViewInit {
  
  // UPDATED: Column definitions with your new columns
  baseColumns = [
    'store_number', 'territory', 'position_number', 'bdf', 'outlet', 
    'store_name', 'addr_line1', 'city', 'state', 'assigned_to', 'user_comment'
  ];
  
  currentWeekColumns = [
    'store_number', 'territory', 'position_number', 'bdf', 'outlet', 'store_name', 
    'addr_line1', 'city', 'state', 'assigned_to', 'task_completed', 'quality', 
    'cost_over', 'guaranteed_miles', 'user_comment'
  ];
  
  futureWeekColumns = [
    'store_number', 'territory', 'position_number', 'bdf', 'outlet', 'store_name', 
    'addr_line1', 'city', 'state', 'assigned_to', 'avg_cost', 'guaranteed_miles', 
    'user_comment'
  ];
  
  previousWeekColumns = [
    'store_number', 'territory', 'position_number', 'bdf', 'outlet', 'store_name', 
    'addr_line1', 'city', 'state', 'assigned_to', 'task_completed', 'quality', 
    'cost_over', 'wk1_costs', 'wk1_travel', 'wk1_ovg_travel', 'wk2_costs', 
    'wk2_travel', 'wk2_ovg_travel', 'user_comment'
  ];

  // ... rest of your existing code
}
2. OPTIMIZED store-table.component.css (Calculated Column Widths)
css
/* Container and table sizing */
.table-container {
  padding: 16px;
  height: 100%;
  width: 100%;
  overflow: hidden;
}

.table-card {
  height: 100%;
  width: 100%;
  display: flex;
  flex-direction: column;
  max-width: none;
}

.table-wrapper {
  flex: 1;
  overflow-x: auto;
  overflow-y: auto;
  max-height: calc(100vh - 300px);
  width: 100%;
}

/* OPTIMIZED: Table width based on your column requirements */
.store-table {
  width: 100%;
  table-layout: auto;
  border-collapse: collapse;
}

/* Current week min-width: ~1520px */
.store-table.week-current {
  min-width: 1520px;
}

/* Future week min-width: ~1320px */
.store-table.week-future {
  min-width: 1320px;
}

/* Previous week min-width: ~2100px */
.store-table.week-previous {
  min-width: 2100px;
}

/* Base styling for all cells */
.mat-header-cell, .mat-cell {
  padding: 8px 12px;
  text-align: left;
  border-bottom: 1px solid #e0e0e0;
  font-size: 13px;
  line-height: 1.4;
  vertical-align: top;
}

.mat-header-cell {
  font-size: 12px;
  font-weight: 600;
  text-transform: uppercase;
  background-color: #f5f5f5;
  position: sticky;
  top: 0;
  z-index: 100;
}

/* CALCULATED: Specific column widths based on your requirements */

/* Store Number - Max 10 chars, Header "Store#" */
.mat-column-store_number {
  width: 110px;
  min-width: 110px;
  max-width: 130px;
  text-align: center;
}

/* Territory - Max 3 chars, Header "Terr" */
.mat-column-territory {
  width: 70px;
  min-width: 70px;
  max-width: 80px;
  text-align: center;
}

/* Position Number - Max 10 chars, Header "Position #" */
.mat-column-position_number {
  width: 120px;
  min-width: 120px;
  max-width: 140px;
  text-align: center;
}

/* BDF - Max 4 chars, Header "BDF" */
.mat-column-bdf {
  width: 80px;
  min-width: 80px;
  max-width: 90px;
  text-align: center;
}

/* Outlet - Max 1 char, Header "Outlet" */
.mat-column-outlet {
  width: 80px;
  min-width: 80px;
  max-width: 90px;
  text-align: center;
}

/* Store Name - Max 100 chars, Header "Store Name" - Truncated display */
.mat-column-store_name {
  width: 200px;
  min-width: 180px;
  max-width: 250px;
}

.mat-column-store_name .mat-cell,
.mat-column-store_name .mat-header-cell {
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
}

/* Address - Max 100 chars, Header "Address" - Truncated display */
.mat-column-addr_line1 {
  width: 200px;
  min-width: 180px;
  max-width: 250px;
}

.mat-column-addr_line1 .mat-cell,
.mat-column-addr_line1 .mat-header-cell {
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
}

/* City - Max 100 chars, Header "City" - Truncated display */
.mat-column-city {
  width: 140px;
  min-width: 120px;
  max-width: 180px;
}

.mat-column-city .mat-cell,
.mat-column-city .mat-header-cell {
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
}

/* State - Max 2 chars, Header "State" */
.mat-column-state {
  width: 80px;
  min-width: 80px;
  max-width: 90px;
  text-align: center;
}

/* Assigned To - Max 200 chars, Header "Assigned To" - Multiple lines allowed */
.mat-column-assigned_to {
  width: 180px;
  min-width: 160px;
  max-width: 220px;
}

/* Task Completed - Yes/No, Header "Comp" */
.mat-column-task_completed {
  width: 80px;
  min-width: 80px;
  max-width: 90px;
  text-align: center;
}

/* Quality - Approved/Not Approved, Header "Quality" */
.mat-column-quality {
  width: 110px;
  min-width: 100px;
  max-width: 120px;
  text-align: center;
}

/* Guaranteed Miles - Header "Miles" */
.mat-column-guaranteed_miles {
  width: 100px;
  min-width: 90px;
  max-width: 120px;
  text-align: center;
}

/* Average Cost - Header "Avg Cost" */
.mat-column-avg_cost {
  width: 110px;
  min-width: 100px;
  max-width: 130px;
  text-align: right;
}

/* Money columns - 10 char wrap, right-aligned */
.mat-column-cost_over,
.mat-column-wk1_costs,
.mat-column-wk1_travel,
.mat-column-wk1_ovg_travel,
.mat-column-wk2_costs,
.mat-column-wk2_travel,
.mat-column-wk2_ovg_travel {
  width: 120px;
  min-width: 110px;
  max-width: 140px;
  text-align: right;
}

.mat-column-cost_over .mat-cell,
.mat-column-wk1_costs .mat-cell,
.mat-column-wk1_travel .mat-cell,
.mat-column-wk1_ovg_travel .mat-cell,
.mat-column-wk2_costs .mat-cell,
.mat-column-wk2_travel .mat-cell,
.mat-column-wk2_ovg_travel .mat-cell {
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
}

/* Comments - Header "Comments" */
.mat-column-user_comment {
  width: 160px;
  min-width: 140px;
  max-width: 200px;
}

/* ENHANCED: Assigned To column styling for multiple names */
.assignment-container {
  display: flex;
  flex-direction: column;
  align-items: flex-start;
  min-height: 32px;
  padding: 4px 2px;
  width: 100%;
}

.assignment-names {
  display: flex;
  flex-direction: column;
  align-items: flex-start;
  width: 100%;
  word-wrap: break-word;
}

.single-name {
  font-size: 13px;
  line-height: 1.3;
  font-weight: 500;
  word-wrap: break-word;
}

.multiple-names {
  display: flex;
  flex-direction: column;
  width: 100%;
}

.name-line {
  font-size: 12px;
  line-height: 1.2;
  padding: 1px 0;
  word-break: break-word;
}

.name-line.first-name {
  font-weight: 600;
  border-bottom: 1px solid #e0e0e0;
  padding-bottom: 2px;
  margin-bottom: 2px;
}

/* Assignment status styling */
.assignment-names.not-assigned .single-name {
  color: #f44336;
  font-style: italic;
}

.assignment-names.single-assigned .single-name {
  color: #4caf50;
  font-weight: 500;
}

.assignment-names.multiple-assigned {
  border-left: 3px solid #2196f3;
  padding-left: 6px;
  background-color: rgba(33, 150, 243, 0.05);
}

.assignment-names.multiple-assigned .name-line {
  color: #1976d2;
  font-weight: 500;
}

/* Status badges */
.status-badge, .quality-badge, .cost-badge {
  padding: 3px 8px;
  border-radius: 10px;
  font-size: 10px;
  font-weight: 600;
  text-transform: uppercase;
  display: inline-block;
  text-align: center;
  min-width: 40px;
}

.completed { background-color: #4caf50; color: white; }
.incomplete { background-color: #f44336; color: white; }
.quality-approved { background-color: #4caf50; color: white; }
.quality-not-approved { background-color: #f44336; color: white; }
.cost-over { background-color: #f44336; color: white; }
.cost-ok { background-color: #4caf50; color: white; }

/* Money formatting */
.money-cell {
  font-family: 'Courier New', monospace;
  font-weight: 500;
}

/* Comment display */
.comment-display {
  display: flex;
  align-items: center;
  justify-content: space-between;
  min-height: 32px;
  padding: 4px 6px;
  border-radius: 4px;
  transition: background-color 0.2s ease;
  width: 100%;
}

.comment-display.clickable {
  cursor: pointer;
}

.comment-display.clickable:hover {
  background-color: #f5f5f5;
}

.comment-display.has-comment {
  background-color: #e3f2fd;
}

.comment-text {
  flex: 1;
  font-size: 12px;
  color: #333;
  margin-right: 6px;
  text-overflow: ellipsis;
  overflow: hidden;
  white-space: nowrap;
}

.comment-icon {
  font-size: 14px;
  width: 14px;
  height: 14px;
  color: #666;
  opacity: 0.7;
}

.comment-icon.has-content {
  color: #2196f3;
  opacity: 1;
}

/* Responsive design */
@media (max-width: 1400px) {
  .store-table.week-current { min-width: 1400px; }
  .store-table.week-future { min-width: 1200px; }
  .store-table.week-previous { min-width: 1900px; }
}

@media (max-width: 1024px) {
  .table-container { padding: 12px; }
  .mat-header-cell, .mat-cell { padding: 6px 8px; font-size: 12px; }
  .store-table.week-current { min-width: 1200px; }
  .store-table.week-future { min-width: 1000px; }
  .store-table.week-previous { min-width: 1600px; }
}

@media (max-width: 768px) {
  .table-container { padding: 8px; }
  .mat-header-cell, .mat-cell { padding: 4px 6px; font-size: 11px; }
  .store-table.week-current { min-width: 1000px; }
  .store-table.week-future { min-width: 900px; }
  .store-table.week-previous { min-width: 1400px; }
}

/* Hover effects */
.table-row:hover {
  background-color: #f8f9fa;
}

.table-row:hover .mat-cell {
  background-color: transparent;
}

/* Sticky header enhancement */
.mat-header-row {
  position: sticky;
  top: 0;
  z-index: 1000;
  background-color: #fafafa;
  box-shadow: 0 2px 4px rgba(0,0,0,0.1);
}
3. ADD to store-table.component.html (New Column Definitions)
xml
<!-- Territory Column -->
<ng-container matColumnDef="territory" *ngIf="isColumnVisible('territory')">
  <mat-header-cell *matHeaderCellDef class="mat-header-style">Terr</mat-header-cell>
  <mat-cell *matCellDef="let element">{{element.Territory}}</mat-cell>
</ng-container>

<!-- Position Number Column -->
<ng-container matColumnDef="position_number" *ngIf="isColumnVisible('position_number')">
  <mat-header-cell *matHeaderCellDef class="mat-header-style">Position #</mat-header-cell>
  <mat-cell *matCellDef="let element">{{element.PositionNumber}}</mat-cell>
</ng-container>

<!-- BDF Column -->
<ng-container matColumnDef="bdf" *ngIf="isColumnVisible('bdf')">
  <mat-header-cell *matHeaderCellDef class="mat-header-style">BDF</mat-header-cell>
  <mat-cell *matCellDef="let element">{{element.BDF}}</mat-cell>
</ng-container>

<!-- Outlet Column -->
<ng-container matColumnDef="outlet" *ngIf="isColumnVisible('outlet')">
  <mat-header-cell *matHeaderCellDef class="mat-header-style">Outlet</mat-header-cell>
  <mat-cell *matCellDef="let element">{{element.Outlet}}</mat-cell>
</ng-container>

<!-- UPDATE: Task Completed Column with shorter header -->
<ng-container matColumnDef="task_completed" *ngIf="isColumnVisible('task_completed')">
  <mat-header-cell *matHeaderCellDef class="mat-header-style">Comp</mat-header-cell>
  <mat-cell *matCellDef="let element">
    <span class="status-badge" [ngClass]="getTaskCompletedClass(element.TaskCompleted)">
      {{formatTaskCompleted(element.TaskCompleted)}}
    </span>
  </mat-cell>
</ng-container>

<!-- UPDATE: Quality Column -->
<ng-container matColumnDef="quality" *ngIf="isColumnVisible('quality')">
  <mat-header-cell *matHeaderCellDef class="mat-header-style">Quality</mat-header-cell>
  <mat-cell *matCellDef="let element">
    <span class="quality-badge" [ngClass]="getQualityClass(element.Quality)">
      {{formatQuality(element.Quality)}}
    </span>
  </mat-cell>
</ng-container>

<!-- WK1 Costs Column -->
<ng-container matColumnDef="wk1_costs" *ngIf="isColumnVisible('wk1_costs')">
  <mat-header-cell *matHeaderCellDef class="mat-header-style">WK1 Cost</mat-header-cell>
  <mat-cell *matCellDef="let element" class="money-cell">{{formatMoney(element.WK1Costs)}}</mat-cell>
</ng-container>

<!-- WK1 Travel Column -->
<ng-container matColumnDef="wk1_travel" *ngIf="isColumnVisible('wk1_travel')">
  <mat-header-cell *matHeaderCellDef class="mat-header-style">WK1 Travel</mat-header-cell>
  <mat-cell *matCellDef="let element" class="money-cell">{{formatMoney(element.WK1Travel)}}</mat-cell>
</ng-container>

<!-- WK1 OVG Travel Column -->
<ng-container matColumnDef="wk1_ovg_travel" *ngIf="isColumnVisible('wk1_ovg_travel')">
  <mat-header-cell *matHeaderCellDef class="mat-header-style">WK1 OVG</mat-header-cell>
  <mat-cell *matCellDef="let element" class="money-cell">{{formatMoney(element.WK1OvgTravel)}}</mat-cell>
</ng-container>

<!-- WK2 Costs Column -->
<ng-container matColumnDef="wk2_costs" *ngIf="isColumnVisible('wk2_costs')">
  <mat-header-cell *matHeaderCellDef class="mat-header-style">WK2 Cost</mat-header-cell>
  <mat-cell *matCellDef="let element" class="money-cell">{{formatMoney(element.WK2Costs)}}</mat-cell>
</ng-container>

<!-- WK2 Travel Column -->
<ng-container matColumnDef="wk2_travel" *ngIf="isColumnVisible('wk2_travel')">
  <mat-header-cell *matHeaderCellDef class="mat-header-style">WK2 Travel</mat-header-cell>
  <mat-cell *matCellDef="let element" class="money-cell">{{formatMoney(element.WK2Travel)}}</mat-cell>
</ng-container>

<!-- WK2 OVG Travel Column -->
<ng-container matColumnDef="wk2_ovg_travel" *ngIf="isColumnVisible('wk2_ovg_travel')">
  <mat-header-cell *matHeaderCellDef class="mat-header-style">WK2 OVG</mat-header-cell>
  <mat-cell *matCellDef="let element" class="money-cell">{{formatMoney(element.WK2OvgTravel)}}</mat-cell>
</ng-container>
4. ADD to store-table.component.ts (Formatting Methods)
typescript
// ADD these methods to your StoreTableComponent:

// Money formatting
formatMoney(value: any): string {
  if (!value || value === 0) return '$0.00';
  
  const num = parseFloat(value);
  if (isNaN(num)) return '$0.00';
  
  return '$' + num.toFixed(2);
}

// Quality formatting
formatQuality(value: any): string {
  if (!value) return 'N/A';
  const quality = value.toString().toLowerCase();
  return quality === 'approved' ? 'Approved' : 'Not Approved';
}

getQualityClass(value: any): string {
  if (!value) return 'quality-unknown';
  const quality = value.toString().toLowerCase();
  return quality === 'approved' ? 'quality-approved' : 'quality-not-approved';
}
Summary of Optimized Widths:
Table Width Calculations:
Current Week: ~1520px total

Store# (110px) + Terr (70px) + Position# (120px) + BDF (80px) + Outlet (80px) + Store Name (200px) + Address (200px) + City (140px) + State (80px) + Assigned To (180px) + Comp (80px) + Quality (110px) + Cost Over (120px) + Miles (100px) + Comments (160px)

Future Week: ~1320px total

Store# (110px) + Terr (70px) + Position# (120px) + BDF (80px) + Outlet (80px) + Store Name (200px) + Address (200px) + City (140px) + State (80px) + Assigned To (180px) + Avg Cost (110px) + Miles (100px) + Comments (160px)

Previous Week: ~2100px total

All current week columns + 6 additional cost columns (120px each)

Key Benefits:
✅ Optimal space usage based on actual data lengths

✅ Horizontal scroll when needed

✅ Responsive breakpoints for different screen sizes

✅ Proper text truncation for long fields

✅ Right-aligned money columns for better readability

✅ Sticky headers during vertical scroll

✅ Professional appearance with consistent spacing

This configuration will give you the most efficient use of screen space while maintaining readability! 🎯
