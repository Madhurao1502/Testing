Subject: Request for Leave (September 2 ‚Äì September 5)

Dear [Manager‚Äôs Name],

I hope this message finds you well.

As you are aware, I had taken leave from August 13 to September 1 for my marriage. I resumed work on September 1, but unfortunately, I need to request additional leave from September 2 to September 5.

The reason is that my family (including my parents, my wife, and myself) is currently suffering from typhoid fever, and I need time to recover and take care of them.

I sincerely apologize for the short notice and the extended absence, and I assure you that I will resume work promptly on September 6. Please let me know if you need any supporting medical documents.

Thank you for your kind understanding.

Best regards,
[Your Name]

Do you want me to make it more formal (like HR leave application style), or softer/personal since it‚Äôs about your health and family?

You said:
more formal with softer
ChatGPT said:

Got it üëç Here‚Äôs a more formal but softer version of your email:

Subject: Leave Request from September 2 to September 5

Dear [Manager‚Äôs Name],

I hope you are doing well.

As you know, I was on leave from August 13 to September 1 for my marriage. I resumed work on September 1, but unfortunately, I need to request additional leave from September 2 to September 5.

The reason is that my parents, my wife, and I are all unwell and have been diagnosed with typhoid fever. I kindly request your understanding and approval for this short extension so I can focus on recovery and supporting my family.

I sincerely apologize for the inconvenience caused due to my extended absence and assure you that I will be back at work from September 6. Please let me know if you require any medical documentation.

Thank you very much for your support and consideration.

Warm regards,
[Your Name]


I wanted to inform you about a recent issue I encountered in the new Angular version of the application.

While sending data to the middleware (where the list is processed and passed to the UI for rendering the dropdown), I mistakenly sent "detail-self" instead of the correct key "det-shelf". This mismatch caused the project with ID: 414 to appear incorrectly in the UI.

The issue has now been identified and resolved. Everything should be working as expected.

Please let me know if any further action is needed from my side.


I wanted to provide an update on the logic implemented around the Next Gen and Run Imputation buttons in the application.

The Next Gen button will be disabled when a delivery is not in 'Initial' or 'New' status, ensuring users can only proceed with valid deliveries. Additionally, when a user selects the Next Gen option, the Run Imputation button in AQ will be disabled to prevent any conflicting actions during the process.

During testing with cloned projects, we observed that the toggle state was not updating correctly. This was due to the enablement logic not being applied alongside the disablement logic. This behavior has now been addressed, and the toggle updates correctly in all scenarios.

Please let me know if you notice anything unusual or if further adjustments are needed.



body {
    margin: 0;
    font-family: Verdana,sans-serif,Roboto, "Helvetica Neue";
    font-size: 14px;
  }

.content{
  margin-bottom: 5px;
}
h1,h2{
  font-size: medium;
  font-family: Verdana, Geneva, Tahoma, sans-serif;
}
.accordion-container{
  display: grid;
  gap: 10px;
}
.sidenav1{ 
    flex: 0 0 30%;
    max-width: 325px;
    min-width: 325px;
    background-color: white;
    overflow-y: auto;
}

.mat-toolbar-row, .mat-toolbar-single-row {
  display: flex;
  box-sizing: border-box;
  padding: 0 16px;
  width: 100%;
  flex-direction: row;
  align-items: center;
  white-space: nowrap;
  height: 30px;
}

.sidenav-container {
    display: flex;
    height: calc(100vh - 130px);
  }

  .toggle-button{
    position:absolute;
    top: 50%;
    left: 0;
    transform: translateY(-50%);
    background-color: #1976d2;
    color: #fff;
    border: none;
    border-radius: 4px;
    padding: 8px 8px;
    cursor: pointer; 
    writing-mode: vertical-lr;
    text-orientation: mixed;
    transition: transform 0.2s ease ,opacity 0.2s ease;
    font-weight: 600;
    
    &:hover{
      background-color: #1565c0;
    }

  }

  .mat-drawer-inner-container {
    width: 100%;
    height: 100%;
    overflow: hidden;
}
  
  .sidenav {
    /* width: 300px;
    padding: 16px;
    background-color: #f4f4f4;

    @media (max-width:1024px) {
        width: 240px;
    }

    @media (max-width:768px) {
        width: 200px;
    }

    &.mat-sidenav-opened{
        transition: width 0.3s ease-in-out;
    }

    &.mat-sidenav-closed{
        width: 0;
    } */

    flex: 0 0 30%;
    max-width: 300px;
    background-color: #f4f4f4;
    overflow-y: auto;
  }

  .mat-sidenav-content{
    flex: 1;
    padding: 0px 10px;
    /* margin-left: 300px; */
    overflow-y: auto;
  }
  
  .filter-section {
     margin: 5px; 
  
    .filter-field {
      width: 100%;
      /* margin-bottom: 16px; */
    }
  
    .search-box {
      /* margin-top: 16px; */
      padding-bottom: 0;
    }
  }
  
  .projects-or-deliverables {
    /* margin: 5px; */
    height: 51vh;
    /* padding: 10px; */
    overflow: auto;
    h3 {
      margin-bottom: 16px;
      font-size: 1.2rem;
      font-weight: bold;
    }
  
    .data-item {
      display: flex;
      justify-content: space-between;
      align-items: center;
      padding: 5px 10px;
      border-radius: 10px;
      border-bottom: 1px solid #ddd;
      cursor: pointer;
      transition: background-color 0.2s ease,transform 0.2s ease;
    
      &:hover{
        background-color: lightgray;
        /* transform: translate(4px); */
      }

      .project-name {
        font-size: 1rem;
        color: #333;
      }
  
      .delivery-count {
        background-color: lightgray;
        color: black;
        font-size: 0.8rem;
        font-weight: 400;
        width: 25px;
        height: 25px;
        display: flex;
        justify-content: center;
        align-items: center;
        border-radius: 50%;
        box-shadow: 0px 2px 4px rgba(0, 0, 0, 0.2);
      }
    }
  }
  
  .content-area {
    /* display: grid; */
    gap: 10px;
    padding: 0px;   
    h2 {
      margin-bottom: 16px;
    }  
   
  }

  .content-area1 {
    /* display: grid; */
    gap: 10px;
    padding: 10px;   
    margin-left: 20px;
    height: 95%;
    overflow: auto;
    h2 {
      margin-bottom: 16px;
    }  
   
  }
  
  .footer {
    text-align: center;
    padding: 16px;
    background-color: #f4f4f4;
    color: #666;
  }

  .search-container{
    display: flex;
    flex-direction: row;
    flex-wrap: wrap;
    justify-content: space-between;
    align-items: center;
    
  }

  .deliverables{
    overflow: auto;
    height: 90%;
    h3 {
      margin-bottom: 16px;
      font-size: 1.2rem;
      font-weight: bold;
    }
  
    .deliverables-data {
      display: flex;
      justify-content: flex-start;
      align-items: center;
      padding: 5px 10px;
      height: 25px;
      border-radius: 10px;
      border-bottom: 1px solid #ddd;
      cursor: pointer;
      transition: background-color 0.2s ease,transform 0.2s ease;
    
      &:hover{
        background-color: lightgray;
        color: white;
        /* transform: translate(4px); */
      }

      .delivery-name {
        font-size: 1rem;
        /* margin-left: 10px; */
        /* color: #333; */
      }
  
      .delivery-number {       
        font-size: 1rem;
        /* color: #333;         */
      }
    }
  }

  .selected-item{
    background-color: #00b0f0;
    color: #fff;
    /* font-weight: bold; */
    border-radius: 5px;
    &:hover{
      color: #333;
      /* transform: translate(4px); */
    }

  }

 

  .nav-header-icons-container{
    display: flex ;
    flex-direction: row;
    flex-wrap: nowrap;
    justify-content: space-between;
    align-items: center;
    height: 35px;
    h2{
      margin: 0;
    }
    .nav-header{
      height: 30px;
      cursor: pointer; 
      padding: 5px;
    }
    .nav-header-icon button{
      border: none;   
      height: 30px;
      background-color: white;
      cursor: pointer;   
      padding: 5px;
    }

    /* .nav-header-icon .add-icon{
      border: none;      
    } */
    .nav-header-icon .pin-icon{
      margin-left: 10px;      
    }
  }

  .status-circle{
    display: inline-block;
    width: 10px;
    height: 10px;
    margin-right: 5px;
    border-radius: 50%;
    border: 1px solid transparent;
  }

  .status-failed{
    background-color: red;
  }

  .status-success{
    background-color: green;
  }

  .status-initial{
    background-color: white;
    border: 1px solid #ccc;
  }

  .status-inprogress{
    background-color: #001aff;
  }

  .status-reprogress{
    background-color: #ff6500;
  }
  .status-unknown{
    background-color: white;
    border: 1px solid #ccc;
  }



  .status-abandon{
    background-color: #ffff00;
  }

  .mat-form-field-appearance-standard .mat-form-field-flex {
    padding-top: 5px;
  }

 @media screen and (min-width:1000px) and (max-width:1280px) {
  .projects-or-deliverables{
    /* margin: 10px; */
    height: 41vh;
    overflow: auto;
  }
  
 }

 @media screen and (min-width:1281px) and (max-width:1366px) {
  .projects-or-deliverables{
    /* margin: 10px; */
    height: 42vh;
    overflow: auto;
  }

   .content-area{
    width: 150% !important;
  }
  
 }

 @media screen and (min-width:1366px) and (max-width:1439px) {
  .projects-or-deliverables{
    /* margin: 10px; */
    height: 49vh;
    overflow: auto;
  }
  
 }

 @media screen and (min-width:1440px) and (max-width:1600px) {
  .projects-or-deliverables{
    /* margin: 10px; */
    height: 50vh;
    overflow: auto;
  }
  
 }

 @media screen and (min-width:1601px) and (max-width:1800px) {
  .projects-or-deliverables{
    /* margin: 10px; */
    height: 53vh;
    overflow: auto;
  }

  
  
 }


 @media screen and (min-width:1801px) and (max-width:2700px) {
  .projects-or-deliverables{
    margin: 10px;
    height: 60vh;
    overflow: auto;
  }

  
  
 }

 @media screen and (min-width:400px) and (max-width:1250px){
 .content-area {
    width: 1000px !important;
  }
 }

 

.chart {
  height: 100%;
  width: 100%;
}



*************
body {
  margin: 0;
  font-family: Verdana,sans-serif,Roboto, "Helvetica Neue";
  font-size: 14px;
}
.metrics-chart{
width: 55%;
}

.metrics-section{
width: 45%;
}

.dashboard-container{
display: flex;
justify-content: space-between;
gap: 10px;
padding-top: 10px;
}
.mat-card {
  padding: 10px;
}
.stats-card{
 margin-bottom: 10px;
}

.stats-card p{
    font-size: 16px;
    margin: 4px 0;
}



.status-cards{
display: flex;
justify-content: space-around;
gap: 15px;
}

.mat-tab-label {
  height: 30px;
  padding: 0px 15px;
}

.card {
width: 80px;
height: 40px;
border-radius: 8px;
text-align: center;
display: flex;
flex-direction: column;
justify-content: center;
box-shadow: 0px 4px 6px rgba(0, 0, 0, 0.1);
transition: transform 0.2s ease-in-out;
}

.approved{
    border: 2px solid green;
    color: green;
    background-color: rgba(0,128,0,0.1);
}

.DROPPED{
    border: 2px solid red;
    color: red;
    background-color: rgba(255,0,0,0.1);
}

.ns{
    border: 2px solid gray;
    color: gray;
    background-color: rgba(128,128,128,0.1);
}

.tab-container{
    background: #f4f4f4;
    padding: 10px;
    box-shadow: 0px 4px 6px rgba(0, 0, 0, 0.1);
    margin-bottom: 10px;
}
.territory-selection-container{    
    display: flex;
    flex-direction: row-reverse;
    justify-content: space-between;
    margin-top: 8px;
}
/* .territory-selection-container .mat-radio-group-container{
    margin-top: 15px;
    padding-bottom: 1.25em;
} */



.table-container{
    min-height: 300px;
    max-height: 300px;
    overflow: auto;
  }
  .mat-table {
    width: 100%;
    margin-bottom: 16px;
    background: white;
    border-radius: 8px;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
  }
  
  th {
    background-color: lightgray;
    color: black;
    font-weight: 500;
    padding: 12px;
  }
  
  td {
    padding: 12px;
    border-bottom: 1px solid #ddd;
  }

  tr.mat-header-row {
    height: 40px;
  }

  tr.mat-row, tr.mat-footer-row {
    height: 30px;
}

  .mat-row:hover{
    background-color: #f5f5f5;
    cursor: pointer;
    transition: backgroud-color 0.3s ease-in-out;
  }


.chart {
  height: 220px;
  width: 220px;
  flex: 1 1;
  /*  max-width:20px;*/
}

/*.chart-bar {
  height: 300px;
  width: 500px;
  flex: 1 1;
}*/

.chart-container {
  display: flex;
  justify-content: space-between;
  align-items: center;
  flex-wrap: wrap;
  gap: 20px;
}


th.mat-header-cell:last-of-type, td.mat-cell:last-of-type, td.mat-footer-cell:last-of-type {
    padding-right: 0px !important;
}

th.mat-header-cell:first-of-type, td.mat-cell:first-of-type, td.mat-footer-cell:first-of-type
 {
    padding-left: 10px !important;
}
<div class="dashboard-container">
    <div class="metrics-section">
        <div class="stats">
            <mat-card style="box-shadow: 0px 2px 3px 2px rgba(0, 0, 0, 0.12), 0px 2px 1px -1px rgba(0, 0, 0, 0.2), 0px 1px 1px 0px rgba(0, 0, 0, 0.14), 0px 1px 3px 0px rgba(0, 0, 0, 0.12);">
                <mat-card class="stats-card" style="box-shadow: 0px 2px 3px 2px rgba(0, 0, 0, 0.12), 0px 2px 1px -1px rgba(0, 0, 0, 0.2), 0px 1px 1px 0px rgba(0, 0, 0, 0.14), 0px 1px 3px 0px rgba(0, 0, 0, 0.12);">
                    <p> <span style="color: gray;">Total Stores Collected</span> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:<span matTooltip="{{rmaMetricsData?.storeColl}}/{{rmaMetricsData?.storeCollTotal}}"> &nbsp;<strong>{{rmaMetricsData?.storeCollPerc}} </strong><span *ngIf="rmaMetricsData&&rmaMetricsData.storeCollPerc!='0'">%</span> </span> </p>
                    <p><span style="color: gray;">Effective Store Collection</span>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:<span matTooltip="{{rmaMetricsData?.effStoreColl}}/{{rmaMetricsData?.effStoreTotal}}">&nbsp; <strong>{{rmaMetricsData?.effStorePerc}} </strong><span *ngIf="rmaMetricsData&&rmaMetricsData.effStorePerc!='0'">%</span></span> </p>
                    <p> <span style="color: gray;">Dropped Store Collection Cost</span> &nbsp;:<span> &nbsp;<strong>{{rmaMetricsData?.dropCollStoreCost}}</strong> </span> </p>    
                    <!-- <span *ngIf="rmaMetricsData&&rmaMetricsData.dropCollStoreCost!='0'">%</span> -->
                </mat-card>

                <div class="status-cards">
                    <mat-card class="card approved" >
                        <p style="margin: 0">APPROVED</p>
                        <h2>{{rmaMetricsData?.rmaPassCnt}}</h2>
                    </mat-card>

                    <mat-card class="card DROPPED">
                        <p style="margin: 0">DROPPED</p>
                        <h2>{{rmaMetricsData?.rmaFailCnt}}</h2>
                    </mat-card>

                    <mat-card class="card ns">
                        <p style="margin: 0">N/S</p>
                        <h2>{{rmaMetricsData?.rmaNaCnt}}</h2>
                    </mat-card>
                </div>
              
            </mat-card>           
        </div>
        <div class="tab-container">
            <mat-tab-group (selectedTabChange)="OnTabSelection($event)">
                <mat-tab label="RMA"></mat-tab>
                <mat-tab label="Territory"></mat-tab>
                <mat-tab label="Chain"></mat-tab>              
            </mat-tab-group>
            <div class="territory-selection-container" >
                <div>

                    <button mat-icon-button [matMenuTriggerFor]="menu" aria-label="Example icon-button with a menu"> 
                        <mat-icon>more_vert</mat-icon>
                    </button>
                    <mat-menu #menu="matMenu">
                         <button mat-menu-item *ngIf="this.modeCtrl.value == 'RMA'" (click)="exportRMAView()"> 
                            <mat-icon style="vertical-align: sub;"> description</mat-icon> 
                            <span>Export RMA View</span>
                        </button>
                           <button mat-menu-item *ngIf="this.modeCtrl.value == 'RMA'"  (click)="exportFieldRMA()"> 
                            <mat-icon style="vertical-align: sub;"> description</mat-icon> 
                            <span>Export RMA Completion Tracker</span>
                        </button>
                         <button mat-menu-item *ngIf="this.modeCtrl.value == 'TERRITORY'" matTooltip="Export Territory View" style="float: inline-end;" (click)="exportTerritoryView()"> 
                            <mat-icon style="vertical-align: sub;"> description</mat-icon>
                            <span>Export Territory View</span>
                         </button>
                         <button mat-menu-item *ngIf="this.modeCtrl.value == 'CHAIN'"  matTooltip="Refresh" (click)="getRmaMetricsData()"> 
                            <mat-icon style="vertical-align: sub;"> refresh</mat-icon>
                                <span>Refresh</span>
                         </button>
                    </mat-menu>
                    <!-- <button *ngIf="this.modeCtrl.value == 'RMA'" mat-button color="primary"  matTooltip="Export RMA View" (click)="exportRMAView()"> <mat-icon style="vertical-align: sub;"> description</mat-icon> </button>
                    <button *ngIf="this.modeCtrl.value == 'TERRITORY'" mat-button color="primary"  matTooltip="Export Territory View" style="float: inline-end;" (click)="exportTerritoryView()"> <mat-icon style="vertical-align: bottom;"> description</mat-icon> </button>
                    <button *ngIf="this.modeCtrl.value == 'CHAIN'" mat-button color="primary"  matTooltip="Refresh" (click)="getRmaMetricsData()"> <mat-icon style="vertical-align: sub;"> refresh</mat-icon> </button> -->
                </div>
             
              
                <div *ngIf="this.modeCtrl.value == 'RMA'">
                    <mat-form-field *ngIf="this.modeCtrl.value == 'RMA'">
                        <mat-label>Select Territory</mat-label>
                        <mat-select [formControl]="territoryCtrl" (selectionChange)="getRmaMetricsData()">
                            <mat-option [value]="'-1'">-- All Territories --</mat-option>
                            <mat-option *ngFor="let territory of territoryList" [value]="territory.Key">{{territory.Value}}</mat-option>
                        </mat-select>
                        <hr style="margin: 0;color: #ccc;">
                    </mat-form-field>
                </div>

                <div class="mat-radio-group-container" *ngIf="this.modeCtrl.value != 'TERRITORY'">
                    <mat-radio-group [formControl]="rowCtrl" (change)="this.getRmaMetricsData()" >
                        <mat-radio-button [value]="'15'" style="margin-right: 15px;">Top 15</mat-radio-button>
                        <mat-radio-button [value]="'-1'">ALL <span *ngIf="rowCtrl.value=='-1'&&this.tableData.length!=0">({{tableData.length}})</span></mat-radio-button>
                    </mat-radio-group>
                </div>
            
            </div>
            <div class="table-container">
                <table mat-table [dataSource]="tableData" class="mat-elevation-z8" *ngIf="tableData.length>0">
                    <ng-container matColumnDef="Name">
                        <th mat-header-cell *matHeaderCellDef style="width: 50%;"> Name</th>
                        <td mat-cell *matCellDef="let element" style="width: 50%;" >
                            <a href="#" (click)="openAq(element,$event)"  *ngIf="this.modeCtrl.value!='CHAIN'">{{element.Name}}</a> 
                            <span *ngIf="this.modeCtrl.value=='CHAIN'">{{element.Name}}</span>
                        </td>
                        
                    </ng-container>
                    <ng-container matColumnDef="Coll">
                        <th mat-header-cell *matHeaderCellDef> Coll</th>
                        <td mat-cell *matCellDef="let element" matTooltip="{{element.CollNum}}/{{element.CollDenom}}">{{element.CollPerc}}</td>
                    </ng-container>
                    <ng-container matColumnDef="CollApprPerc">
                        <th mat-header-cell *matHeaderCellDef> A&C</th>
                        <td mat-cell *matCellDef="let element" matTooltip="{{element.CollApprNum}}/{{element.CollDenom}}">{{element.CollApprPerc}}</td>
                    </ng-container>
                    <ng-container matColumnDef="DelvPerc">
                        <th mat-header-cell *matHeaderCellDef> Delv</th>
                        <td mat-cell *matCellDef="let element" matTooltip="{{element.DelvNum}}/{{element.DelvDenom}}">{{element.DelvPerc}}</td>
                    </ng-container>
                    <ng-container matColumnDef="CommonPerc">
                        <th mat-header-cell *matHeaderCellDef> Cmn</th>
                        <td mat-cell *matCellDef="let element" matTooltip="{{element.CommonNum}}/{{element.CommonDenom}}">{{element.CommonPerc}}</td>
                    </ng-container>

                    <tr mat-header-row *matHeaderRowDef="['Name','Coll','CollApprPerc','DelvPerc','CommonPerc'];sticky: true"></tr>
                    <tr mat-row *matRowDef="let row; columns:['Name','Coll','CollApprPerc','DelvPerc','CommonPerc']"></tr>
                </table>
                <table mat-table [dataSource]="tableData" class="mat-elevation-z8" *ngIf="tableData.length==0">
                    <ng-container matColumnDef="Name">
                        <th mat-header-cell *matHeaderCellDef > Name</th>
                        <td mat-cell *matCellDef="let element" >{{element.Name}}</td>
                    </ng-container>
                    <ng-container matColumnDef="Coll">
                        <th mat-header-cell *matHeaderCellDef> Coll</th>
                        <td mat-cell *matCellDef="let element">{{element.CollPerc}}</td>
                    </ng-container>
                    <ng-container matColumnDef="CollApprPerc">
                        <th mat-header-cell *matHeaderCellDef> A&C</th>
                        <td mat-cell *matCellDef="let element">{{element.CollApprPerc}}</td>
                    </ng-container>
                    <ng-container matColumnDef="DelvPerc">
                        <th mat-header-cell *matHeaderCellDef> Delv</th>
                        <td mat-cell *matCellDef="let element">{{element.DelvPerc}}</td>
                    </ng-container>
                    <ng-container matColumnDef="CommonPerc">
                        <th mat-header-cell *matHeaderCellDef> Cmn</th>
                        <td mat-cell *matCellDef="let element">{{element.CommonPerc}}</td>
                    </ng-container>

                    <tr mat-header-row *matHeaderRowDef="['Name','Coll','CollApprPerc','DelvPerc','CommonPerc'];"></tr>
                    <tr mat-row *matRowDef="let row; columns:['Name','Coll','CollApprPerc','DelvPerc','CommonPerc']"></tr>
                </table>
                <div *ngIf="tableData.length==0" style="text-align: center;">No Data Found</div>
            </div>
        </div>
        
      

    </div>
    <div class="metrics-chart">
      <mat-card style="box-shadow: 0px 2px 3px 2px rgba(0, 0, 0, 0.12), 0px 2px 1px -1px rgba(0, 0, 0, 0.2), 0px 1px 1px 0px rgba(0, 0, 0, 0.14), 0px 1px 3px 0px rgba(0, 0, 0, 0.12);">
        <button mat-raised-button color="primary" style="margin-right: 15px;" (click)="ApplyStoreApprovals()" [disabled]="disableApplyStoreApprovals">Copy Store Approvals</button>
        <button mat-raised-button color="primary" [disabled]="disableImputeStore" (click)="ImputeStores()">Run Imputation</button>
      </mat-card>


      <legend style="padding:0.5em;"><b>Collection</b></legend>
      <div class="chart-container">
        <div class="chart">
          <canvas id="MyChart"></canvas>
        </div>
        <div class="chart">
          <canvas id="MyChart1"></canvas>
        </div>
      </div>

      <legend style="padding:0.5em;margin-top:5px"><b>Status</b></legend>
      <div class="chart-container">
        <div class="chart">
          <canvas id="MyChart2"></canvas>
        </div>
        <div class="chart">
          <canvas id="MyChart3"></canvas>
        </div>
      </div>

    </div>
</div>

<footer>
    <div class="mat-spinner-container">
      <mat-spinner mode="indeterminate" *ngIf="showSpinner"></mat-spinner>
      <div *ngIf="showSpinner" style="position: relative; left: 10px">
        Loading...
      </div>
    </div>
  </footer>
import { DeliverableComponent } from './../deliverable/deliverable.component';
import { Component, Inject, OnInit } from '@angular/core';
import { MatDialog } from '@angular/material/dialog';
import { DashbordComponent } from '../dashbord/dashbord.component';
import { CommonService } from '../shared/common.service';
import { SnackbarService } from '../shared/snackbar.service';
import { distinctUntilChanged, firstValueFrom, Subject, Subscription, takeUntil } from 'rxjs';
import { HttpClient } from '@angular/common/http';
import { AQModel, DeliveryStatus, MetricsData } from '../shared/common.model';
import { FormControl } from '@angular/forms';
import { MatTabChangeEvent } from '@angular/material/tabs';
import * as XLSX from 'xlsx';
import { Chart, registerables, BarController, BarElement, CategoryScale, LinearScale, Tooltip, Legend } from 'chart.js';
Chart.register(...registerables, BarController, BarElement, CategoryScale, LinearScale, Tooltip, Legend);
import ChartDataLabels from 'chartjs-plugin-datalabels';


@Component({
  selector: 'app-audit-quality',
  templateUrl: './audit-quality.component.html',
  styleUrls: ['./audit-quality.component.css'],
})
export class AuditQualityComponent implements OnInit {
  showSpinner: boolean = false;
  private unsubscribe$ = new Subject<void>();
  private subscriptions = new Subscription();
  selectedDeliveryDetails: any[];
  rmaMetricsData:MetricsData;
  modeCtrl= new FormControl('RMA')
  rowCtrl= new FormControl('15')
  territoryCtrl=new FormControl('-1')
  territoryList:any[]=[];
  tableData:any[]=[];
  userId:string
  disableApplyStoreApprovals: boolean = false;
  disableImputeStore: boolean = false;

  config: any;
  chart: any = [];
  charts: any
  charts1: any;
  config1: any;
  chart1: any = [];
  charts2: any;
  config2: any;
  chart2: any = [];
  charts3: any;
  config3: any;
  chart3: any = [];
  auditData: any;
  storeMetrics: any;
  approvedColl: any;
  collectedTot = 0;
  notCollTot = 0;
  imputedTot = 0;
  approvedTot = 0;
  droppedTot = 0;
  noStatusTot = 0;

  collected: any;
  imputed: any;
  notColl: any;
  approved: any;
  dropped: any;
  noStatus: any;
  columnHeader: any;
 
  constructor(
    private http: HttpClient,
    @Inject('BASE_URL') private baseUrl: string,
    public service: CommonService,
    private _snackBar: SnackbarService,
    private dashbordcomponent: DashbordComponent,
    private dialog: MatDialog,
    private DeliverableComponent:DeliverableComponent
  ) {  this.userId= localStorage.getItem("loggedUserId")}

  ngOnInit() {
    this.showSpinner = true;
      this.subscriptions.add( this.service.deliverableDetails$.pipe(distinctUntilChanged(),takeUntil(this.unsubscribe$)).    
        subscribe((selectedDeliveryDetails) => { 
          this.selectedDeliveryDetails = selectedDeliveryDetails;          
        }))
       this.disableImputeStore=this.DeliverableComponent.processingPathCtrl.value
        this.subscriptions.add( this.DeliverableComponent.processingPathCtrl.valueChanges.subscribe((x)=>{
            this.disableImputeStore=x;
          }))
        
      this.getTerritory()
      this.getAuditQualityDetails()
      this.getRmaMetricsData()
      this.GetStoreMetrics()
      
      setTimeout(()=>{
        this.showSpinner = true;
      },1000)

      setTimeout(()=>{
        if(this.showSpinner){
          this.showSpinner = false;
        }        
      },3000)
      
  }

  getTerritory() {
    this.showSpinner = true;
    this.http
      .get<any[]>(this.baseUrl + 'api/AuditQuality/GetTerritory').pipe(takeUntil(this.unsubscribe$)).subscribe({
        next: (response) => {
          this.territoryList=response;
          this.showSpinner = false;
        },
        error: (error) => {
          console.error(error);
          this.showSpinner = false;
        },
      });
  }

  getAuditQualityDetails(){
    this.showSpinner = true;
    this.http.post<any[]>(this.baseUrl + 'api/AuditQuality/GetAuditQualityDetails', { DeliveryId: this.selectedDeliveryDetails['DeliveryID'] }).pipe(takeUntil(this.unsubscribe$)).subscribe({
      next:
        (response) => {
          this.showSpinner = false;
        },
      error: (error) => { console.error(error); this.showSpinner = false; },
    });
  }

  getRmaMetricsData(){
    this.showSpinner = true;
    this.tableData=[];
    this.http.post<MetricsData>(this.baseUrl + 'api/AuditQuality/GetRmaMetricsData', { DeliveryId: this.selectedDeliveryDetails['DeliveryID'],Type:this.modeCtrl.value,Count:this.rowCtrl.value,Territory:this.territoryCtrl.value }).pipe(takeUntil(this.unsubscribe$)).subscribe({
      next:
        (response) => {
          this.rmaMetricsData=response;
          this.tableData=this.rmaMetricsData.apprCollList;
          this.showSpinner = false;
        },
      error: (error) => { console.error(error); this.showSpinner = false; },
    });
  }

  GetStoreMetrics(){
    this.showSpinner = true;
    this.http.post<any[]>(this.baseUrl + 'api/AuditQuality/GetStoreMetrics', { DeliveryId: this.selectedDeliveryDetails['DeliveryID'] }).pipe(takeUntil(this.unsubscribe$)).subscribe({
      next:
        (response) => {
          this.storeMetrics = response;
          // console.log(this.storeMetrics);
          this.createStoreChart();
          this.showSpinner = false;
        },
      error: (error) => { console.error(error); this.showSpinner = false; },
    });
  }

  createStoreChart() {
    this.columnHeader = this.storeMetrics.columnHeader.split(",");
    // console.log(this.collected);

    this.collected = this.storeMetrics.collected.split(",");
    // console.log(this.collected);
    this.imputed = this.storeMetrics.imputed.split(",");
    // console.log(this.imputed);
    this.notColl = this.storeMetrics.notCollected.split(",");
    // console.log(this.notColl);

    this.collectedTot = this.collected.reduce((sum, val) => sum + parseInt(val), 0);
    // console.log(this.collectedTot);
    this.imputedTot = this.imputed.reduce((sum, val) => sum + parseInt(val), 0);
    // console.log(this.imputedTot);
    this.notCollTot = this.notColl.reduce((sum, val) => sum + parseInt(val), 0);
    // console.log(this.notCollTot);

    this.approved = this.storeMetrics.approved.split(",");
    // console.log(this.collected);
    this.dropped = this.storeMetrics.dropped.split(",");
    // console.log(this.imputed);
    this.noStatus = this.storeMetrics.noStatus.split(",");
    // console.log(this.notColl);

    this.approvedTot = this.approved.reduce((sum, val) => sum + parseInt(val), 0);
    // console.log(this.approvedTot);
    this.droppedTot = this.dropped.reduce((sum, val) => sum + parseInt(val), 0);
    // console.log(this.droppedTot);
    this.noStatusTot = this.noStatus.reduce((sum, val) => sum + parseInt(val), 0);
    // console.log(this.noStatusTot);

    this.approvedColl = this.storeMetrics.approvedCollected.split(",");
    // console.log(this.approvedColl)


    this.config = {
      type: 'pie',

      data: {
        labels: ['Collected', 'Not Collected', 'Imputed'],
        datasets: [
          {
            //label: 'My First Dataset',
            data: [this.collectedTot, this.notCollTot, this.imputedTot],
            backgroundColor: [
              'skyblue',
              'orange',
              'lightgray'
            ]
          }
        ]
      },

      options: {
        legend: {
          display: false
        },
        aspectRatio: 1,
        indexAxis: 'y',
        maintainAspectRatio: true,
        responsive: true,
        plugins: {
          datalabels: {
            display: (context: any) => context.dataset.data[context.dataIndex] >= 1,
            color: 'black',
            align: 'center',
            anchor: 'center',
            formatter: (value) => value,
            //legend: {
            //  display: false
            //},
          },
        }
      },
      tooltip: {
        callbacks: {
          afterBody: function (tooltipItems) {
            const item = tooltipItems[0];
            const label = item.dataset.label;
            const value = item.raw;
            return `Label: ${label} ,Value:${value}`;
          }
        }
      },
     
      plugins: [ChartDataLabels]
    };

    this.charts = new Chart('MyChart', this.config);







    this.config1 = {
      type: 'bar',

      data: {
        labels: this.columnHeader,
        datasets: [
          { label: "Not Collected", data: this.notColl, backgroundColor: "orange", stack: 'Stack 0' },
          { label: "Collected", data: this.collected, backgroundColor: "skyblue", stack: 'Stack 0' },
          { label: "Imputed", data: this.imputed, backgroundColor: "lightgray", stack: 'Stack 0' },
        ]
      },

      options: {
        aspectRatio: 1,
        maintainAspectRatio: true,
        responsive: true,
        plugins: {
          datalabels: {
            display: (context: any) => context.dataset.data[context.dataIndex] >= 1,
            color: 'black',
            align: 'center',
            anchor: 'center',
          },
        }
      },
      tooltip: {
        callbacks: {
          afterBody: function (tooltipItems) {
            const item = tooltipItems[0];
            const label = item.dataset.label;
            const value = item.raw;
            return `Label: ${label} ,Value:${value}`;
          }
        }
      },
      legend: {
        position: 'bottom',
        onClick: function (event, legendItem) { }
      },
      scales: {
        x: {
          stacked: true,
          beginAtZero: true,
          suggestedMax: 100
        },
        y: {
          stacked: true,

        }
      },
  
    };

    this.charts1 = new Chart('MyChart1', this.config1);







    this.config2 = {
      type: 'pie',

      data: {
        labels: ['Approved', 'Dropped', 'No Status'],
        datasets: [
          {
            //label: 'My First Dataset',
            data: [this.approvedTot, this.droppedTot, this.noStatusTot],
            backgroundColor: [
              'lightgreen',
              'red',
              'lightgray'
            ]
          }
        ]
      },

      options: {
        aspectRatio: 1,
        indexAxis: 'y',
        maintainAspectRatio: true,
        responsive: true,
        plugins: {
          datalabels: {
            display: (context: any) => context.dataset.data[context.dataIndex] >= 1,
            color: 'black',
            align: 'center',
            anchor: 'center',
            formatter: (value) => value,
            legend: {
              display: false
            },
          },
        }
      },
      tooltip: {
        callbacks: {
          afterBody: function (tooltipItems) {
            const item = tooltipItems[0];
            const label = item.dataset.label;
            const value = item.raw;
            return `Label: ${label} ,Value:${value}`;
          }
        }
      },
      //legend: {
      //  display: false
      //},
      plugins:[ChartDataLabels]
    };

    this.charts2 = new Chart('MyChart2', this.config2);






    this.config3 = {
      type: 'bar',

      data: {
        labels: this.columnHeader,
        datasets: [
          {
            type: 'line',
            label: 'Appr & Coll',
            data: this.approvedColl,
            fill: false,
            borderWidth: 1,
            borderColor: 'black'
          },
          {
            type: 'bar',
            label: 'Approved',
            data: this.approved,
            backgroundColor: "lightgreen",
            stack: 'Stack 0'
          },
          {
            type: 'bar',
            label: 'Dropped',
            data: this.dropped,
            backgroundColor: "red",
            stack: 'Stack 0'
          },
          {
            type: 'bar',
            label: 'No Status',
            data: this.noStatus,
            backgroundColor: "lightgray",
            stack: 'Stack 0'
          }
        ]

      },

      options: {
        aspectRatio: 1,
        maintainAspectRatio: true,
        responsive: true,
        plugins: {
          datalabels: {
            display: (context: any) => context.dataset.data[context.dataIndex] >= 1,
            color: 'black',
            align: 'center',
            anchor: 'center',
          },
        }
      },
      tooltip: {
        callbacks: {
          afterBody: function (tooltipItems) {
            const item = tooltipItems[0];
            const label = item.dataset.label;
            const value = item.raw;
            return `Label: ${label} ,Value:${value}`;
          }
        }
      },
      legend: {
        position: 'bottom'
      },
      scales: {
        x: {
          stacked: true,
          beginAtZero: true,
          suggestedMax: 100
        },
        y: {
          stacked: true,

        }
      },
 
    };

    this.charts3 = new Chart('MyChart3', this.config3);
  }

  OnTabSelection(event:MatTabChangeEvent){
    if(event.index==0){
      this.modeCtrl.setValue("RMA")
    }else if(event.index==1){
      this.modeCtrl.setValue("TERRITORY")
    }else if(event.index==2){
      this.modeCtrl.setValue("CHAIN")
    }
    this.getRmaMetricsData()
  }

  openAq(row,event){
    event.preventDefault()
    event.stopPropagation()
    if(this.modeCtrl.value=="RMA"){
      window.open(`http://isgiiswt02.iricommercial.com/trending/home/${this.selectedDeliveryDetails['DeliveryID']}/rma/${row.Number}|${row.Name}`,'_blank')
    }else if(this.modeCtrl.value=="TERRITORY"){
      window.open(`http://isgiiswt02.iricommercial.com/trending/home/${this.selectedDeliveryDetails['DeliveryID']}/store/${row.Number}`,'_blank')
    }else if(this.modeCtrl.value=="CHAIN"){
    }
  }
  exportRMAView(){
    this.http.post<any>(this.baseUrl + 'api/AuditQuality/ExportStoreRmaMetrics',{DeliveryId:this.selectedDeliveryDetails['DeliveryID'],Type:this.modeCtrl.value}).pipe(takeUntil(this.unsubscribe$)).subscribe( { 
      next: 
      (response) => {  
       if(!response){
        this._snackBar.openSnackBar("No Data Found","warning")
       }
       const workbook:XLSX.WorkBook = XLSX.utils.book_new();
       const sheetNames = ['RMA Report']
       const dataSets=[response.ds1]
       dataSets.forEach((dataSets,index)=>{
        if(dataSets){
          const worksheet:XLSX.WorkSheet=XLSX.utils.json_to_sheet(dataSets);
          XLSX.utils.book_append_sheet(workbook,worksheet,sheetNames[index])
        }
       })
       XLSX.writeFile(workbook,`RMA_EXPORT_${this.selectedDeliveryDetails['DeliveryID']}.xlsx`)
        this.showSpinner = false;
       },
       error: 
       (error) => { console.error(error); this.showSpinner= false },
      });      
  }

  exportTerritoryView(){
    this.http.post<any>(this.baseUrl + 'api/AuditQuality/ExportStoreTerrMetrics',{DeliveryId:this.selectedDeliveryDetails['DeliveryID'],Type:this.modeCtrl.value}).pipe(takeUntil(this.unsubscribe$)).subscribe( { 
      next: 
      (response) => {  
       if(!response){
        this._snackBar.openSnackBar("No Data Found","warning")
       }
       const workbook:XLSX.WorkBook = XLSX.utils.book_new();
       const sheetNames = ['Summary','Store']
       const dataSets=[response.ds1,response.ds2]
       dataSets.forEach((dataSets,index)=>{
        if(dataSets){
          const worksheet:XLSX.WorkSheet=XLSX.utils.json_to_sheet(dataSets);
          XLSX.utils.book_append_sheet(workbook,worksheet,sheetNames[index])
        }
       })
       XLSX.writeFile(workbook,`TERRITORY_Export_${this.selectedDeliveryDetails['DeliveryID']}.xlsx`)
        this.showSpinner = false;
       },
       error: 
       (error) => { console.error(error); this.showSpinner= false },
      }); 
  }

  private async GetDeliveryStatus(): Promise<any> {
    return await firstValueFrom(this.http.post<AQModel[]>(this.baseUrl + 'api/Deliverable/GetDeliverableStatus', {deliveryId:this.selectedDeliveryDetails['DeliveryID']}));
  }

  async ApplyStoreApprovals() {       
    if(this.disableApplyStoreApprovals){return}; 
    this.showSpinner =true   
    this.service.MenuAccessGroup().subscribe(async res => {
      this.disableApplyStoreApprovals = !res;
      this.disableImputeStore = !res;
      if(res){
        this.showSpinner= true
        let deliveryStatus = new DeliveryStatus;
        const data = await this.GetDeliveryStatus();
        data.forEach(function (item) {
          if (item.viewValue == "TRENDING_SIGNOFF") {
            deliveryStatus.trendingSignoff = item.value == "1" ? true : false;
          } else if (item.viewValue == "TRENDING_COMPLETE") {
            deliveryStatus.trendingComplete = item.value == "1" ? true : false;
          } else if (item.viewValue == "AQ_REFRESH_RUNNING") {
            deliveryStatus.aqRefreshRunning = item.value == "1" ? true : false;
          }else if (item.viewValue == "IMPUTATION_RUNNING") {
            deliveryStatus.imputationRunning = item.value == "1" ? true : false;
          }else if (item.viewValue == "AUDIT_IMPUTATION_REQUIRED") {
            deliveryStatus.auditImputationRequired = item.value == "1" ? true : false;
          }else if (item.viewValue == "STORE_APPR_COPY_AUTOAPPLY") {
            deliveryStatus.storeApprCopyAutoapply = item.value == "1" ? true : false;
          } else if (item.viewValue == "COPY_STORE_APPROVAL") {
            deliveryStatus.copyStoreApprovals = item.value == "1" ? true : false;
          } else if (item.viewValue == "IMPUTATION_COMPLETE") {
            deliveryStatus.imputationComplete = item.value == "1" ? true : false;
          }else if (item.viewValue == "FILE_DELIVERED") {
            deliveryStatus.fileDelivered = item.value == "1" ? true : false;
          }else if (item.viewValue == "COLLECTION_MODE") {
            deliveryStatus.collectionMode = item.value;
          }  else if (item.viewValue == "DELIVERY_STATUS") {
            deliveryStatus.deliveryStatus = item.value;
          } else if (item.viewValue == "DELIVERY_TYPE") {
            deliveryStatus.deliveryType = item.value;
          }
        });
      
        if(deliveryStatus.trendingSignoff  ||  
          !deliveryStatus.trendingComplete || 
          deliveryStatus.aqRefreshRunning  ||  
          deliveryStatus.imputationRunning || 
          !deliveryStatus.auditImputationRequired || 
          !deliveryStatus.copyStoreApprovals || 
          deliveryStatus.imputationComplete  || 
          deliveryStatus.fileDelivered ||   
          deliveryStatus.collectionMode  != "3" ||  
          deliveryStatus.deliveryStatus != "8"  || 
          deliveryStatus.deliveryType != "DET-Shelf"){  
          this._snackBar.openSnackBar("This action is currenly not allowed. It is likely that the store approval process is currently running. Please check back in about 30 mins!", "error");            
          this.showSpinner =false
        }else{
          if (confirm("Store Approvals will be applied. Would you like to continue?" )){
            this.disableApplyStoreApprovals = true;
            this.showSpinner = true;
            this.http.post<string>(this.baseUrl + 'api/AuditQuality/RefreshQualityReport', {deliveryId:this.selectedDeliveryDetails['DeliveryID'],ProcessId:"APPR",UserId:this.userId}).pipe(takeUntil(this.unsubscribe$)).subscribe({
              next:
              (response) => {
                if (response == "SUCCESS") {                  
                  this._snackBar.openSnackBar('Stores have been submitted for approval.','success')
                }else {
                this._snackBar.openSnackBar(`Store Approvals update was unsuccessful due to below reason:-\n + ${response}`,'error');
                }              
              this.disableApplyStoreApprovals = false;                
              this.showSpinner = false;
              },
            error: (error) => { console.error(error); this.showSpinner = false; },
            });          
          }
        }
      }else{
        this._snackBar.openSnackBar("You do not have access!", "error")
        this.showSpinner =false
      }
    }) 
  }

  async ImputeStores() {
    if(this.disableImputeStore){return};     
    this.showSpinner =true 
    this.service.MenuAccessGroup().subscribe(async res => {
      this.disableApplyStoreApprovals = !res;
      this.disableImputeStore = !res;
      if(res){
        this.showSpinner= true
        let deliveryStatus = new DeliveryStatus;
        const data = await this.GetDeliveryStatus();
        data.forEach(function (item) {
          if (item.viewValue == "AQ_REFRESH_RUNNING") {
            deliveryStatus.aqRefreshRunning = item.value == "1" ? true : false;
          }
          else if (item.viewValue == "AUDIT_IMPUTATION_REQUIRED") {
            deliveryStatus.auditImputationRequired = item.value == "1" ? true : false;
          }
          else if (item.viewValue == "IMPUTATION_RUNNING") {
            deliveryStatus.imputationRunning = item.value == "1" ? true : false;
          }
          else if (item.viewValue == "TRENDING_COMPLETE") {
            deliveryStatus.trendingComplete = item.value == "1" ? true : false;
          }
          else if (item.viewValue == "TRENDING_SIGNOFF") {
            deliveryStatus.trendingSignoff = item.value == "1" ? true : false;
          }
          else if (item.viewValue == "DELIVERY_STATUS") {
            deliveryStatus.deliveryStatus = item.value;
          }
          else if (item.viewValue == "COLLECTION_MODE") {
            deliveryStatus.collectionMode = item.value;
          }else if (item.viewValue== "IMPUTATION_COMPLETE"){
            deliveryStatus.imputationComplete = item.value == "1" ? true : false;
          }
        });
      
        if (deliveryStatus.trendingSignoff || 
            !deliveryStatus.trendingComplete || 
            deliveryStatus.aqRefreshRunning || 
            deliveryStatus.imputationRunning || 
            !deliveryStatus.auditImputationRequired || 
            deliveryStatus.collectionMode != "3" || 
            deliveryStatus.deliveryStatus != "8" || 
            deliveryStatus.imputationComplete) {
          this._snackBar.openSnackBar("This action is currently not allowed, Please check the deliverable status!", "error");            
          this.showSpinner =false
        }else{
          if (confirm("Any stores previously imputed will be deleted, and imputations run based on the current list of User or System approved stores. Would you like to continue?" )){
            this.disableImputeStore = true;
            this.showSpinner = true;
            this.http.post<string>(this.baseUrl + 'api/AuditQuality/RefreshQualityReport', {deliveryId:this.selectedDeliveryDetails['DeliveryID'],ProcessId:"AIR",UserId:this.userId}).pipe(takeUntil(this.unsubscribe$)).subscribe({
              next:
              (response) => {
                if (response == "SUCCESS") {                  
                  this._snackBar.openSnackBar('Stores have been submitted for approval.','success')
                }else {
                this._snackBar.openSnackBar(`Store Approvals update was unsuccessful due to below reason:-\n + ${response}`,'error');
                }              
              this.disableImputeStore = false;                
              this.showSpinner = false;
              },
            error: (error) => { console.error(error); this.showSpinner = false; },
            });          
          }
        }
      }else{
        this._snackBar.openSnackBar("You do not have access!", "error")
        this.showSpinner =false;
      }
    }) 
  }

  exportFieldRMA(){
 
     this.http.post<any>(this.baseUrl + 'api/AuditQuality/GetFieldRam',{DeliveryId:this.selectedDeliveryDetails['DeliveryID']}).pipe(takeUntil(this.unsubscribe$)).subscribe( { 
      next: 
      (response) => {  
        const dt1 = response.dt1;
         const dt2 = response.dt2;
        if(dt1.length==0&&dt2.length==0){
          this._snackBar.openSnackBar("No Data Found","warning");
          return;
        }


        
       if(dt1){
        let  headerrow:string[] =  Object.keys(dt1[0])
        headerrow = headerrow.filter(key=>key!=='rma_name' &&key!=='grand_total')
        headerrow = ['rma_name',...headerrow,'grand_total']
        const today = new Date()
        const converter = this.service.praseToJSON(dt1,headerrow,",");
         this.service.exportFile2(converter, "text/csv", `${this.selectedDeliveryDetails['DeliveryID']}_${this.selectedDeliveryDetails['DeliveryName']}_${today.getFullYear()}_${today.getMonth()+1}_${today.getDate()}_Rma_Territory_map`); 
       }else{
        this._snackBar.openSnackBar("No Data Found","warning")
        return
       }

           
       if(dt2){
        let  headerrow:string[] =  Object.keys(dt2[0])
        // headerrow = headerrow.filter(key=>key!=='rma_name' &&key!=='grand_total')
        // headerrow = ['rma_name',...headerrow,'grand_total']
        const today = new Date()
        const converter = this.service.praseToJSON(dt2,headerrow,",");
         this.service.exportFile2(converter, "text/csv", `${this.selectedDeliveryDetails['DeliveryID']}_${this.selectedDeliveryDetails['DeliveryName']}_Rma_Territory_store`); 
       }else{
        this._snackBar.openSnackBar("No Data Found","warning")
        return
       }

       },
       error: 
       (error) => { console.error(error); this.showSpinner= false },
      });      
  }
  

  ngOnDestroy() {  
    if(this.subscriptions){
      this.subscriptions.unsubscribe();
    }
  }

}


I just noticed that our one-on-one meeting, which I had requested to be rescheduled for today (Aug 6) due to yesterday's production issue, is currently set for tomorrow (Aug 7) on my calendar.

If possible, could we please reschedule it for today instead? I‚Äôm available and would appreciate the chance to connect as originally intended.

Please let me know if that works for you.
