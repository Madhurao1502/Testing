<ng-container matColumnDef="QCUnderPercent">
          <th mat-header-cell *matHeaderCellDef>Pass/Fail%</th>
          <td mat-cell *matCellDef="let category">
            <mat-form-field appearance="outline" class="percent-input">
              <input matInput
                     type="number" 
                     [value]="getPercent(category)"
                     [disabled]="isPercentDisabled(category)"
                     (change)="onPercentChanged(category, $event.target.value)"
                     (keypress)="onNumberInput($event)"
                     maxlength="2">
            </mat-form-field>
          </td>
        </ng-container>

 (change)="onPercentChanged(category, $event.target.value)"

Property 'value' does not exist on type 'EventTarget'.ngtsc(2339)
category-grid.component.ts(12, 8): Error occurs in the template of component CategoryGridComponent.

<div class="tree-container">
  <app-shelf-task-tree
    [nodes]="nodes"
    [options]="treeOptions"
    (activate)="onNodeActivate($event)"
    (toggleCheckbox)="onNodeCheck($event)">
    <ng-template #treeNodeTemplate let-node let-index="index">
      <div class="tree-node-content">
        <!-- Checkbox (controlled by Angular, not Tree's default ckb) -->
        <input
          type="checkbox"
          [checked]="node.data.checked"
          [disabled]="node.data.disabled || disabled"
          (change)="onNodeCheckDirect(node)"
          class="node-checkbox"
        >

        <!-- Node Name -->
        <span class="node-name" [class.disabled]="node.data.disabled || disabled" (click)="onNodeActivateDirect(node)">
          {{ node.data.name }}
        </span>

        <!-- Select All Children Action -->
        <button
          *ngIf="node.data.children?.length && !disabled && !node.data.disabled"
          mat-button
          class="select-all-btn"
          (click)="onSelectAllChildren(node.data); $event.stopPropagation()"
        >
          <b>(Select all Child variables)</b>
        </button>

        <!-- Custom Input for Other Section Width -->
        <div *ngIf="isOtherSectionWidth(node.data) && node.data.checked" class="custom-input-container">
          <mat-form-field appearance="outline" class="custom-input">
            <mat-label>Min</mat-label>
            <input
              matInput
              type="number"
              [value]="node.data.taskMin"
              (input)="onCustomInputChange(node.data, 'taskMin', $event.target.value)"
              [disabled]="disabled"
              [min]="node.data.mainMin"
              [max]="node.data.mainMax"
            >
          </mat-form-field>
          <mat-form-field appearance="outline" class="custom-input">
            <mat-label>Max</mat-label>
            <input
              matInput
              type="number"
              [value]="node.data.taskMax"
              (input)="onCustomInputChange(node.data, 'taskMax', $event.target.value)"
              [disabled]="disabled"
              [min]="node.data.mainMin"
              [max]="node.data.mainMax"
            >
          </mat-form-field>
        </div>

        <!-- Custom Input for Other Height -->
        <div *ngIf="isOtherHeight(node.data) && node.data.checked" class="custom-input-container">
          <mat-form-field appearance="outline" class="custom-input">
            <mat-label>Min</mat-label>
            <input
              matInput
              type="number"
              [value]="node.data.taskMin"
              (input)="onCustomInputChange(node.data, 'taskMin', $event.target.value)"
              [disabled]="disabled"
              [min]="node.data.mainMin"
              [max]="node.data.mainMax"
            >
          </mat-form-field>
          <mat-form-field appearance="outline" class="custom-input">
            <mat-label>Max</mat-label>
            <input
              matInput
              type="number"
              [value]="node.data.taskMax"
              (input)="onCustomInputChange(node.data, 'taskMax', $event.target.value)"
              [disabled]="disabled"
              [min]="node.data.mainMin"
              [max]="node.data.mainMax"
            >
          </mat-form-field>
        </div>
      </div>
    </ng-template>
  </app-shelf-task-tree>
</div>

import { Component, OnInit, OnDestroy, Inject, Input } from '@angular/core';
import { FormBuilder, FormGroup, Validators, AbstractControl } from '@angular/forms';
import { forkJoin, Subject, takeUntil } from 'rxjs';
import { HttpClient } from '@angular/common/http';
import { MatDialog } from '@angular/material/dialog';
import { CommonService } from '../shared/common.service';
import { SnackbarService } from '../shared/snackbar.service';
import { Router, ActivatedRoute } from '@angular/router';
import { ReviewCategory, ShelfNode, TaskShelfVar } from '../shared/common.model';


@Component({
  selector: 'app-shelf-task',
  templateUrl: './shelf-task.component.html',
  styleUrls: ['./shelf-task.component.css']
})
export class ShelfTaskComponent implements OnInit, OnDestroy {
  private destroy$ = new Subject<void>();

  // Tree data
  locationTree: ShelfNode[] = [];
  sectionTree: ShelfNode[] = [];
  shelfTree: ShelfNode[] = [];
  upcTree: ShelfNode[] = [];

  // Review categories
  reviewCategories: ReviewCategory[] = [];
  selectedReviewCategories: ReviewCategory[] = [];

  // UI state
  activeTab: string = 'location';
  activeNode: ShelfNode | null = null;
  showLimitsPanel: boolean = false;
  showChecksPanel: boolean = false;
  isTaskLocked: boolean = false;
  currActiveTab: string = 'trLocation';

  // Active section/shelf min/max tracking
  activeSectionMinMax: number | null = null;
  activeShelfMinMax: number | null = null;

  // Forms
  limitsForm: FormGroup;

  loggedUser: string;
  @Input() taskId!: number;
  @Input() taskVersion!: string;
  @Input() lockoutId!: string;
  

  constructor(public http: HttpClient,
      @Inject('BASE_URL') public baseUrl: string,
      private router: Router,
       private fb: FormBuilder,
      private activatedRoute: ActivatedRoute,
      private dialog: MatDialog,
      public service: CommonService,
      private _snackBar: SnackbarService) { this.loggedUser = localStorage.getItem('loggedUserId'); 
      this.limitsForm = this.fb.group({
      min: ['', [Validators.pattern(/^\d+$/)]],
      max: ['', [Validators.pattern(/^\d+$/)]],
      soft: ['', [Validators.pattern(/^\d+$/)]],
      hard: ['', [Validators.pattern(/^\d+$/)]]
    });
     }

  ngOnInit() {
    // Initialize with sample data (replace with actual initialization)
    this.initializeTask(this.taskId, this.taskVersion, this.lockoutId, this.loggedUser);
    
     this.subscribeToDataStreams();
    this.loadInitialData();
    this.setupFormValidation();
  }

  ngOnDestroy() {
    this.destroy$.next();
    this.destroy$.complete();
  }

  private initializeTask(taskId: number, taskVersion: string, lockoutId: string, currentUser: string) {
    this.service.initializeTask(taskId, taskVersion, lockoutId, currentUser);
    this.isTaskLocked = this.service.isTaskLocked();
  }

  private subscribeToDataStreams() {
    // Subscribe to tree data
    this.service.locationTree$
      .pipe(takeUntil(this.destroy$))
      .subscribe(data => this.locationTree = data);

    this.service.sectionTree$
      .pipe(takeUntil(this.destroy$))
      .subscribe(data => this.sectionTree = data);

    this.service.shelfTree$
      .pipe(takeUntil(this.destroy$))
      .subscribe(data => this.shelfTree = data);

    this.service.upcTree$
      .pipe(takeUntil(this.destroy$))
      .subscribe(data => this.upcTree = data);

    // Subscribe to review categories
    this.service.reviewCategories$
      .pipe(takeUntil(this.destroy$))
      .subscribe(data => this.reviewCategories = data);

    this.service.selectedReviewCategories$
      .pipe(takeUntil(this.destroy$))
      .subscribe(data => this.selectedReviewCategories = data);
  }

  private loadInitialData() {
    // Load all tree data
    this.service.loadAllTreeData();

    // Load review categories
    this.service.loadReviewCategories().subscribe(result => {
      this.service.updateReviewCategories(result.ReviewCategories);
      this.service.updateSelectedReviewCategories(result.CollectionCategories);
    });

    // Set initial active tab
    this.onTabChange('location');
  }

  private setupFormValidation() {
    // Setup real-time validation
    this.limitsForm.valueChanges.pipe(takeUntil(this.destroy$)).subscribe(() => {
      if (this.activeNode) {
        this.validateAndUpdateNode();
      }
    });
  }

  onTabChange(tabName: string) {
    this.activeTab = tabName;
    this.currActiveTab = `tr${tabName.charAt(0).toUpperCase() + tabName.slice(1)}`;
    
    // Reset active node and panels
    this.activeNode = null;
    this.hideAllPanels();

    // Set default node selection based on tab
    setTimeout(() => {
      this.selectDefaultNode(tabName);
    }, 100);
  }

  private selectDefaultNode(tabName: string) {
    let tree: ShelfNode[] = [];
    
    switch(tabName) {
      case 'location': tree = this.locationTree; break;
      case 'section': tree = this.sectionTree; break;
      case 'shelf': tree = this.shelfTree; break;
      case 'upc': tree = this.upcTree; break;
    }

    if (tree.length > 0) {
      const rootNode = tree[0];
      this.onNodeSelect(rootNode);
    }
  }

  onNodeSelect(node: ShelfNode) {
    this.activeNode = node;
    this.showHideVarDiv(node);
  }

  onNodeCheck(node: ShelfNode) {
    if (node.disabled) return;

    node.checked = !node.checked;
    
    // Handle special logic for specific nodes
    this.handleSpecialNodeLogic(node);
    
    // Update tree
    this.updateTreeData();
    
    // Show/hide panels
    this.showHideVarDiv(node);
  }

  private handleSpecialNodeLogic(node: ShelfNode) {
    // Handle Section tab special logic (nodes 11930, 11960)
    if ((node.id === 11930 || node.id === 11960) && this.activeTab === 'section') {
      const sectionTree = this.sectionTree;
      const node1 = this.findNodeById(sectionTree, 11930);
      const node2 = this.findNodeById(sectionTree, 11960);
      
      if (node1 && node2 && !node1.checked && !node2.checked) {
        node.checked = true;
      }
    }

    // Handle parent-child relationships
    if (node.children && node.checked) {
      this.checkAllChildren(node);
    }
  }

  private findNodeById(nodes: ShelfNode[], id: number): ShelfNode | null {
    for (let node of nodes) {
      if (node.id === id) return node;
      if (node.children) {
        const found = this.findNodeById(node.children, id);
        if (found) return found;
      }
    }
    return null;
  }

  private showHideVarDiv(treeNode: ShelfNode) {
    // Reset all panels first
    this.hideAllPanels();
    this.resetActiveSectionShelf();

    // Handle specific node types
    if (this.isShelfHeightNode(treeNode)) {
      this.showLimitsPanel = true;
      this.populateLimitsForm(treeNode);
      this.activeShelfMinMax = treeNode.id;
      return;
    }

    if (this.isSectionWidthNode(treeNode)) {
      this.showLimitsPanel = true;
      this.populateLimitsForm(treeNode);
      this.activeSectionMinMax = treeNode.id;
      return;
    }

    if (this.isMainVariableNode(treeNode)) {
      this.showLimitsPanel = true;
      this.showChecksPanel = true;
      this.populateFullForm(treeNode);
    }
  }

  private isShelfHeightNode(node: ShelfNode): boolean {
    return node.id === 22700; // Other Height in Shelf
  }

  private isSectionWidthNode(node: ShelfNode): boolean {
    const sectionWidthIds = [11160, 14825, 15995, 15490, 16910];
    return sectionWidthIds.includes(node.id);
  }

  private isMainVariableNode(node: ShelfNode): boolean {
    const mainVarIds = [200, 10100, 20000, 30100];
    return mainVarIds.includes(node.id);
  }

  private populateLimitsForm(node: ShelfNode) {
    this.limitsForm.patchValue({
      min: (node.taskMin || node.mainMin || '').toString(),
      max: (node.taskMax || node.mainMax || '').toString(),
      soft: '',
      hard: ''
    }, { emitEvent: false });
  }

  private populateFullForm(node: ShelfNode) {
    this.limitsForm.patchValue({
      min: (node.taskMin || node.mainMin || '').toString(),
      max: (node.taskMax || node.mainMax || '').toString(),
      soft: (node.task_soft_check || node.main_soft_check || '').toString(),
      hard: (node.task_hard_check || node.main_hard_check || '').toString()
    }, { emitEvent: false });
  }

  private hideAllPanels() {
    this.showLimitsPanel = false;
    this.showChecksPanel = false;
  }

  private resetActiveSectionShelf() {
    this.activeSectionMinMax = null;
    this.activeShelfMinMax = null;
  }

  private validateAndUpdateNode() {
    if (!this.activeNode || !this.limitsForm.valid) return;

    const formValues = this.limitsForm.value;
    
    // Validate based on current context
    if (this.currActiveTab === 'trShelf' && this.activeShelfMinMax) {
      if (!this.validateShelfLimits(formValues)) return;
    } else if (this.currActiveTab === 'trSection' && this.activeSectionMinMax) {
      if (!this.validateSectionLimits(formValues)) return;
    } else {
      if (!this.validateGeneralLimits(formValues)) return;
    }

    // Update the active node
    this.updateNodeValues(this.activeNode, formValues);
    this.updateTreeData();
  }

  private validateShelfLimits(values: any): boolean {
    const min = parseInt(values.min, 10);
    const max = parseInt(values.max, 10);

    if (!isNaN(min)) {
      const minVal = this.getMinMaxValueForShelf(1);
      if (min > minVal) {
        alert('The value for Min must be less than the smallest selected width variable');
        this.resetFormValue('min');
        return false;
      }
    }

    if (!isNaN(max)) {
      if (max === 0) {
        alert('A value is required for Max');
        this.resetFormValue('max');
        return false;
      }
      const maxVal = this.getMinMaxValueForShelf(2);
      if (max < maxVal) {
        alert('The value of Max must be greater than the largest selected width variable');
        this.resetFormValue('max');
        return false;
      }
    }

    return true;
  }

  private validateSectionLimits(values: any): boolean {
    const min = parseInt(values.min, 10);
    const max = parseInt(values.max, 10);

    if (!isNaN(min)) {
      const minVal = this.getMinMaxValueOfSection(1);
      if (min > minVal && minVal !== -1) {
        alert('The value for Min must be less than the smallest selected width variable');
        this.resetFormValue('min');
        return false;
      }
    }

    if (!isNaN(max)) {
      if (max === 0) {
        alert('A value is required for Max');
        this.resetFormValue('max');
        return false;
      }
      const maxVal = this.getMinMaxValueOfSection(2);
      if (max < maxVal && maxVal !== -1) {
        alert('The value of Max must be greater than the largest selected width variable');
        this.resetFormValue('max');
        return false;
      }
    }

    return true;
  }

  private validateGeneralLimits(values: any): boolean {
    const min = parseInt(values.min, 10) || 0;
    const soft = parseInt(values.soft, 10) || 0;
    const hard = parseInt(values.hard, 10) || 0;
    const max = parseInt(values.max, 10) || 0;

    if (soft > 0 && soft < min) {
      alert("'Soft Check' must be greater than or equal to the Min Limit");
      this.resetFormValue('soft');
      return false;
    }

    if (hard > 0 && hard < (soft + 3)) {
      alert("The value for 'Hard Check' must be at least 3 greater than the value of 'Soft Check'");
      this.resetFormValue('hard');
      return false;
    }

    if (this.currActiveTab === 'trLocation' && hard > max) {
      alert("Max Limit must be greater than the Hard Check");
      this.resetFormValue('hard');
      return false;
    }

    return true;
  }

  private getMinMaxValueForShelf(type: 1 | 2): number {
    const shelfTree = this.shelfTree;
    const values: number[] = [];

    this.collectHeightValues(shelfTree, values);

    if (values.length === 0) return type === 1 ? 0 : 999;
    
    return type === 1 ? Math.min(...values) : Math.max(...values);
  }

  private collectHeightValues(nodes: ShelfNode[], values: number[]) {
    nodes.forEach(node => {
      if (node.name === 'Height' && node.children) {
        node.children.forEach(child => {
          if (child.checked && child.name !== 'Other Height' && child.value) {
            values.push(child.value);
          }
        });
      }
      if (node.children) {
        this.collectHeightValues(node.children, values);
      }
    });
  }

  private getMinMaxValueOfSection(type: 1 | 2): number {
    const sectionTree = this.sectionTree;
    let parentNode: ShelfNode | null = null;

    // Find the correct parent node based on activeSectionMinMax
    if (this.activeSectionMinMax === 11160) {
      parentNode = this.findNodeById(sectionTree, 10210); // Section Width under Presence of Section
    } else if (this.activeSectionMinMax === 15490) {
      parentNode = this.findNodeById(sectionTree, 15000); // Coffin Section Width
    } else if (this.activeSectionMinMax === 15995) {
      parentNode = this.findNodeById(sectionTree, 15500); // Upright Section Width
    } else if (this.activeSectionMinMax === 14825) {
      parentNode = this.findNodeById(sectionTree, 14000); // Shelf Section Width
    } else if (this.activeSectionMinMax === 16910) {
      parentNode = this.findNodeById(sectionTree, 16500); // Section Depth
    }

    if (!parentNode || !parentNode.children) return -1;

    const values: number[] = [];
    parentNode.children.forEach(child => {
      if (child.checked && 
          child.name !== 'Other Section Width' && 
          child.name !== 'Other Section Depth' && 
          child.value) {
        values.push(child.value);
      }
    });

    if (values.length === 0) return -1;
    
    return type === 1 ? Math.min(...values) : Math.max(...values);
  }

  private updateNodeValues(node: ShelfNode, values: any) {
    node.taskMin = values.min || node.taskMin;
    node.taskMax = values.max || node.taskMax;
    node.task_soft_check = values.soft || node.task_soft_check;
    node.task_hard_check = values.hard || node.task_hard_check;
  }

  private resetFormValue(field: string) {
    if (!this.activeNode) return;

    const currentValue = this.getCurrentNodeValue(this.activeNode, field);
    this.limitsForm.patchValue({ [field]: currentValue }, { emitEvent: false });
  }

  private getCurrentNodeValue(node: ShelfNode, field: string): string {
    switch (field) {
      case 'min': return (node.taskMin || node.mainMin || '').toString();
      case 'max': return (node.taskMax || node.mainMax || '').toString();
      case 'soft': return (node.task_soft_check || node.main_soft_check || '').toString();
      case 'hard': return (node.task_hard_check || node.main_hard_check || '').toString();
      default: return '';
    }
  }

  private updateTreeData() {
    // Update the appropriate tree based on current tab
    switch (this.activeTab) {
      case 'location':
        this.service.updateLocationTree([...this.locationTree]);
        break;
      case 'section':
        this.service.updateSectionTree([...this.sectionTree]);
        break;
      case 'shelf':
        this.service.updateShelfTree([...this.shelfTree]);
        break;
      case 'upc':
        this.service.updateUpcTree([...this.upcTree]);
        break;
    }
  }

  checkAllChildren(node: ShelfNode) {
    if (!node.children || this.isTaskLocked) return;

    node.checked = true;
    node.children.forEach(child => {
      if (!child.disabled) {
        child.checked = true;
      }
    });

    this.updateTreeData();
  }

  // Save functionality
  saveShelfData() {
    if (!this.validateShelfData()) return;

    const taskShelfVarObj: TaskShelfVar[] = [];
    
    // Populate from all trees
    this.populateShelfVarObject(taskShelfVarObj, this.locationTree);
    this.populateShelfVarObject(taskShelfVarObj, this.sectionTree);
    this.populateShelfVarObject(taskShelfVarObj, this.shelfTree);
    this.populateShelfVarObject(taskShelfVarObj, this.upcTree);

    const shelfVarData = JSON.stringify(taskShelfVarObj);

    this.service.saveShelfVarDetails(shelfVarData).subscribe({
      next: (result) => {
        console.log('Shelf data saved successfully', result);
        this.saveReviewCategoryDetails();
      },
      error: (error) => {
        console.error('Error saving shelf data', error);
        alert('Error occurred while saving shelf data.');
      }
    });
  }

  private validateShelfData(): boolean {
    // Check that at least one location is selected
    const checkedLocationCount = this.countCheckedNodes(this.locationTree);
    
    if (checkedLocationCount === 0) {
      alert('Please select at least one Location!');
      return false;
    }

    return true;
  }

  private countCheckedNodes(nodes: ShelfNode[]): number {
    let count = 0;
    nodes.forEach(node => {
      if (node.checked) count++;
      if (node.children) {
        count += this.countCheckedNodes(node.children);
      }
    });
    return count;
  }

  private populateShelfVarObject(taskShelfVarObj: TaskShelfVar[], nodes: ShelfNode[]) {
    nodes.forEach(node => {
      if (node.checked) {
        const shelfVar: TaskShelfVar = {
          task_number: 8946, // This should come from service
          prompt_level: 0,
          ShelfVarID: node.id,
          min: node.taskMin,
          max: node.taskMax,
          soft_check: node.task_soft_check,
          hard_check: node.task_hard_check,
          ordinal: node.mainOrdinal,
          name: node.name
        };
        taskShelfVarObj.push(shelfVar);
      }

      if (node.children) {
        this.populateShelfVarObject(taskShelfVarObj, node.children);
      }
    });
  }

  private saveReviewCategoryDetails() {
    const reviewCats = JSON.stringify(this.selectedReviewCategories);
    
    this.service.saveReviewCategoryDetails(reviewCats).subscribe({
      next: (result) => {
        console.log('Review categories saved successfully', result);
        alert('Shelf data saved successfully!');
      },
      error: (error) => {
        console.error('Error saving review categories', error);
        alert('Error occurred while saving collection categories data for shelf.');
      }
    });
  }

  // Review category methods
  onReviewCategoryChange(category: ReviewCategory, field: string, value: any) {
    // Update the category
    const index = this.selectedReviewCategories.findIndex(c => 
      c.ReviewCategoryNumber === category.ReviewCategoryNumber);
    
    if (index !== -1) {
      (this.selectedReviewCategories[index] as any)[field] = value;
    } else if (value) {
      // Add new category if it doesn't exist and value is set
      this.selectedReviewCategories.push({
        ...category,
        [field]: value
      });
    }

    this.service.updateSelectedReviewCategories([...this.selectedReviewCategories]);
  }

  // Number-only input handler
  onNumberInput(event: KeyboardEvent): boolean {
    const charCode = event.which ? event.which : event.keyCode;
    if (charCode > 31 && (charCode < 48 || charCode > 57)) {
      return false;
    }
    return true;
  }
}


  Property 'nodes' does not exist on type 'ShelfTaskComponent'.ngtsc(2339)
shelf-task.component.ts(19, 33): Error occurs in the template of component ShelfTaskComponent.

Can't bind to 'options' since it isn't a known property of 'app-shelf-task-tree'.
1. If 'app-shelf-task-tree' is an Angular component and it has 'options' input, then verify that it is part of this module.
2. If 'app-shelf-task-tree' is a Web Component then add 'CUSTOM_ELEMENTS_SCHEMA' to the '@NgModule.schemas' of this component to suppress this message.
3. To allow any property add 'NO_ERRORS_SCHEMA' to the '@NgModule.schemas' of this component.ngtsc(-998002)
shelf-task.component.ts(19, 33): Error occurs in the template of component ShelfTaskComponent.

Property 'onNodeActivate' does not exist on type 'ShelfTaskComponent'.ngtsc(2339)
shelf-task.component.ts(19, 33): Error occurs in the template of component ShelfTaskComponent.

Argument of type 'Event' is not assignable to parameter of type 'ShelfNode'.
  Type 'Event' is missing the following properties from type 'ShelfNode': id, pId, name, checkedngtsc(2345)
shelf-task.component.ts(19, 33): Error occurs in the template of component ShelfTaskComponent.

Property 'disabled' does not exist on type 'ShelfTaskComponent'.ngtsc(2339)
shelf-task.component.ts(19, 33): Error occurs in the template of component ShelfTaskComponent.

Property 'onNodeActivateDirect' does not exist on type 'ShelfTaskComponent'.ngtsc(2339)
shelf-task.component.ts(19, 33): Error occurs in the template of component ShelfTaskComponent.

Property 'onSelectAllChildren' does not exist on type 'ShelfTaskComponent'.ngtsc(2339)
shelf-task.component.ts(19, 33): Error occurs in the template of component ShelfTaskComponent.

Property 'isOtherSectionWidth' does not exist on type 'ShelfTaskComponent'.ngtsc(2339)
shelf-task.component.ts(19, 33): Error occurs in the template of component ShelfTaskComponent.

Property 'onCustomInputChange' does not exist on type 'ShelfTaskComponent'.ngtsc(2339)
shelf-task.component.ts(19, 33): Error occurs in the template of component ShelfTaskComponent.

Property 'onCustomInputChange' does not exist on type 'ShelfTaskComponent'.ngtsc(2339)
shelf-task.component.ts(19, 33): Error occurs in the template of component ShelfTaskComponent.
any

Property 'isOtherHeight' does not exist on type 'ShelfTaskComponent'.ngtsc(2339)
shelf-task.component.ts(19, 33): Error occurs in the template of component ShelfTaskComponent.
any
