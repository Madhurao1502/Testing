createWave(): void {
  const selectedWeeks = this.selection.selected;

  if (selectedWeeks.length < 2) {
    this.errorMessage = "A wave must contain at least 2 weeks.";
    return;
  }

  // Sort selected weeks by their original index in the left grid
  const sortedWeeks = selectedWeeks.sort((a, b) => this.leftGridData.data.indexOf(a) - this.leftGridData.data.indexOf(b));

  // Check if selected weeks are in order
  const indices = sortedWeeks.map(week => this.leftGridData.data.indexOf(week));
  const isOrdered = indices.every((value, index) => index === 0 || value > indices[index - 1]);

  if (!isOrdered) {
    this.errorMessage = "Selected weeks must be in the correct order.";
    return;
  }

  this.errorMessage = '';  // Reset error message
  const startWeek = sortedWeeks[0].startWeek;
  const endWeek = sortedWeeks[sortedWeeks.length - 1].startWeek;

  const maxDueDate = new Date(sortedWeeks[sortedWeeks.length - 1].endDate);
  maxDueDate.setDate(maxDueDate.getDate() + 7);
  const minDueDate = new Date(sortedWeeks[0].startDate);
  minDueDate.setDate(minDueDate.getDate() - 7);

  const formatToDateTimeString = (date: Date): string => {
    const isoString = date.toISOString();
    return isoString.slice(0, 16);  // Extract 'YYYY-MM-DDTHH:MM' portion
  };

  const wave = {
    startWeek: `${startWeek} (${sortedWeeks[0].startDate} - ${sortedWeeks[0].endDate})`,
    endWeek: `${endWeek} (${sortedWeeks[sortedWeeks.length - 1].startDate} - ${sortedWeeks[sortedWeeks.length - 1].endDate})`,
    startDate: sortedWeeks[0].startDate,
    endDate: sortedWeeks[sortedWeeks.length - 1].endDate,
    dueDate: '',
    minDueDate: formatToDateTimeString(minDueDate),
    maxDueDate: formatToDateTimeString(maxDueDate)
  };

  this.rightGridData.data = [...this.rightGridData.data, wave];
  this.leftGridData.data = this.leftGridData.data.filter(item => !this.selection.isSelected(item));
  this.selection.clear();
}
