public abstract class WeekDataBase
    {
        public string IriWeek { get; set; } = "";
        public string FldTerrtynbr { get; set; } = "";
        public string PositionName { get; set; } = "";
        public string Bfd { get; set; } = "";
        public string OutletType { get; set; } = "";
        public string StoreNumber { get; set; } = "";
        public string StoreName { get; set; } = "";
        public string AddrLine1 { get; set; } = "";
        public string CityName { get; set; } = "";
        public string StateCd { get; set; } = "";
        public string ZipCd { get; set; } = "";
        public string EmpId { get; set; } = "";
        public string FirstName { get; set; } = "";
        public string LastName { get; set; } = "";
        public string TaskNumber { get; set; } = "";
        
        // Common computed properties
        public string FullName => $"{LastName}, {FirstName}";
        public string FullAddress => $"{AddrLine1}, {CityName}, {StateCd} {ZipCd}";
        public string AssignedTo => !string.IsNullOrEmpty(FirstName) ? FullName : "Unassigned";
    }

    // Previous Week Data Model
    public class PreviousWeekData : WeekDataBase
    {
        public string TaskCompleted { get; set; } = "";
        public string Quality { get; set; } = "";
        public string CostOver { get; set; } = "";
        public decimal? Wk1FsrProdCost { get; set; }
        public decimal? Wk1StoreTravelCost { get; set; }
        public decimal? Wk1StoreTravelOvgCost { get; set; }
        public decimal? Wk2FsrProdCost { get; set; }
        public decimal? Wk2StoreTravelCost { get; set; }
        public decimal? Wk2StoreTravelOvgCost { get; set; }
        
        // Computed properties specific to previous week
        public decimal TotalWk1Cost => (Wk1FsrProdCost ?? 0) + (Wk1StoreTravelCost ?? 0) + (Wk1StoreTravelOvgCost ?? 0);
        public decimal TotalWk2Cost => (Wk2FsrProdCost ?? 0) + (Wk2StoreTravelCost ?? 0) + (Wk2StoreTravelOvgCost ?? 0);
        public decimal TotalCost => TotalWk1Cost + TotalWk2Cost;
        public string CompletionStatus => TaskCompleted?.ToLower() == "yes" ? "Completed" : "Incomplete";
        public bool IsCompleted => TaskCompleted?.ToLower() == "yes";
        public bool HasIssues => CostOver?.ToLower() == "yes" || Quality?.ToLower() != "good";
    }

    // Future Week Data Model
    public class FutureWeekData : WeekDataBase
    {
        public decimal? AvgCost { get; set; }
        public decimal? GuaranteedMiles { get; set; }
        
        // Computed properties specific to future week
        public string EstimatedCost => AvgCost?.ToString("C") ?? "TBD";
        public string MileageInfo => GuaranteedMiles?.ToString("N1") + " miles" ?? "TBD";
        public string PlanningStatus => !string.IsNullOrEmpty(EmpId) ? "Assigned" : "Planning";
    }

    // Current Week Data Model
    public class CurrentWeekData : WeekDataBase
    {
        public string TaskCompleted { get; set; } = "";
        public string Quality { get; set; } = "";
        public string CostOver { get; set; } = "";
        public decimal? GuaranteedMiles { get; set; }
        
        // Computed properties specific to current week
        public string CurrentStatus => GetCurrentStatus();
        public int CompletionPercentage => GetCompletionPercentage();
        public bool IsInProgress => !string.IsNullOrEmpty(EmpId) && TaskCompleted?.ToLower() != "yes";
        public bool IsCompleted => TaskCompleted?.ToLower() == "yes";
        public string MileageInfo => GuaranteedMiles?.ToString("N1") + " miles" ?? "TBD";
        public bool HasQualityIssues => Quality?.ToLower() != "good" && !string.IsNullOrEmpty(Quality);
        public bool IsOverCost => CostOver?.ToLower() == "yes";
        
        private string GetCurrentStatus()
        {
            if (string.IsNullOrEmpty(EmpId)) return "Unassigned";
            if (TaskCompleted?.ToLower() == "yes") return "Completed";
            if (!string.IsNullOrEmpty(EmpId)) return "In Progress";
            return "Pending";
        }
        
        private int GetCompletionPercentage()
        {
            if (TaskCompleted?.ToLower() == "yes") return 100;
            if (!string.IsNullOrEmpty(EmpId)) return 50; // In progress
            return 0; // Unassigned
        }
    }

    // Request Models
    public class WeekDataRequest
    {
        public string CountryId { get; set; } = "";
        public string IriWeek { get; set; } = "";
        public string TerritoryId { get; set; } = "";
        public string Area { get; set; } = "";
        public string StoreNumber { get; set; } = "";
        public string State { get; set; } = "";
        public string City { get; set; } = "";
        public string PositionNumber { get; set; } = "";
        public string TaskNumber { get; set; } = "";
        public string EmpId { get; set; } = "";
        public string FsrHour { get; set; } = "";
        public string FsrHourOperator { get; set; } = "NA";
        public string AssignedStores { get; set; } = "false";
        public string UnassignedStores { get; set; } = "false";
        public string Sample { get; set; } = "false";
        public string NonSample { get; set; } = "false";
        public string MultiFsrStore { get; set; } = "false";
        public string Vacation { get; set; } = "false";
        public string Temporary { get; set; } = "false";
    }

    // Response Models
    public class WeekDataResponse<T> where T : WeekDataBase
    {
        public List<T> Data { get; set; } = new List<T>();
        public string WeekType { get; set; } = "";
        public int TotalCount { get; set; }
        public string Message { get; set; } = "";
        public bool Success { get; set; } = true;
    }
}
2. Data Access Layer
DataContext/TaskAssignmentContext.cs
csharp
using Microsoft.Data.SqlClient;
using System.Data;
using YourProject.Models;

namespace YourProject.DataContext
{
    public interface ITaskAssignmentContext
    {
        Task<List<PreviousWeekData>> GetPreviousWeekDataAsync(WeekDataRequest request);
        Task<List<FutureWeekData>> GetFutureWeekDataAsync(WeekDataRequest request);
        Task<List<CurrentWeekData>> GetCurrentWeekDataAsync(WeekDataRequest request);
        Task<string> GetCurrentIriWeekAsync();
    }

    public class TaskAssignmentContext : ITaskAssignmentContext
    {
        private readonly string _connectionString;
        private readonly ILogger<TaskAssignmentContext> _logger;

        public TaskAssignmentContext(IConfiguration configuration, ILogger<TaskAssignmentContext> logger)
        {
            _connectionString = configuration.GetConnectionString("DefaultConnection") 
                ?? throw new ArgumentNullException("Connection string not found");
            _logger = logger;
        }

        // Get Previous Week Data
        public async Task<List<PreviousWeekData>> GetPreviousWeekDataAsync(WeekDataRequest request)
        {
            var results = new List<PreviousWeekData>();

            try
            {
                using var connection = new SqlConnection(_connectionString);
                await connection.OpenAsync();
                
                using var command = new SqlCommand("USP_get_assignments_previous_weeks", connection)
                {
                    CommandType = CommandType.StoredProcedure,
                    CommandTimeout = 60
                };

                // Add parameters
                AddCommonParameters(command, request);

                using var reader = await command.ExecuteReaderAsync();
                while (await reader.ReadAsync())
                {
                    results.Add(new PreviousWeekData
                    {
                        IriWeek = GetSafeString(reader, "iri_week"),
                        FldTerrtynbr = GetSafeString(reader, "fld_terrty_nbr"),
                        PositionName = GetSafeString(reader, "Position_name"),
                        Bfd = GetSafeString(reader, "bfd"),
                        OutletType = GetSafeString(reader, "outlet_type"),
                        StoreNumber = GetSafeString(reader, "store_number"),
                        StoreName = GetSafeString(reader, "store_name"),
                        AddrLine1 = GetSafeString(reader, "addr_line1"),
                        CityName = GetSafeString(reader, "city_name"),
                        StateCd = GetSafeString(reader, "state_cd"),
                        ZipCd = GetSafeString(reader, "zip_cd"),
                        EmpId = GetSafeString(reader, "emp_id"),
                        FirstName = GetSafeString(reader, "first_name"),
                        LastName = GetSafeString(reader, "last_name"),
                        TaskNumber = GetSafeString(reader, "task_number"),
                        TaskCompleted = GetSafeString(reader, "task_completed"),
                        Quality = GetSafeString(reader, "quality"),
                        CostOver = GetSafeString(reader, "cost_over"),
                        Wk1FsrProdCost = GetSafeDecimal(reader, "WK1FSRProdCost"),
                        Wk1StoreTravelCost = GetSafeDecimal(reader, "WK1StoreTravelCost"),
                        Wk1StoreTravelOvgCost = GetSafeDecimal(reader, "WK1StoreTravelOvgCost"),
                        Wk2FsrProdCost = GetSafeDecimal(reader, "WK2FSRProdCost"),
                        Wk2StoreTravelCost = GetSafeDecimal(reader, "WK2StoreTravelCost"),
                        Wk2StoreTravelOvgCost = GetSafeDecimal(reader, "WK2StoreTravelOvgCost")
                    });
                }

                _logger.LogInformation($"Retrieved {results.Count} previous week records");
                return results;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error retrieving previous week data");
                throw new ApplicationException("Failed to retrieve previous week data", ex);
            }
        }

        // Get Future Week Data
        public async Task<List<FutureWeekData>> GetFutureWeekDataAsync(WeekDataRequest request)
        {
            var results = new List<FutureWeekData>();

            try
            {
                using var connection = new SqlConnection(_connectionString);
                await connection.OpenAsync();
                
                using var command = new SqlCommand("USP_get_assignments", connection)
                {
                    CommandType = CommandType.StoredProcedure,
                    CommandTimeout = 60
                };

                // Add parameters
                AddCommonParameters(command, request);

                using var reader = await command.ExecuteReaderAsync();
                while (await reader.ReadAsync())
                {
                    results.Add(new FutureWeekData
                    {
                        IriWeek = GetSafeString(reader, "iri_week"),
                        FldTerrtynbr = GetSafeString(reader, "fld_terrty_nbr"),
                        PositionName = GetSafeString(reader, "Position_name"),
                        Bfd = GetSafeString(reader, "bfd"),
                        OutletType = GetSafeString(reader, "outlet_type"),
                        StoreNumber = GetSafeString(reader, "store_number"),
                        StoreName = GetSafeString(reader, "store_name"),
                        AddrLine1 = GetSafeString(reader, "addr_line1"),
                        CityName = GetSafeString(reader, "city_name"),
                        StateCd = GetSafeString(reader, "state_cd"),
                        ZipCd = GetSafeString(reader, "zip_cd"),
                        EmpId = GetSafeString(reader, "emp_id"),
                        FirstName = GetSafeString(reader, "first_name"),
                        LastName = GetSafeString(reader, "last_name"),
                        TaskNumber = GetSafeString(reader, "task_number"),
                        AvgCost = GetSafeDecimal(reader, "avg_cost"),
                        GuaranteedMiles = GetSafeDecimal(reader, "guaranteed_miles")
                    });
                }

                _logger.LogInformation($"Retrieved {results.Count} future week records");
                return results;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error retrieving future week data");
                throw new ApplicationException("Failed to retrieve future week data", ex);
            }
        }

        // Get Current Week Data
        public async Task<List<CurrentWeekData>> GetCurrentWeekDataAsync(WeekDataRequest request)
        {
            var results = new List<CurrentWeekData>();

            try
            {
                using var connection = new SqlConnection(_connectionString);
                await connection.OpenAsync();
                
                using var command = new SqlCommand("USP_get_assignments_current_week", connection)
                {
                    CommandType = CommandType.StoredProcedure,
                    CommandTimeout = 60
                };

                // Add parameters
                AddCommonParameters(command, request);

                using var reader = await command.ExecuteReaderAsync();
                while (await reader.ReadAsync())
                {
                    results.Add(new CurrentWeekData
                    {
                        IriWeek = GetSafeString(reader, "iri_week"),
                        FldTerrtynbr = GetSafeString(reader, "fld_terrty_nbr"),
                        PositionName = GetSafeString(reader, "Position_name"),
                        Bfd = GetSafeString(reader, "bfd"),
                        OutletType = GetSafeString(reader, "outlet_type"),
                        StoreNumber = GetSafeString(reader, "store_number"),
                        StoreName = GetSafeString(reader, "store_name"),
                        AddrLine1 = GetSafeString(reader, "addr_line1"),
                        CityName = GetSafeString(reader, "city_name"),
                        StateCd = GetSafeString(reader, "state_cd"),
                        ZipCd = GetSafeString(reader, "zip_cd"),
                        EmpId = GetSafeString(reader, "emp_id"),
                        FirstName = GetSafeString(reader, "first_name"),
                        LastName = GetSafeString(reader, "last_name"),
                        TaskNumber = GetSafeString(reader, "task_number"),
                        TaskCompleted = GetSafeString(reader, "task_completed"),
                        Quality = GetSafeString(reader, "quality"),
                        CostOver = GetSafeString(reader, "cost_over"),
                        GuaranteedMiles = GetSafeDecimal(reader, "guaranteed_miles")
                    });
                }

                _logger.LogInformation($"Retrieved {results.Count} current week records");
                return results;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error retrieving current week data");
                throw new ApplicationException("Failed to retrieve current week data", ex);
            }
        }

        // Get Current IRI Week
        public async Task<string> GetCurrentIriWeekAsync()
        {
            try
            {
                using var connection = new SqlConnection(_connectionString);
                await connection.OpenAsync();
                
                using var command = new SqlCommand("SELECT TOP 1 current_iri_week FROM system_settings ORDER BY id DESC", connection)
                {
                    CommandTimeout = 30
                };

                var result = await command.ExecuteScalarAsync();
                return result?.ToString() ?? DateTime.Now.Year.ToString() + "01";
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error retrieving current IRI week");
                throw new ApplicationException("Failed to retrieve current IRI week", ex);
            }
        }

        // Helper Methods
        private void AddCommonParameters(SqlCommand command, WeekDataRequest request)
        {
            command.Parameters.Add(new SqlParameter("@country_id", SqlDbType.VarChar, 10) { Value = request.CountryId ?? "" });
            command.Parameters.Add(new SqlParameter("@iri_week", SqlDbType.VarChar, 10) { Value = request.IriWeek ?? "" });
            command.Parameters.Add(new SqlParameter("@territory_id", SqlDbType.VarChar, 10) { Value = request.TerritoryId ?? "" });
            command.Parameters.Add(new SqlParameter("@area", SqlDbType.VarChar, 10) { Value = request.Area ?? "" });
            command.Parameters.Add(new SqlParameter("@store_number", SqlDbType.VarChar, 20) { Value = request.StoreNumber ?? "" });
            command.Parameters.Add(new SqlParameter("@state", SqlDbType.VarChar, 5) { Value = request.State ?? "" });
            command.Parameters.Add(new SqlParameter("@city", SqlDbType.VarChar, 100) { Value = request.City ?? "" });
            command.Parameters.Add(new SqlParameter("@position_number", SqlDbType.VarChar, 10) { Value = request.PositionNumber ?? "" });
            command.Parameters.Add(new SqlParameter("@task_number", SqlDbType.VarChar, 10) { Value = request.TaskNumber ?? "" });
            command.Parameters.Add(new SqlParameter("@emp_id", SqlDbType.VarChar, 20) { Value = request.EmpId ?? "" });
            command.Parameters.Add(new SqlParameter("@fsr_hour", SqlDbType.VarChar, 10) { Value = request.FsrHour ?? "" });
            command.Parameters.Add(new SqlParameter("@fsr_hour_operator", SqlDbType.VarChar, 5) { Value = request.FsrHourOperator ?? "NA" });
            command.Parameters.Add(new SqlParameter("@assigned_stores", SqlDbType.VarChar, 10) { Value = request.AssignedStores ?? "false" });
            command.Parameters.Add(new SqlParameter("@unassigned_stores", SqlDbType.VarChar, 10) { Value = request.UnassignedStores ?? "false" });
            command.Parameters.Add(new SqlParameter("@sample", SqlDbType.VarChar, 10) { Value = request.Sample ?? "false" });
            command.Parameters.Add(new SqlParameter("@non_sample", SqlDbType.VarChar, 10) { Value = request.NonSample ?? "false" });
            command.Parameters.Add(new SqlParameter("@multi_fsr_store", SqlDbType.VarChar, 10) { Value = request.MultiFsrStore ?? "false" });
            command.Parameters.Add(new SqlParameter("@vacation", SqlDbType.VarChar, 10) { Value = request.Vacation ?? "false" });
            command.Parameters.Add(new SqlParameter("@temporary", SqlDbType.VarChar, 10) { Value = request.Temporary ?? "false" });
        }

        private string GetSafeString(SqlDataReader reader, string columnName)
        {
            try
            {
                var ordinal = reader.GetOrdinal(columnName);
                return reader.IsDBNull(ordinal) ? "" : reader.GetString(ordinal);
            }
            catch
            {
                return "";
            }
        }

        private decimal? GetSafeDecimal(SqlDataReader reader, string columnName)
        {
            try
            {
                var ordinal = reader.GetOrdinal(columnName);
                return reader.IsDBNull(ordinal) ? null : reader.GetDecimal(ordinal);
            }
            catch
            {
                return null;
            }
        }
    }
}
3. Enhanced Controller
Controllers/TaskAssignmentController.cs
csharp
using Microsoft.AspNetCore.Mvc;
using YourProject.DataContext;
using YourProject.Models;

namespace YourProject.Controllers
{
    [ApiController]
    [Route("api/[controller]")]
    public class TaskAssignmentController : ControllerBase
    {
        private readonly ITaskAssignmentContext _context;
        private readonly ILogger<TaskAssignmentController> _logger;

        public TaskAssignmentController(ITaskAssignmentContext context, ILogger<TaskAssignmentController> logger)
        {
            _context = context;
            _logger = logger;
        }

        // Get Current IRI Week
        [HttpGet("[action]")]
        public async Task<ActionResult<string>> GetCurrentIRIWeek()
        {
            try
            {
                var currentWeek = await _context.GetCurrentIriWeekAsync();
                _logger.LogInformation($"Current IRI Week: {currentWeek}");
                return Ok(currentWeek);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error retrieving current IRI week");
                return StatusCode(500, "Error retrieving current IRI week");
            }
        }

        // Get Previous Week Data
        [HttpPost("[action]")]
        public async Task<ActionResult<WeekDataResponse<PreviousWeekData>>> GetPreviousWeekGridData([FromBody] WeekDataRequest request)
        {
            try
            {
                _logger.LogInformation($"Getting previous week data for IRI Week: {request.IriWeek}");

                var data = await _context.GetPreviousWeekDataAsync(request);

                var response = new WeekDataResponse<PreviousWeekData>
                {
                    Data = data,
                    WeekType = "previous",
                    TotalCount = data.Count,
                    Success = true,
                    Message = $"Retrieved {data.Count} previous week records"
                };

                return Ok(response);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error retrieving previous week data");
                return StatusCode(500, new WeekDataResponse<PreviousWeekData>
                {
                    Success = false,
                    Message = "Error retrieving previous week data: " + ex.Message
                });
            }
        }

        // Get Future Week Data
        [HttpPost("[action]")]
        public async Task<ActionResult<WeekDataResponse<FutureWeekData>>> GetFutureWeekGridData([FromBody] WeekDataRequest request)
        {
            try
            {
                _logger.LogInformation($"Getting future week data for IRI Week: {request.IriWeek}");

                var data = await _context.GetFutureWeekDataAsync(request);

                var response = new WeekDataResponse<FutureWeekData>
                {
                    Data = data,
                    WeekType = "future",
                    TotalCount = data.Count,
                    Success = true,
                    Message = $"Retrieved {data.Count} future week records"
                };

                return Ok(response);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error retrieving future week data");
                return StatusCode(500, new WeekDataResponse<FutureWeekData>
                {
                    Success = false,
                    Message = "Error retrieving future week data: " + ex.Message
                });
            }
        }

        // Get Current Week Data
        [HttpPost("[action]")]
        public async Task<ActionResult<WeekDataResponse<CurrentWeekData>>> GetCurrentWeekGridData([FromBody] WeekDataRequest request)
        {
            try
            {
                _logger.LogInformation($"Getting current week data for IRI Week: {request.IriWeek}");

                var data = await _context.GetCurrentWeekDataAsync(request);

                var response = new WeekDataResponse<CurrentWeekData>
                {
                    Data = data,
                    WeekType = "current",
                    TotalCount = data.Count,
                    Success = true,
                    Message = $"Retrieved {data.Count} current week records"
                };

                return Ok(response);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error retrieving current week data");
                return StatusCode(500, new WeekDataResponse<CurrentWeekData>
                {
                    Success = false,
                    Message = "Error retrieving current week data: " + ex.Message
                });
            }
        }

        // Get Summary Statistics (Bonus endpoint)
        [HttpPost("[action]")]
        public async Task<ActionResult<object>> GetWeekSummary([FromBody] WeekDataRequest request)
        {
            try
            {
                var currentWeek = await _context.GetCurrentIriWeekAsync();
                var requestWeek = request.IriWeek;

                if (requestWeek == currentWeek)
                {
                    var currentData = await _context.GetCurrentWeekDataAsync(request);
                    return Ok(new
                    {
                        WeekType = "current",
                        TotalStores = currentData.Count,
                        AssignedStores = currentData.Count(x => !string.IsNullOrEmpty(x.EmpId)),
                        CompletedTasks = currentData.Count(x => x.IsCompleted),
                        InProgressTasks = currentData.Count(x => x.IsInProgress),
                        QualityIssues = currentData.Count(x => x.HasQualityIssues),
                        OverCostTasks = currentData.Count(x => x.IsOverCost)
                    });
                }
                else if (string.Compare(requestWeek, currentWeek) > 0)
                {
                    var futureData = await _context.GetFutureWeekDataAsync(request);
                    return Ok(new
                    {
                        WeekType = "future",
                        TotalStores = futureData.Count,
                        AssignedStores = futureData.Count(x => !string.IsNullOrEmpty(x.EmpId)),
                        EstimatedCost = futureData.Where(x => x.AvgCost.HasValue).Sum(x => x.AvgCost.Value),
                        TotalMiles = futureData.Where(x => x.GuaranteedMiles.HasValue).Sum(x => x.GuaranteedMiles.Value)
                    });
                }
                else
                {
                    var previousData = await _context.GetPreviousWeekDataAsync(request);
                    return Ok(new
                    {
                        WeekType = "previous",
                        TotalStores = previousData.Count,
                        CompletedStores = previousData.Count(x => x.IsCompleted),
                        TotalCost = previousData.Sum(x => x.TotalCost),
                        StoresWithIssues = previousData.Count(x => x.HasIssues),
                        CompletionRate = previousData.Count > 0 ? (double)previousData.Count(x => x.IsCompleted) / previousData.Count * 100 : 0
                    });
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error retrieving week summary");
                return StatusCode(500, "Error retrieving week summary");
            }
        }
    }
}
4. Dependency Injection Setup
Program.cs
csharp
using YourProject.DataContext;

var builder = WebApplication.CreateBuilder(args);

// Add services
builder.Services.AddControllers();
builder.Services.AddLogging();

// Register Data Context
builder.Services.AddScoped<ITaskAssignmentContext, TaskAssignmentContext>();

// Add CORS
builder.Services.AddCors(options =>
{
    options.AddPolicy("AllowAngularApp",
        policy =>
        {
            policy.WithOrigins("http://localhost:4200")
                  .AllowAnyHeader()
                  .AllowAnyMethod();
        });
});

var app = builder.Build();

// Configure pipeline
if (app.Environment.IsDevelopment())
{
    app.UseDeveloperExceptionPage();
}

app.UseRouting();
app.UseCors("AllowAngularApp");
app.MapControllers();

app.Run();
5. appsettings.json
json
{
  "Logging": {
    "LogLevel": {
      "Default": "Information",
      "Microsoft.AspNetCore": "Warning"
    }
  },
  "ConnectionStrings": {
    "DefaultConnection": "Server=your-server;Database=your-database;Trusted_Connection=true;MultipleActiveResultSets=true;TrustServerCertificate=true;"
  },
  "AllowedHosts": "*"
}
Key Features:
✅ Type-Safe Models - Separate models for each week type with computed properties
✅ Async Operations - All database operations are asynchronous
✅ Error Handling - Comprehensive exception handling with logging
✅ Parameter Safety - SQL injection protection with parameterized queries
✅ Computed Properties - Intelligent calculated fields (completion status, totals, etc.)
✅ Flexible Response - Rich response models with metadata
✅ Performance - Proper connection management and timeouts
✅ Logging - Detailed logging for debugging and monitoring

This implementation maps directly to your stored procedures and column specifications!
