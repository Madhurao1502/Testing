<div class="dashboard-layout">
  <!-- TOP TOOLBAR with Navigation Menu -->
  <mat-toolbar class="mat-toolbar-primary">
    <!-- Navigation Menu Button -->
    <button mat-icon-button [matMenuTriggerFor]="navMenu" class="nav-menu-btn" matTooltip="Navigate">
      <mat-icon>apps</mat-icon>
    </button>
    
    <!-- Navigation Menu -->
    <mat-menu #navMenu="matMenu" class="nav-menu">
      <button mat-menu-item (click)="navigateToComponent('dashboard')">
        <mat-icon>dashboard</mat-icon>
        <span>Assignment Dashboard</span>
      </button>
      <button mat-menu-item (click)="navigateToComponent('performance')" disabled>
        <mat-icon>assessment</mat-icon>
        <span>Store Performance Report</span>
      </button>
      <button mat-menu-item (click)="navigateToComponent('analytics')">
        <mat-icon>analytics</mat-icon>
        <span>Analytics</span>
      </button>
      <mat-divider></mat-divider>
      <button mat-menu-item (click)="navigateToComponent('settings')">
        <mat-icon>settings</mat-icon>
        <span>Settings</span>
      </button>
    </mat-menu>

    <!-- Page Title -->
    <h1 class="toolbar-title">Store Performance Report</h1>
    
    <span class="toolbar-spacer"></span>

    <!-- Toolbar Actions -->
    <button mat-icon-button matTooltip="Refresh Data">
      <mat-icon>refresh</mat-icon>
    </button>
    
    <!-- Filter Toggle Button -->
    <button mat-icon-button (click)="toggleFilters()" matTooltip="Toggle Filters">
      <mat-icon>{{isFiltersExpanded ? 'expand_less' : 'expand_more'}}</mat-icon>
    </button>
  </mat-toolbar>

  <!-- EXPANDABLE FILTER TOPBAR -->
  <section class="filter-topbar" [class.expanded]="isFiltersExpanded" [class.collapsed]="!isFiltersExpanded">
    <div class="filter-container">
      
      <!-- Filter Row with Left and Right Sections -->
      <div class="filter-row">
        <!-- Left Section: Filters -->
        <div class="filter-fields-left">
          <!-- Country Selection -->
          <div class="filter-field">
            <label class="form-label">Country</label>
            <mat-form-field appearance="outline">
              <mat-select [formControl]="countryctrl" (selectionChange)="onCountryChange($event)">
                <mat-option *ngFor="let country of countrylist" [value]="country.countryName">
                  {{country.countryName}}
                </mat-option>
              </mat-select>
            </mat-form-field>
          </div>

          <!-- Report Week with Date Picker -->
          <div class="filter-field required-field">
            <label class="form-label">Report Week *</label>
            <mat-form-field appearance="outline">
              <input matInput [matDatepicker]="picker1" [formControl]="datetimectrl2" 
                     (dateChange)="onDateSelected($event,'iriweekctrl')" hidden>
              <input matInput [formControl]="iriweekctrl" maxlength="4" 
                     (keypress)="allowOnlyNumber($event)" placeholder="YYWW">
              <mat-datepicker-toggle matSuffix [for]="picker1"></mat-datepicker-toggle>
              <mat-datepicker #picker1></mat-datepicker>
            </mat-form-field>
          </div>

          <!-- Report Period Toggle -->
          <div class="filter-field">
            <label class="form-label">Report Period</label>
            <mat-button-toggle-group [formControl]="reportWeekCtrl" 
                                     (change)="getStorePerfReport()" 
                                     class="period-toggle-group">
              <mat-button-toggle value="WEEK">Week</mat-button-toggle>
              <mat-button-toggle value="4WEEK">4 Week</mat-button-toggle>
              <mat-button-toggle value="8WEEK">8 Week</mat-button-toggle>
              <mat-button-toggle value="QTY">QTD</mat-button-toggle>
              <mat-button-toggle value="YTD">YTD</mat-button-toggle>
            </mat-button-toggle-group>
          </div>
        </div>

        <!-- Right Section: Action Buttons -->
        <div class="filter-actions-right">
          <button mat-raised-button color="primary" 
                  [disabled]="showSpinner" 
                  (click)="getStorePerfReport()"
                  class="search-btn">
            <mat-spinner diameter="16" *ngIf="showSpinner"></mat-spinner>
            <mat-icon *ngIf="!showSpinner">search</mat-icon>
            Search
          </button>
          
          <button mat-stroked-button color="primary" 
                  matTooltip="Export to Excel" 
                  [disabled]="totalRecords === 0" 
                  (click)="exportToExcel()"
                  class="export-btn">
            <mat-icon>description</mat-icon>
            Export
          </button>
        </div>
      </div>
    </div>

    <!-- Filter Toggle Icon (when collapsed) -->
    <div class="filter-toggle-hint" *ngIf="!isFiltersExpanded" (click)="toggleFilters()">
      <mat-icon>keyboard_arrow_down</mat-icon>
      <span>Show Filters</span>
    </div>
  </section>

  <!-- MAIN CONTENT AREA -->
  <div class="main-content">
    <div class="content-wrapper">
      <!-- TABLE CONTAINER -->
      <div class="table-container">
        <mat-card class="table-card">
          <mat-card-content>
            <div class="table-wrapper" [class.no-data]="totalRecords === 0">
              
              <!-- Data Table -->
              <table mat-table [dataSource]="dataSource" matSort 
                     (matSortChange)="announceSortChange($event)" 
                     class="store-table performance-table mat-elevation-2"
                     [ngClass]="{'has-data': totalRecords > 0, 'no-data': totalRecords === 0}">

                <ng-container matColumnDef="reportWeek">
                  <th mat-header-cell *matHeaderCellDef mat-sort-header class="mat-header-style">Report Week</th>
                  <td mat-cell *matCellDef="let element"> {{element.reportWeek}}</td>
                </ng-container>

                <ng-container matColumnDef="stateCd">
                  <th mat-header-cell *matHeaderCellDef mat-sort-header class="mat-header-style">State CD</th>
                  <td mat-cell *matCellDef="let element"> {{element.stateCd}} </td>
                </ng-container>

                <ng-container matColumnDef="territory">
                  <th mat-header-cell *matHeaderCellDef mat-sort-header class="mat-header-style">Territory</th>
                  <td mat-cell *matCellDef="let element"> {{element.territory}} </td>
                </ng-container>

                <ng-container matColumnDef="outlet">
                  <th mat-header-cell *matHeaderCellDef mat-sort-header class="mat-header-style">Outlet</th>
                  <td mat-cell *matCellDef="let element"> {{element.outlet}} </td>
                </ng-container>

                <ng-container matColumnDef="storeNumber">
                  <th mat-header-cell *matHeaderCellDef mat-sort-header class="mat-header-style">Store Number</th>
                  <td mat-cell *matCellDef="let element"> {{element.storeNumber}} </td>
                </ng-container>

                <ng-container matColumnDef="storeName">
                  <th mat-header-cell *matHeaderCellDef mat-sort-header class="mat-header-style">Store Name</th>
                  <td mat-cell *matCellDef="let element"> {{element.storeName}} </td>
                </ng-container>

                <ng-container matColumnDef="taskNumber">
                  <th mat-header-cell *matHeaderCellDef mat-sort-header class="mat-header-style">Task Number</th>
                  <td mat-cell *matCellDef="let element"> {{element.taskNumber}} </td>
                </ng-container>

                <ng-container matColumnDef="completionPercent">
                  <th mat-header-cell *matHeaderCellDef mat-sort-header class="mat-header-style">Completion %</th>
                  <td mat-cell *matCellDef="let element"> {{element.completionPercent}} </td>
                </ng-container>

                <ng-container matColumnDef="collectedNotPortalAssigned">
                  <th mat-header-cell *matHeaderCellDef mat-sort-header class="mat-header-style">Collected Not Portal Assigned</th>
                  <td mat-cell *matCellDef="let element"> {{element.collectedNotPortalAssigned}} </td>
                </ng-container>

                <ng-container matColumnDef="qualityApproval">
                  <th mat-header-cell *matHeaderCellDef mat-sort-header class="mat-header-style">Quality Approval</th>
                  <td mat-cell *matCellDef="let element"> {{element.qualityApproval}} </td>
                </ng-container>

                <ng-container matColumnDef="gpsTravelTime">
                  <th mat-header-cell *matHeaderCellDef mat-sort-header class="mat-header-style">GPS Travel Time</th>
                  <td mat-cell *matCellDef="let element"> {{element.gpsTravelTime}} </td>
                </ng-container>

                <ng-container matColumnDef="gpsDistance">
                  <th mat-header-cell *matHeaderCellDef mat-sort-header class="mat-header-style">GPS Distance</th>
                  <td mat-cell *matCellDef="let element"> {{element.gpsDistance}} </td>
                </ng-container>

                <ng-container matColumnDef="toll">
                  <th mat-header-cell *matHeaderCellDef mat-sort-header class="mat-header-style">Toll</th>
                  <td mat-cell *matCellDef="let element"> {{element.toll}} </td>
                </ng-container>

                <ng-container matColumnDef="gpsTotalCost">
                  <th mat-header-cell *matHeaderCellDef mat-sort-header class="mat-header-style">GPS Total Cost</th>
                  <td mat-cell *matCellDef="let element"> {{element.gpsTotalCost}} </td>
                </ng-container>

                <tr mat-header-row *matHeaderRowDef="displayedColumns;sticky:true"></tr>
                <tr mat-row *matRowDef="let row; columns: displayedColumns;" 
                    class="table-row" 
                    matRipple></tr>
              </table>

              <!-- No Data Message -->
              <ng-container *ngIf="this.totalRecords==0">
                <div class="no-data">No Data Found!!!</div>
              </ng-container>
            </div>
          </mat-card-content>
          
          <!-- Bottom Pagination -->
          <mat-paginator [length]="totalRecords"
                         [pageSize]="50"
                         [pageSizeOptions]="[50,100,150,200]"
                         showFirstLastButtons="true"
                         class="table-paginator">
          </mat-paginator>
        </mat-card>
      </div>
    </div>
  </div>
</div>

<footer>
  <div class="mat-spinner-container">
    <mat-spinner mode="indeterminate" *ngIf="showSpinner"></mat-spinner>
    <div *ngIf="showSpinner" style="position:relative;left: 10px">Loading...</div>
  </div>
</footer>
Updated CSS Styles
css
/* Dashboard Layout - Matching Store Component */
.dashboard-layout {
  height: 100vh;
  display: flex;
  flex-direction: column;
  background: #fafafa;
}

/* Toolbar Styling - Exact Match */
.mat-toolbar-primary {
  background: #1976d2;
  color: white;
  z-index: 1000;
  box-shadow: 0 2px 4px rgba(0,0,0,0.1);
}

.toolbar-title {
  margin-left: 16px;
  font-size: 20px;
  font-weight: 500;
}

.toolbar-spacer {
  flex: 1;
}

.nav-menu-btn {
  color: white;
}

/* Filter Section - Matching Store Component */
.filter-topbar {
  background: white;
  border-bottom: 1px solid #e0e0e0;
  overflow: hidden;
  transition: max-height 0.3s ease-in-out;
  max-height: 0;
}

.filter-topbar.expanded {
  max-height: 500px;
  padding: 16px;
}

.filter-topbar.collapsed {
  max-height: 0;
  padding: 0;
}

.filter-container {
  width: 100%;
}

/* Filter Row Layout - Left/Right Split */
.filter-row {
  display: flex;
  justify-content: space-between;
  align-items: flex-end;
  gap: 16px;
  margin-bottom: 16px;
  width: 100%;
}

.filter-fields-left {
  display: flex;
  gap: 16px;
  align-items: flex-end;
  flex: 1;
}

.filter-actions-right {
  display: flex;
  gap: 8px;
  align-items: flex-end;
  flex-shrink: 0;
}

.filter-field {
  display: flex;
  flex-direction: column;
  min-width: 140px;
}

.form-label {
  font-size: 12px;
  font-weight: 500;
  color: #666;
  margin-bottom: 4px;
  text-transform: uppercase;
  letter-spacing: 0.5px;
}

.filter-field .mat-form-field {
  width: 100%;
  font-size: 14px;
}

.filter-field .mat-form-field .mat-form-field-wrapper {
  padding-bottom: 0;
}

.filter-actions-right button {
  min-width: 100px;
  height: 40px;
  font-size: 13px;
  font-weight: 500;
}

.filter-toggle-hint {
  display: flex;
  justify-content: center;
  align-items: center;
  gap: 4px;
  cursor: pointer;
  color: #1976d2;
  font-size: 14px;
  padding: 8px;
  margin-top: 8px;
  border-radius: 4px;
  transition: background-color 0.2s;
}

.filter-toggle-hint:hover {
  background-color: rgba(25, 118, 210, 0.1);
}

/* Main Content - Exact Match */
.main-content {
  flex: 1;
  display: flex;
  flex-direction: column;
  overflow: hidden;
}

.content-wrapper {
  padding: 10px;
  flex: 1;
}

/* Table Container - Exact Match */
.table-container {
  width: 100%;
  height: 100%;
  position: relative;
  min-height: 75vh;
  max-height: 75vh;
}

.table-card {
  height: 85vh;
  display: flex;
  flex-direction: column;
  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
  border-radius: 8px;
  width: 100%;
  max-width: none;
}

.table-wrapper {
  flex: 1;
  overflow: auto;
  height: calc(75vh - 5px);
  width: 100%;
  overflow-x: auto;
  overflow-y: auto;
}

.table-wrapper mat-row, mat-footer-row {
  min-height: 40px !important;
}

.table-wrapper mat-header-row {
  min-height: 40px !important;
}

.mat-card-content {
  display: block;
  margin-bottom: 0 !important;
  flex: 1;
  overflow: hidden;
}

/* Table Styling - Exact Match from Store Component */
.store-table {
  width: 100%;
  min-width: 1400px;
  background: white;
  display: table;
  table-layout: auto;
  border-collapse: collapse;
  margin: 0px;
}

.store-table .mat-header-row {
  height: 40px;
}

.store-table .mat-row {
  max-width: 120%;
  cursor: pointer;
  transition: background-color 0.2s;
  min-height: 40px !important;
}

.store-table .mat-row:hover {
  background-color: mintcream;
}

/* Header Styling - Exact Match */
.mat-header-style {
  font-weight: bold !important;
  font-size: 15px !important;
  background-color: lightgray !important;
  text-align: left;
  font-weight: 600;
  color: #333;
  border-bottom: 2px solid #dee2e6;
}

/* Cell Styling - Exact Match */
.mat-cell, .mat-header-cell {
  padding: 0px 5px;
  vertical-align: middle;
  word-wrap: break-word;
  text-align: left;
  vertical-align: top;
  line-height: 1.4;
}

.mat-cell {
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}

/* Column Widths - Performance Report Specific */
.mat-column-reportWeek {
  width: 120px;
  min-width: 120px;
  max-width: 140px;
  text-align: center;
}

.mat-column-stateCd {
  width: 100px;
  min-width: 100px;
  max-width: 120px;
  text-align: center;
}

.mat-column-territory {
  width: 100px;
  min-width: 100px;
  max-width: 120px;
  text-align: center;
}

.mat-column-outlet {
  width: 100px;
  min-width: 100px;
  max-width: 120px;
  text-align: center;
}

.mat-column-storeNumber {
  width: 120px;
  min-width: 120px;
  max-width: 140px;
  text-align: center;
}

.mat-column-storeName {
  width: 200px;
  min-width: 180px;
  max-width: 250px;
}

.mat-column-taskNumber {
  width: 120px;
  min-width: 120px;
  max-width: 140px;
  text-align: center;
}

.mat-column-completionPercent {
  width: 120px;
  min-width: 120px;
  max-width: 140px;
  text-align: center;
}

.mat-column-collectedNotPortalAssigned {
  width: 200px;
  min-width: 180px;
  max-width: 220px;
  text-align: center;
}

.mat-column-qualityApproval {
  width: 120px;
  min-width: 120px;
  max-width: 140px;
  text-align: center;
}

.mat-column-gpsTravelTime {
  width: 120px;
  min-width: 120px;
  max-width: 140px;
  text-align: right;
}

.mat-column-gpsDistance {
  width: 120px;
  min-width: 120px;
  max-width: 140px;
  text-align: right;
}

.mat-column-toll {
  width: 100px;
  min-width: 100px;
  max-width: 120px;
  text-align: right;
}

.mat-column-gpsTotalCost {
  width: 120px;
  min-width: 120px;
  max-width: 140px;
  text-align: right;
}

/* No Data Message */
.no-data {
  display: flex;
  justify-content: center;
  align-items: center;
  height: 200px;
  font-size: 18px;
  color: #666;
  font-style: italic;
}

/* Paginator - Bottom positioned exactly like store component */
.table-paginator {
  border-top: 1px solid #e0e0e0;
  background: #fafafa;
  position: sticky;
  bottom: 0;
  z-index: 10;
  height: 52px;
}

/* Spinner Container - Exact Match */
.mat-spinner-container {
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  padding: 20px;
}

.mat-spinner {
  z-index: 111;
}

/* Period Toggle Group Styling */
.period-toggle-group {
  display: flex;
  border-radius: 4px;
  overflow: hidden;
}

.period-toggle-group .mat-button-toggle {
  font-size: 12px;
  min-width: 50px;
}

/* Responsive Design - Matching Store Component */
@media (max-width: 1200px) {
  .filter-row {
    flex-direction: column;
    align-items: stretch;
    gap: 16px;
  }
  
  .filter-fields-left {
    flex-direction: column;
    gap: 12px;
  }
  
  .filter-actions-right {
    justify-content: center;
    margin-top: 8px;
  }
}

@media (max-width: 768px) {
  .content-wrapper {
    padding: 16px;
  }
  
  .table-wrapper {
    overflow-x: auto;
  }
  
  .store-table {
    min-width: 800px;
  }
  
  .filter-fields-left {
    gap: 8px;
  }
  
  .filter-actions-right {
    flex-direction: column;
    width: 100%;
  }
  
  .filter-actions-right button {
    width: 100%;
    min-width: unset;
  }
}

/* Hover Effects */
.filter-field:hover mat-form-field {
  transform: translateY(-1px);
  transition: transform 0.2s ease;
}

.filter-actions-right button:hover {
  transform: translateY(-1px);
  transition: transform 0.2s ease;
}

/* Focus States */
.mat-form-field.mat-focused {
  transform: scale(1.02);
  transition: transform 0.2s ease;
}
Key Changes Made:
1. Fixed Toggle Issue:
The toggle will now work properly with the correct CSS classes .expanded and .collapsed

Added proper max-height transitions for smooth expand/collapse

2. Filter Layout - Left/Right Split:
Left side: Country, Report Week, Report Period filters

Right side: Search and Export buttons

Used flexbox with justify-content: space-between for proper alignment

3. Exact Table Styling Match:
Applied same mat-header-style class with lightgray background

Same mintcream hover effect on table rows

Exact same table structure with mat-card wrapper

Same cell padding and text styling (padding: 0px 5px)

4. Pagination at Bottom:
Removed the top pagination completely

Moved pagination to bottom inside the mat-card

Same styling as your store component with table-paginator class

5. Matching Layout Structure:
Same dashboard-layout structure

Same content-wrapper padding (10px)

Same table height calculations (85vh for card, 75vh - 5px for wrapper)

Same responsive breakpoints

6. Header No-Wrap:
Table headers will not wrap due to white-space: nowrap and fixed column widths

Each column has specific min-width and max-width settings

The component now exactly matches your store table component's theme and layout!
