dashbord-layout.component.css

.dashboard-layout {
  height: 100vh;
  display: flex;
  flex-direction: column;
  background: #fafafa;
}

.mat-toolbar-primary {
  background: #1976d2;
  color: white;
  z-index: 1000;
  box-shadow: 0 2px 4px rgba(0,0,0,0.1);
}

.toolbar-title {
  margin-left: 16px;
  font-size: 20px;
  font-weight: 500;
}

.toolbar-spacer {
  flex: 1;
}

.country-field {
  margin-right: 16px;
}

.country-field .mat-form-field {
  width: 200px;
}

.country-field .mat-form-field .mat-form-field-wrapper {
  padding-bottom: 0;
}

/* Top Filter Bar */
.filter-top-bar {
  background: white;
  border-bottom: 1px solid #e0e0e0;
  overflow: hidden;
  transition: max-height 0.3s ease-in-out;
  max-height: 0;
}

.filter-top-bar.expanded {
  max-height: 500px;
}

/* Main Content */
.main-content {
  flex: 1;
  display: flex;
  flex-direction: column;
  overflow: hidden;
}

.content-wrapper {
  padding: 10px;
  flex: 1;
  /* overflow: auto; */
}


/* Responsive Design */
@media (max-width: 768px) {
  .content-wrapper {
    padding: 16px;
  }
  
  .country-field .mat-form-field {
    width: 150px;
  }
}

dashbord-layout.component.html

<div class="dashboard-layout">
  <!-- Toolbar -->
  <mat-toolbar class="mat-toolbar-primary">
    <button mat-icon-button (click)="toggleFilters()" aria-label="Toggle filters">
      <mat-icon>filter_list</mat-icon>
    </button>
    <h1 class="toolbar-title">Assignments Dashboard</h1>
    <span class="toolbar-spacer"></span>
    
    <!-- Country Selector -->
    <div class="country-field">
      <mat-form-field appearance="standard">
        <mat-select [formControl]="countryctrl" placeholder="Select country">
          <mat-option *ngFor="let country of countrylist" 
                      [value]="country.countryID" 
                      (onSelectionChange)="selectedcountry($event)">
            {{country.countryName}}
          </mat-option>
        </mat-select>
      </mat-form-field>        
    </div>
    
    <button mat-icon-button aria-label="Edit" matTooltip="Generate Work Order" 
          > 
      <mat-icon>edit_square</mat-icon>
    </button>
    <button mat-icon-button aria-label="Send" matTooltip="Email Work Order" 
        >
      <mat-icon>send</mat-icon>
    </button>
    <button mat-icon-button aria-label="Download" matTooltip="Export Grid Data" (click)=" ExportFetaDetailsToCSV();$event.stopPropagation()">
      <mat-icon>download</mat-icon>
    </button>
  </mat-toolbar>

  <!-- TOP HORIZONTAL FILTER BAR -->
  <section class="filter-top-bar" [class.expanded]="isFiltersExpanded">
    <app-filter-sidebar 
      (filtersChanged)="onFiltersChanged($event)"
      (columnsChanged)="onColumnsChanged($event)"
      (clearFilters)="onClearFilters()">
    </app-filter-sidebar>
  </section>

  <!-- Main Content -->
  <div class="main-content">
    <div class="content-wrapper">
      <app-store-table #storeTableComponent></app-store-table>
    </div>
  </div>
</div>

<footer>
    <div class="mat-spinner-container">
        <mat-spinner mode="indeterminate" *ngIf="showSpinner"></mat-spinner>
        <div *ngIf="showSpinner" style="position:relative;left: 10px">Loading...</div>
    </div>
</footer>

store-table.component.html

<div class="table-container">
  <mat-card class="table-card" [ngClass]="getWeekTypeClass()">
    <!-- <mat-card-header> -->
      <!-- Search Bar -->
      <!-- <div class="search-container">
        <mat-form-field appearance="outline" class="search-field">
          <mat-label>Search stores...</mat-label>
          <input matInput [formControl]="searchControl" 
                placeholder="Search by store number, name, address, city, state, assigned to, etc.">
          <mat-icon matPrefix>search</mat-icon>
          <button mat-button *ngIf="searchControl.value" matSuffix mat-icon-button (click)="clearSearch()">
            <mat-icon>clear</mat-icon>
          </button>
        </mat-form-field>
      </div> -->
    <!-- </mat-card-header> -->
    
    <mat-card-content>
      <div class="table-wrapper">
        <mat-table #table [dataSource]="dataSource" matSort class="store-table mat-elevation-2" [ngClass]="getWeekTypeTableClass()">
          
          <!-- Store Number Column -->
          <ng-container matColumnDef="store_number" *ngIf="isColumnVisible('store_number')">
            <mat-header-cell *matHeaderCellDef class="mat-header-style">
              <button mat-icon-button 
                      [disabled]="isExpandingAll"
                      (click)="expandAllRows()" 
                      [title]="allExpanded ? 'Collapse All' : 'Expand All'"
                      class="expand-all-btn">
                <mat-icon>{{allExpanded ? 'unfold_less' : 'unfold_more'}}</mat-icon>
              </button>
              Store #
            </mat-header-cell>
            <mat-cell *matCellDef="let element" class="store-number-cell">
              <div style="width: 100%;">
              <span class="caret" [class.clicked]="isRowExpanded(element)">â–¼</span>
              <span class="store-number">{{element.StoreNumber}}</span>
              </div>
             
            </mat-cell>
          </ng-container>

          <!-- Territory -->
         <ng-container matColumnDef="territory" *ngIf="isColumnVisible('territory')">
            <mat-header-cell *matHeaderCellDef class="mat-header-style" matTooltip="territory">Terr</mat-header-cell>
            <mat-cell *matCellDef="let element">{{element.FldTerrtyNbr}}</mat-cell>
          </ng-container>

                  <!-- Position Number -->
         <ng-container matColumnDef="position_number" *ngIf="isColumnVisible('position_number')">
            <mat-header-cell *matHeaderCellDef class="mat-header-style">Position #</mat-header-cell>
            <mat-cell *matCellDef="let element">{{element.PositionName}}</mat-cell>
          </ng-container>

                  <!-- BFD -->
         <ng-container matColumnDef="bdf" *ngIf="isColumnVisible('bdf')">
            <mat-header-cell *matHeaderCellDef class="mat-header-style">BFD</mat-header-cell>
            <mat-cell *matCellDef="let element">{{element.Bfd}}</mat-cell>
          </ng-container>

                          <!-- Outlet -->
         <ng-container matColumnDef="outlet" *ngIf="isColumnVisible('outlet')">
            <mat-header-cell *matHeaderCellDef class="mat-header-style">Outlet</mat-header-cell>
            <mat-cell *matCellDef="let element">{{element.OutletType}}</mat-cell>
          </ng-container>

          <!-- Store Name Column -->
          <ng-container matColumnDef="store_name" *ngIf="isColumnVisible('store_name')">
            <mat-header-cell *matHeaderCellDef class="mat-header-style">Store Name</mat-header-cell>
            <mat-cell *matCellDef="let element" class="store-name-cell">
              <div style="width: 100%;">
              <span class="store-name" (click)="openProximityDataDialog(element); $event.stopPropagation();">
                {{element.StoreName}}
              </span>
              </div>
             
            </mat-cell>
          </ng-container>

          <!-- Address Column -->
          <ng-container matColumnDef="addr_line1" *ngIf="isColumnVisible('addr_line1')">
            <mat-header-cell *matHeaderCellDef class="mat-header-style">Address</mat-header-cell>
            <mat-cell *matCellDef="let element">{{element.AddrLine1}}</mat-cell>
          </ng-container>

          <!-- City Column -->
          <ng-container matColumnDef="city" *ngIf="isColumnVisible('city')">
            <mat-header-cell *matHeaderCellDef class="mat-header-style">City</mat-header-cell>
            <mat-cell *matCellDef="let element">{{element.City}}</mat-cell>
          </ng-container>

          <!-- State Column -->
          <ng-container matColumnDef="state" *ngIf="isColumnVisible('state')">
            <mat-header-cell *matHeaderCellDef class="mat-header-style">State</mat-header-cell>
            <mat-cell *matCellDef="let element">

              <div style="width: 100%;"> <span class="state-badge">{{element.State}}</span></div>
            </mat-cell>
          </ng-container>

          <!-- Zip Column -->
          <ng-container matColumnDef="zip" *ngIf="isColumnVisible('zip')">
            <mat-header-cell *matHeaderCellDef class="mat-header-style">Zip</mat-header-cell>
            <mat-cell *matCellDef="let element">{{element.Zip}}</mat-cell>
          </ng-container>

          <!-- ENHANCED: Assigned To Column with line-by-line display -->
         <ng-container matColumnDef="assigned_to" *ngIf="isColumnVisible('assigned_to')">
              <mat-header-cell *matHeaderCellDef class="mat-header-style">Assigned To</mat-header-cell>
              <mat-cell *matCellDef="let element" class="assigned-cell" 
                        (click)="openAssignmentDialog(element, 'StoreLevel'); $event.stopPropagation()">
                <div class="assignment-container">
                  <div class="assignment-names" 
                      [ngClass]="getAssignmentClass(element.AssignedTo)"
                      [matTooltip]="getAssignedToTooltip(element.AssignedTo)"
                      matTooltipClass="multi-line-tooltip">
                    
                    <!-- Single person or NOT ASSIGNED - display normally -->
                    <div *ngIf="!shouldDisplayMultipleLines(element.AssignedTo)" class="single-name">
                      {{element.AssignedTo || 'NOT ASSIGNED'}}
                    </div>
                    
                    <!-- Multiple people - display line by line -->
                    <div *ngIf="shouldDisplayMultipleLines(element.AssignedTo)" class="multiple-names">
                      <div *ngFor="let name of getIndividualNames(element.AssignedTo); let i = index" 
                          class="name-line"
                          [class.first-name]="i === 0">
                        {{name}}
                      </div>
                    </div>
                    
                  </div>
                </div>
              </mat-cell>
            </ng-container>

          <!-- Task Completed Column -->
          <ng-container matColumnDef="task_completed" *ngIf="isColumnVisible('task_completed')">
            <mat-header-cell *matHeaderCellDef class="mat-header-style" matTooltip="Completed">Completed</mat-header-cell>
            <mat-cell *matCellDef="let element">
              <span class="status-badge" [ngClass]="getTaskCompletedClass(element.TaskCompleted)">
                {{formatTaskCompleted(element.TaskCompleted)}}
              </span>
            </mat-cell>
          </ng-container>

          <!-- Quality Column -->
          <ng-container matColumnDef="quality" *ngIf="isColumnVisible('quality')">
            <mat-header-cell *matHeaderCellDef class="mat-header-style" matTooltip="Quality">Quality</mat-header-cell>
            <mat-cell *matCellDef="let element">
              <span class="quality-badge" [ngClass]="getQualityClass(element.Quality)">
                {{formatQuality(element.Quality)}}
              </span>
            </mat-cell>
          </ng-container>

      

          <!-- Cost Over Column -->
          <ng-container matColumnDef="cost_over" *ngIf="isColumnVisible('cost_over')">
            <mat-header-cell *matHeaderCellDef class="mat-header-style">Over Cost</mat-header-cell>
            <mat-cell *matCellDef="let element">
              <span class="cost-badge" [ngClass]="getCostOverClass(element.CostOver)">
                {{formatCostOver(element.CostOver)}}
              </span>
            </mat-cell>
          </ng-container>

          <!-- Guaranteed Miles Column -->
          <ng-container matColumnDef="guaranteed_miles" *ngIf="isColumnVisible('guaranteed_miles')">
            <mat-header-cell *matHeaderCellDef class="mat-header-style">Miles</mat-header-cell>
            <mat-cell *matCellDef="let element">{{formatGuaranteedMiles(element.GuaranteedMiles)}}</mat-cell>
          </ng-container>

          <!-- Average Cost Column -->
          <ng-container matColumnDef="avg_cost" *ngIf="isColumnVisible('avg_cost')">
            <mat-header-cell *matHeaderCellDef class="mat-header-style">Avg Cost</mat-header-cell>
            <mat-cell *matCellDef="let element">{{element.AvgCost}}</mat-cell>
          </ng-container>

          <!-- WK1 Costs Column -->
          <ng-container matColumnDef="wk1_costs" *ngIf="isColumnVisible('wk1_costs')">
            <mat-header-cell *matHeaderCellDef class="mat-header-style">WK1 Cost</mat-header-cell>
            <mat-cell *matCellDef="let element">{{element.WK1FSRProdCost}}</mat-cell>
          </ng-container>

             <!-- WK1 Travel Costs Column -->
          <ng-container matColumnDef="wk1_travel" *ngIf="isColumnVisible('wk1_travel')">
            <mat-header-cell *matHeaderCellDef class="mat-header-style">WK1 Travel</mat-header-cell>
            <mat-cell *matCellDef="let element">{{element.WK1StoreTravelCost}}</mat-cell>
          </ng-container>

             <!-- wk1_ovg_travel Column -->
          <ng-container matColumnDef="wk1_ovg_travel" *ngIf="isColumnVisible('wk1_ovg_travel')">
            <mat-header-cell *matHeaderCellDef class="mat-header-style">WK1 Ovg Travel</mat-header-cell>
            <mat-cell *matCellDef="let element">{{element.WK1StoreTravelOvgCost}}</mat-cell>
          </ng-container>

          <!-- WK2 Costs Column -->
          <ng-container matColumnDef="wk2_costs" *ngIf="isColumnVisible('wk2_costs')">
            <mat-header-cell *matHeaderCellDef class="mat-header-style">WK2 Cost</mat-header-cell>
            <mat-cell *matCellDef="let element">{{element.WK2FSRProdCost}}</mat-cell>
          </ng-container>

                      <!-- WK1 Travel Costs Column -->
          <ng-container matColumnDef="wk2_travel" *ngIf="isColumnVisible('wk2_travel')">
            <mat-header-cell *matHeaderCellDef class="mat-header-style">WK2 Travel</mat-header-cell>
            <mat-cell *matCellDef="let element">{{element.WK2StoreTravelCost}}</mat-cell>
          </ng-container>

             <!-- wk2_ovg_travel Column -->
          <ng-container matColumnDef="wk2_ovg_travel" *ngIf="isColumnVisible('wk2_ovg_travel')">
            <mat-header-cell *matHeaderCellDef class="mat-header-style">WK1 Ovg Travel</mat-header-cell>
            <mat-cell *matCellDef="let element">{{element.WK2StoreTravelOvgCost}}</mat-cell>
          </ng-container>

          <!-- ENHANCED: Comments Column with Popup Dialog -->
          <ng-container matColumnDef="user_comment" *ngIf="isColumnVisible('user_comment')">
            <mat-header-cell *matHeaderCellDef class="mat-header-style">Comments</mat-header-cell>
            <mat-cell *matCellDef="let element" class="comment-cell">
              <div class="comment-display"
                   (click)="openCommentDialog(element); $event.stopPropagation();"
                   [title]="element.UserComment || 'Click to add/edit comment'"
                   [class.has-comment]="element.UserComment"
                   [class.clickable]="canEditComments || element.UserComment">
                
                <span class="comment-text">
                  {{getCommentDisplay(element.UserComment)}}
                </span>
                
                <!-- Comment icon indicator -->
                <!-- <mat-icon class="comment-icon" 
                          [class.has-content]="element.UserComment">
                  {{element.UserComment ? 'comment' : 'add_comment'}}
                </mat-icon> -->
              </div>
            </mat-cell>
          </ng-container>

          <!-- Header and Data Rows -->
          <mat-header-row *matHeaderRowDef="displayedColumns; sticky: true"></mat-header-row>
          <mat-row *matRowDef="let row; columns: displayedColumns; let i = index"
                  class="table-row"
                  [cdkDetailRow]="row" 
                  [cdkDetailRowTpl]="tpl"
                  (toggleChange)="GetSubgridData($event, row)"
                  (dataLoadRequest)="onDataLoadRequest($event)"
                  matRipple>
          </mat-row>
        </mat-table>
      </div>
      
      <mat-paginator [pageSizeOptions]="[50, 100, 150, 200]" 
                    showFirstLastButtons
                    class="table-paginator">
      </mat-paginator>
    </mat-card-content>
  </mat-card>
</div>

<!-- Inner Table Template -->
<ng-template #tpl let-element let-subgridData="subgridData" let-isLoading="isLoading">
  <div class="mat-row detail-row" style="overflow: hidden;">
    
    <!-- Loading indicator for this specific row -->
    <div *ngIf="isLoading" class="row-loading">
      <mat-spinner diameter="20"></mat-spinner>
      <span>Loading data for {{element.StoreName}}...</span>
    </div>
    
    <!-- Data table for this specific row -->
    <table class="expanded-table" *ngIf="!isLoading"> 
      <tr> 
        <th>Task Name</th>
        <th>Assigned To</th>              
        <th>CSR Info</th>
        <th>Wave</th>
        <th>Avg Coll Time</th>
      </tr>
      <tr *ngFor="let item of subgridData;">
        <td>{{item.TaskName}}</td>
        <td (click)="openTaskAssignmentDialog(item); $event.stopPropagation()">
          {{item.AssignedTo}}
        </td>              
        <td>{{item.CsrInfo}}</td>
        <td>{{item.Wave}}</td>
        <td>{{item.ExpectedCollectionTime}}</td>
      </tr>       
    </table>
  </div>
</ng-template>

<footer>
  <div class="mat-spinner-container">
    <mat-spinner mode="indeterminate" *ngIf="showSpinner"></mat-spinner>
    <div *ngIf="showSpinner" style="position:relative;left: 10px">Loading...</div>
  </div>
</footer>

store-table.component.css

.table-container {
  width: 100%;
  height: 100%;
  position: relative;
  min-height: 75vh;
  max-height: 75vh;
  /* overflow-x: auto; */
}

.table-card {
  height: 85vh;
  display: flex;
  flex-direction: column;
  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
  border-radius: 8px;
  width: 100%;
  max-width: none;
}

.table-wrapper {
   flex: 1;
   overflow: auto;
   height: calc(75vh - 5px);
   width: 100%;
   overflow-x: auto;
   overflow-y: auto;
}

.table-wrapper mat-row, mat-footer-row {
    min-height: 40px !important;
}

.table-wrapper mat-header-row {
    min-height: 40px !important;
}

.mat-card-content {
    display: block;
    margin-bottom: 0 !important;
}

.search-container {
  padding: 16px;
  background: #f8f9fa;
  border-bottom: 1px solid #dee2e6;
  display: flex;
  align-items: center;
  gap: 16px;
  flex-wrap: wrap;
}

.search-field {
  flex: 1;
  min-width: 300px;
}

.search-info {
  display: flex;
  align-items: center;
  gap: 8px;
  font-size: 14px;
  color: #666;
}

.searching-indicator {
  display: flex;
  align-items: center;
  gap: 4px;
  color: #1976d2;
}

.table-controls {
  display: flex;
  align-items: center;
  padding: 8px 16px;
  background: #f5f5f5;
  border-bottom: 1px solid #e0e0e0;
  gap: 12px;
}

.expand-all-btn {
  color: #1976d2;
}

.expand-all-btn:disabled {
  color: #ccc;
}

.expand-status {
  display: flex;
  align-items: center;
  gap: 8px;
  font-size: 14px;
  color: #666;
}


.store-table {
  width: 100%;
  /* min-width: 1400px; */
  /* max-width: 2200px; */
  background: white;
  display: table;
  table-layout: auto;
  border-collapse: collapse;
  margin: 0px;
}

/* Current week min-width: ~1520px */
.store-table.week-current {
  min-width: 1520px;
}

/* Future week min-width: ~1320px */
.store-table.week-future {
  min-width: 1320px;
}

/* Previous week min-width: ~2100px */
.store-table.week-previous {
  min-width: 2100px;
}

.store-table .mat-header-row {
  height: 40px;
}

.store-table .mat-row {
  max-width: 120%;
  cursor: pointer;
  transition: background-color 0.2s;
}

.store-table .mat-row:hover {
  background-color: mintcream;
}

.store-table .mat-row.selected-row {
  background-color: lightyellow;
}


.mat-header-style {
  font-weight: bold !important;
  font-size: 15px !important;
  background-color: lightgray !important;
}

.mat-column-store_number {
  width: 110px;
  min-width: 110px;
  max-width: 130px;
  text-align: center;
}


.mat-column-territory {
  width: 70px;
  min-width: 70px;
  max-width: 80px;
  text-align: center;
}


.mat-column-position_number {
  width: 120px;
  min-width: 120px;
  max-width: 140px;
  text-align: center;
}


.mat-column-bdf {
  width: 80px;
  min-width: 80px;
  max-width: 90px;
  text-align: center;
}


.mat-column-outlet {
  width: 80px;
  min-width: 80px;
  max-width: 90px;
  text-align: center;
}


.mat-column-store_name {
  width: 200px;
  min-width: 180px;
  max-width: 250px;
}

.mat-column-store_name .mat-cell,
.mat-column-store_name .mat-header-cell {
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
}


.mat-column-addr_line1 {
  width: 200px;
  min-width: 180px;
  max-width: 250px;
}

.mat-column-addr_line1 .mat-cell,
.mat-column-addr_line1 .mat-header-cell {
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
}


.mat-column-city {
  width: 140px;
  min-width: 120px;
  max-width: 180px;
}

.mat-column-city .mat-cell,
.mat-column-city .mat-header-cell {
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
}


.mat-column-state {
  width: 80px;
  min-width: 80px;
  max-width: 90px;
  text-align: center;
}


.mat-column-assigned_to {
  width: 180px;
  min-width: 160px;
  max-width: 220px;
}


.mat-column-task_completed {
  width: 80px;
  min-width: 80px;
  max-width: 90px;
  text-align: center;
}


.mat-column-quality {
  width: 110px;
  min-width: 100px;
  max-width: 120px;
  text-align: center;
}


.mat-column-guaranteed_miles {
  width: 100px;
  min-width: 90px;
  max-width: 120px;
  text-align: center;
}


.mat-column-avg_cost {
  width: 110px;
  min-width: 100px;
  max-width: 130px;
  text-align: right;
}


.mat-column-cost_over,
.mat-column-wk1_costs,
.mat-column-wk1_travel,
.mat-column-wk1_ovg_travel,
.mat-column-wk2_costs,
.mat-column-wk2_travel,
.mat-column-wk2_ovg_travel {
  width: 120px;
  min-width: 110px;
  max-width: 140px;
  text-align: right;
}

.mat-column-cost_over .mat-cell,
.mat-column-wk1_costs .mat-cell,
.mat-column-wk1_travel .mat-cell,
.mat-column-wk1_ovg_travel .mat-cell,
.mat-column-wk2_costs .mat-cell,
.mat-column-wk2_travel .mat-cell,
.mat-column-wk2_ovg_travel .mat-cell {
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
}

/* Caret styling  */
.caret {
  display: inline-block;
  margin-right: 5px;
  margin-top: -1px;
  transition: transform 0.3s;
  font-size: 18px;
  font-weight: 800;  
  /* transform: rotate(90deg); */
  cursor: pointer;
}

.caret.clicked  {
  transform: rotate(180deg);
  margin-top: -5px;
}


.store-number-cell {
  font-weight: 500;
}

.store-name-cell .store-name {
  font-weight: 500;
  color: #333;
}

.address-cell {
  color: #555;
}

.state-badge {
  background: #e8f5e8;
  color: #2e7d32;
  padding: 4px 8px;
  border-radius: 12px;
  font-size: 12px;
  font-weight: 500;
  display: inline-block;
}

.assignment-badge {
  padding: 6px 12px;
  border-radius: 16px;
  font-size: 12px;
  font-weight: 500;
  text-transform: uppercase;
  display: inline-block;
  white-space: nowrap;
}

.assignment-badge.assigned {
  background: #4caf50;
  color: white;
}

.assignment-badge.not-assigned {
  background: #ff9800;
  color: white;
}

.collection-time-cell {
  color: #666;
  font-size: 13px;
}

.cluster-cell {
  font-family: 'Monaco', 'Menlo', monospace;
  font-size: 12px;
  background: #f5f5f5;
  color: #333;
  border-radius: 4px;
}


.expanded-table {
  margin-top: 5px;
  margin-bottom: 15px;
  margin-left: 70px;
  border-collapse: collapse;
  border: 1px solid #ddd;
  font-size: 14px;
  width: calc(100% - 140px); 
}

.expanded-table th,
.expanded-table td {
  padding: 8px 12px;
  text-align: left;
  border-bottom: 1px solid #ddd;
  white-space: nowrap;
}

.expanded-table th {
  background-color: #f2f2f2;
  font-weight: bold;
}

.expanded-table td[style*="max-width"] {
  white-space: normal !important;
  word-wrap: break-word;
}

/* Detail row styling */
.detail-row {
  background: #fafafa;
  overflow: hidden;
}

/* Paginator */
.table-paginator {
  border-top: 1px solid #e0e0e0;
  background: #fafafa;
  position: sticky;
  bottom: 0;
  z-index: 10;
  height: 52px;
}

/* Responsive design */
@media (max-width: 768px) {
  .table-wrapper {
    overflow-x: auto;
  }
  
  .store-table {
    min-width: 800px;
  }
  
   .search-container {
    flex-direction: column;
    align-items: stretch;
  }
  
  .search-field {
    min-width: auto;
  }

  .expanded-table {
    margin-left: 20px;
    width: calc(100% - 40px);
    font-size: 12px;
  }

  .row-loading {
  display: flex;
  align-items: center;
  justify-content: center;
  gap: 12px;
  padding: 20px;
  background: #f8f9fa;
  border: 1px dashed #dee2e6;
  margin: 10px 20px;
  border-radius: 4px;
  font-size: 14px;
  color: #666;
}
  
  .expanded-table th,
  .expanded-table td {
    padding: 6px 8px;
  }
}

/* Spinner styling */
.mat-spinner-container {
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  padding: 20px;
}

.mat-spinner {
  z-index: 111;
}

.comment-cell {
  min-width: 200px;
  max-width: 300px;
}

.comment-view {
  display: flex;
  align-items: center;
  gap: 8px;
}

.comment-text {
  flex: 1;
  cursor: pointer;
  padding: 4px;
  border-radius: 4px;
  color: #666;
  font-style: italic;
}

.comment-text:hover {
  background-color: #f5f5f5;
}

.comment-text:not(:empty) {
  color: #333;
  font-style: normal;
}

.comment-edit-btn {
  opacity: 0;
  transition: opacity 0.2s;
}

.comment-view:hover .comment-edit-btn {
  opacity: 1;
}

.comment-edit {
  display: flex;
  flex-direction: column;
  gap: 8px;
}

.comment-field {
  width: 100%;
}

.comment-actions {
  display: flex;
  justify-content: flex-end;
  gap: 4px;
}

.assignment-container {
  display: flex;
  flex-direction: column;
  gap: 2px;
}

.assignment-badge.multiple-assigned {
  background: #2196f3;
  color: white;
  position: relative;
}

.assignment-badge.single-assigned {
  background: #4caf50;
  color: white;
}

.assignment-count {
  font-size: 10px;
  color: #666;
  font-style: italic;
}

/* Multi-line tooltip */
.mat-tooltip.multi-line-tooltip {
  white-space: pre-line;
  max-width: 300px;
  text-align: left;
}

/* Text overflow handling for all cells */
.mat-cell {
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
  /* max-width: 200px; */
}

.mat-cell[matTooltip] {
  cursor: help;
}

/* Specific column max-widths to prevent overflow */
.mat-column-store_name .mat-cell {
  max-width: 250px;
}

.mat-column-addr_line1 .mat-cell {
  max-width: 200px;
}

.mat-column-assigned_to .mat-cell {
  max-width: 180px;
}

.store-table {
  width: 100%;
  table-layout: fixed; 
  border-collapse: separate;
  border-spacing: 0;
}

.store-table .mat-header-cell,
.store-table .mat-cell {
  padding: 0px 5px;
  /* border-right: 1px solid #e0e0e0; */
  vertical-align: middle;
  word-wrap: break-word;
}

.store-table .mat-header-cell:last-child,
.store-table .mat-cell:last-child {
  border-right: none;
}

/* Fixed column widths */
.mat-column-store_number {
  width: 120px;
  min-width: 120px;
}

.mat-column-position_number {
  width: 80px;
  min-width: 80px;
}

.mat-column-store_name {
  width: 200px;
  min-width: 200px;
}

.mat-column-addr_line1 {
  width: 180px;
  min-width: 180px;
}

.mat-column-city {
  width: 150px;
  min-width: 150px;
}

.mat-column-state {
  width: 80px;
  min-width: 80px;
}

.mat-column-avg_cost {
  width: 80px;
  min-width: 80px;
}

.mat-column-assigned_to {
  width: 160px;
  min-width: 160px;
}

.mat-column-user_comment {
  width: 150px;
  min-width: 150px;
}

/* Header alignment */
.mat-header-cell {
  text-align: left;
  font-weight: 600;
  color: #333;
  background: #f8f9fa;
  border-bottom: 2px solid #dee2e6;
}

/* Cell alignment */
.mat-cell {
  text-align: left;
  vertical-align: top;
  line-height: 1.4;
}


.assignment-container {
  display: flex;
  flex-direction: column;
  align-items: flex-start;
  min-height: 32px;
  padding: 4px 2px;
  width: 100%;
}

.assignment-names {
  display: flex;
  flex-direction: column;
  align-items: flex-start;
  width: 100%;
  word-wrap: break-word;
}

.single-name {
  font-size: 13px;
  line-height: 1.3;
  font-weight: 500;
  max-width: 100%;
  word-wrap: break-word;
  overflow-wrap: break-word;
}

.multiple-names {
  display: flex;
  flex-direction: column;
  width: 100%;
}

.name-line {
  font-size: 12px;
  line-height: 1.2;
  padding: 1px 0;
  word-break: break-word;
  max-width: 100%;
}

.name-line.first-name {
  font-weight: 600;
  border-bottom: 1px solid #e0e0e0;
  padding-bottom: 2px;
  margin-bottom: 2px;
}

/* Assignment status styling */
.assignment-names.not-assigned .single-name {
  color: #f44336;
  font-style: italic;
  font-weight: 400;
}

.assignment-names.single-assigned .single-name {
  color: #4caf50;
  font-weight: 500;
}

.assignment-names.multiple-assigned {
  border-left: 3px solid #2196f3;
  padding-left: 6px;
  background-color: rgba(33, 150, 243, 0.05);
}

.assignment-names.multiple-assigned .name-line {
  color: #1976d2;
  font-weight: 500;
}

.assignment-names.multiple-assigned .name-line.first-name {
  color: #0d47a1;
  font-weight: 600;
}

/* Multi-line tooltip styling */
::ng-deep .multi-line-tooltip {
  white-space: pre-line;
  max-width: 300px;
  text-align: left;
  line-height: 1.4;
}

/* Column width for assigned_to */
.mat-column-assigned_to {
  width: 180px;
  min-width: 180px;
  max-width: 200px;
}

