// shelf-tree.component.ts using Angular Material MatTree
import { Component, Input, OnInit } from '@angular/core';
import { NestedTreeControl } from '@angular/cdk/tree';
import { MatTreeNestedDataSource } from '@angular/material/tree';
import { ShelfService } from '../shelf.service';
import { cloneDeep } from 'lodash';

interface ShelfNode {
  id: number;
  name: string;
  mainMin?: string;
  mainMax?: string;
  main_soft_check?: string;
  main_hard_check?: string;
  isNewlyAdded?: string;
  children?: ShelfNode[];
}

@Component({
  selector: 'app-shelf-tree',
  templateUrl: './shelf-tree.component.html',
  styleUrls: ['./shelf-tree.component.scss']
})
export class ShelfTreeComponent implements OnInit {
  @Input() group!: number;
  @Input() title!: string;

  treeControl = new NestedTreeControl<ShelfNode>(node => node.children);
  dataSource = new MatTreeNestedDataSource<ShelfNode>();

  selectedNode: ShelfNode | null = null;
  showLimits = false;
  showChecks = false;
  disableMinMax = false;

  constructor(private shelfService: ShelfService) {}

  ngOnInit(): void {
    this.shelfService.getShelfVars(this.group).subscribe((data) => {
      this.dataSource.data = data;
    });
  }

  hasChild = (_: number, node: ShelfNode) => !!node.children && node.children.length > 0;

  onSelect(node: ShelfNode): void {
    this.selectedNode = node;
    this.configureDisplayFields(node);
  }

  configureDisplayFields(node: ShelfNode): void {
    const limitIds = [11160, 14825, 15490, 15995, 16910, 22700];
    const checkIds = [10100, 20000, 30100];

    this.disableMinMax = limitIds.includes(node.id);

    if (this.disableMinMax) {
      this.showLimits = true;
      this.showChecks = false;
    } else if (checkIds.includes(node.id)) {
      this.showLimits = false;
      this.showChecks = true;
    } else {
      this.showLimits = true;
      this.showChecks = true;
    }
  }

  updateValue(type: 'min' | 'max' | 'soft' | 'hard', value: string): void {
    if (!this.selectedNode) return;

    if (type === 'min') this.selectedNode.mainMin = value;
    if (type === 'max') this.selectedNode.mainMax = value;
    if (type === 'soft') this.selectedNode.main_soft_check = value;
    if (type === 'hard') this.selectedNode.main_hard_check = value;

    this.selectedNode.isNewlyAdded = 'U';
  }

  getSelectedData(): any[] {
    const result: any[] = [];
    const traverse = (node: ShelfNode) => {
      if (node.isNewlyAdded === 'N' || node.isNewlyAdded === 'U') {
        const cleaned = cloneDeep(node);
        delete cleaned.children;
        result.push(cleaned);
      }
      if (node.children) {
        node.children.forEach(child => traverse(child));
      }
    };
    this.dataSource.data.forEach(n => traverse(n));
    return result;
  }
}


<h3>{{ title }}</h3>

<mat-tree [dataSource]="dataSource" [treeControl]="treeControl">
  <!-- Node without children -->
  <mat-tree-node *matTreeNodeDef="let node" matTreeNodePadding>
    <button mat-icon-button disabled></button>
    <span (click)="onSelect(node)">{{ node.name }}</span>
  </mat-tree-node>

  <!-- Node with children -->
  <mat-nested-tree-node *matTreeNodeDef="let node; when: hasChild">
    <div class="mat-tree-node" (click)="onSelect(node)">
      <button mat-icon-button matTreeNodeToggle [attr.aria-label]="'toggle ' + node.name">
        <mat-icon>
          {{ treeControl.isExpanded(node) ? 'expand_more' : 'chevron_right' }}
        </mat-icon>
      </button>
      {{ node.name }}
    </div>
    <div *ngIf="treeControl.isExpanded(node)">
      <ng-container matTreeNodeOutlet></ng-container>
    </div>
  </mat-nested-tree-node>
</mat-tree>

<div *ngIf="selectedNode" style="margin-top: 10px">
  <h4>{{ title }} Limits</h4>

  <div *ngIf="showLimits">
    <mat-form-field>
      <input matInput placeholder="Min" [(ngModel)]="selectedNode.mainMin"
             (change)="updateValue('min', selectedNode.mainMin)" [disabled]="disableMinMax" />
    </mat-form-field>

    <mat-form-field>
      <input matInput placeholder="Max" [(ngModel)]="selectedNode.mainMax"
             (change)="updateValue('max', selectedNode.mainMax)" [disabled]="disableMinMax" />
    </mat-form-field>
  </div>

  <div *ngIf="showChecks">
    <mat-form-field>
      <input matInput placeholder="Soft" [(ngModel)]="selectedNode.main_soft_check"
             (change)="updateValue('soft', selectedNode.main_soft_check)" />
    </mat-form-field>

    <mat-form-field>
      <input matInput placeholder="Hard" [(ngModel)]="selectedNode.main_hard_check"
             (change)="updateValue('hard', selectedNode.main_hard_check)" />
    </mat-form-field>
  </div>
</div>

***************************************

<mat-tab-group>
  <mat-tab label="Location">
    <app-shelf-tree #treeLocation [group]="1" title="Location"></app-shelf-tree>
  </mat-tab>
  <mat-tab label="Section">
    <app-shelf-tree #treeSection [group]="2" title="Section"></app-shelf-tree>
  </mat-tab>
  <mat-tab label="Shelf">
    <app-shelf-tree #treeShelf [group]="3" title="Shelf"></app-shelf-tree>
  </mat-tab>
  <mat-tab label="UPC">
    <app-shelf-tree #treeUPC [group]="4" title="UPC"></app-shelf-tree>
  </mat-tab>
</mat-tab-group>

<button mat-raised-button color="primary" (click)="save()">Save Shelf Variables</button>


import { Component, ViewChild } from '@angular/core';
import { ShelfTreeComponent } from '../shelf-tree/shelf-tree.component';

@Component({
  selector: 'app-shelf-master',
  templateUrl: './shelf-master.component.html',
})
export class ShelfMasterComponent {
  @ViewChild('treeLocation') treeLocation!: ShelfTreeComponent;
  @ViewChild('treeSection') treeSection!: ShelfTreeComponent;
  @ViewChild('treeShelf') treeShelf!: ShelfTreeComponent;
  @ViewChild('treeUPC') treeUPC!: ShelfTreeComponent;

  save(): void {
    const allData = [
      ...this.treeLocation.getSelectedData(),
      ...this.treeSection.getSelectedData(),
      ...this.treeShelf.getSelectedData(),
      ...this.treeUPC.getSelectedData(),
    ];
    console.log('Saving:', allData);
    // Call ShelfService.saveShelfVars(allData) if needed
  }
}


>>>>>>>>>>>>>>>>>>>>>

function buildNestedTree(flatData: any[]): any[] {
  const idMapping: { [key: number]: any } = {};
  const rootNodes: any[] = [];

  // Step 1: Map by ID
  flatData.forEach(node => {
    node.children = [];
    idMapping[node.id] = node;
  });

  // Step 2: Build the hierarchy
  flatData.forEach(node => {
    if (node.pId && idMapping[node.pId]) {
      idMapping[node.pId].children.push(node);
    } else {
      rootNodes.push(node);
    }
  });

  return rootNodes;
}

ngOnInit(): void {
  this.shelfService.getShelfVars(this.group).subscribe((data) => {
    const nestedData = buildNestedTree(data);
    this.dataSource.data = nestedData;
  });
}
****************************************************
<mat-tree [dataSource]="dataSource" [treeControl]="treeControl">

  <!-- Leaf node -->
  <mat-tree-node *matTreeNodeDef="let node">
    <div
      class="node-line"
      [ngStyle]="{ 'padding-left.px': (node.level || 0) * 20 }"
      (click)="onSelect(node)"
    >
      <button mat-icon-button disabled></button>
      <mat-icon class="node-icon">insert_drive_file</mat-icon>
      {{ node.name }}
    </div>
  </mat-tree-node>

  <!-- Expandable node -->
  <mat-nested-tree-node *matTreeNodeDef="let node; when: hasChild">
    <div
      class="node-line"
      [ngStyle]="{ 'padding-left.px': (node.level || 0) * 20 }"
      (click)="onSelect(node)"
    >
      <button mat-icon-button matTreeNodeToggle>
        <mat-icon>
          {{ treeControl.isExpanded(node) ? 'expand_more' : 'chevron_right' }}
        </mat-icon>
      </button>
      <mat-icon class="node-icon">folder</mat-icon>
      {{ node.name }}
    </div>
    <div *ngIf="treeControl.isExpanded(node)">
      <ng-container matTreeNodeOutlet></ng-container>
    </div>
  </mat-nested-tree-node>

</mat-tree>
ðŸ”§ Customize Indent Level
Change 20 in padding-left.px to any value to control indent per level.

âœ… Result
Each nested level will now be indented manually based on your level field â€” exactly matching your visual expectation.

âœ… Bonus (CSS Cleanup)
In your SCSS you can remove default Angular Material padding if needed:

scss
Copy
Edit
::ng-deep .mat-tree-node,
::ng-deep .mat-nested-tree-node {
  padding-left: 0 !important;
}
Let me know if you'd like me to regenerate the full HTML with this change.




=================================================

<div class="shelf-wrapper">
  <div class="tree-panel">
    <h3>{{ title }}</h3>

    <mat-tree [dataSource]="dataSource" [treeControl]="treeControl">
      <!-- Leaf node -->
      <mat-tree-node *matTreeNodeDef="let node">
        <div
          class="node-line compact-node"
          [class.selected]="node === selectedNode"
          [ngStyle]="{ 'margin-left.px': (node.level || 0) * 20 }"
          (click)="onSelect(node)"
          (contextmenu)="onRightClick($event, node)"
        >
          <button mat-icon-button disabled></button>
          <mat-icon class="node-icon">insert_drive_file</mat-icon>
          {{ node.Name }}
        </div>
      </mat-tree-node>

      <!-- Expandable node -->
      <mat-nested-tree-node *matTreeNodeDef="let node; when: hasChild">
        <div
          class="node-line compact-node"
          [class.selected]="node === selectedNode"
          [ngStyle]="{ 'margin-left.px': (node.level || 0) * 20 }"
          (click)="onSelect(node)"
          (contextmenu)="onRightClick($event, node)"
        >
          <button mat-icon-button matTreeNodeToggle>
            <mat-icon>
              {{ treeControl.isExpanded(node) ? 'expand_more' : 'chevron_right' }}
            </mat-icon>
          </button>
          <mat-icon class="node-icon">folder</mat-icon>
          {{ node.Name }}
        </div>
        <div *ngIf="treeControl.isExpanded(node)">
          <ng-container matTreeNodeOutlet></ng-container>
        </div>
      </mat-nested-tree-node>
    </mat-tree>
  </div>

  <div *ngIf="selectedNode?.level === 0 && (showLimits || showChecks)" class="form-panel">
    <h4>Checks / Limits</h4>

    <div *ngIf="showLimits" class="form-section">
      <mat-form-field appearance="outline">
        <mat-label>Min</mat-label>
        <input matInput [(ngModel)]="selectedNode.MainMin"
               (change)="updateValue('min', selectedNode.MainMin)" [disabled]="disableMinMax" />
      </mat-form-field>

      <mat-form-field appearance="outline">
        <mat-label>Max</mat-label>
        <input matInput [(ngModel)]="selectedNode.MainMax"
               (change)="updateValue('max', selectedNode.MainMax)" [disabled]="disableMinMax" />
      </mat-form-field>
    </div>

    <div *ngIf="showChecks" class="form-section">
      <mat-form-field appearance="outline">
        <mat-label>Soft</mat-label>
        <input matInput [(ngModel)]="selectedNode.MainSoftCheck"
               (change)="updateValue('soft', selectedNode.MainSoftCheck)" />
      </mat-form-field>

      <mat-form-field appearance="outline">
        <mat-label>Hard</mat-label>
        <input matInput [(ngModel)]="selectedNode.MainHardCheck"
               (change)="updateValue('hard', selectedNode.MainHardCheck)" />
      </mat-form-field>
    </div>
  </div>
</div>

<!-- Right-click context menu -->
<div class="rMenu" *ngIf="contextMenuVisible" [ngStyle]="{ top: contextY + 'px', left: contextX + 'px' }">
  <ul>
    <li><button [disabled]="!canAdd()" (click)="openAddDialog()">Add Variable</button></li>
    <li><button [disabled]="!canEdit()" (click)="openEditDialog()">Edit Variable</button></li>
    <li><button [disabled]="!canDelete()" (click)="deleteNode()">Delete Variable</button></li>
    <li><button [disabled]="!canRetire()" (click)="retireNode()">Retire</button></li>
    <li><button [disabled]="!canUnretire()" (click)="unretireNode()">Unretire</button></li>
  </ul>
</div>

<!-- Add/Edit inline dialog -->
<div class="dialog" *ngIf="showDialog">
  <h3>{{ dialogMode === 'add' ? 'Add' : 'Edit' }} Shelf Variable</h3>
  <mat-form-field appearance="fill">
    <mat-label>Name</mat-label>
    <input matInput [(ngModel)]="dialogNodeName" />
  </mat-form-field>
  <div class="actions">
    <button mat-button (click)="confirmDialog()">{{ dialogMode === 'add' ? 'Add' : 'Save' }}</button>
    <button mat-button (click)="cancelDialog()">Cancel</button>
  </div>
</div>

======================================================

import { Component, HostListener, Inject, Input, OnInit } from '@angular/core';
import { NestedTreeControl } from '@angular/cdk/tree';
import { MatTreeNestedDataSource } from '@angular/material/tree';
import { cloneDeep } from 'lodash';
import { HttpClient } from '@angular/common/http';
import { MatDialog } from '@angular/material/dialog';
import { Router, ActivatedRoute } from '@angular/router';
import { CommonService } from '../shared/common.service';
import { SnackbarService } from '../shared/snackbar.service';
import { Subject, takeUntil } from 'rxjs';

interface ShelfNode {
  Id: number;
  PId?: number;
  Name: string;
  level?: number;
  MainMin?: string;
  MainMax?: string;
  MainSoftCheck?: string;
  MainHardCheck?: string;
  RetiredDate?:string;
  optional?:string;
  IsNewlyAdded?: string;
  children?: ShelfNode[];
}

@Component({
  selector: 'app-shelf-tree',
  templateUrl: './shelf-tree.component.html',
  styleUrls: ['./shelf-tree.component.css']
})
export class ShelfTreeComponent implements OnInit {
@Input() group!: number;
@Input() title!: string;
treeControl = new NestedTreeControl<ShelfNode>(node => node.children);
dataSource = new MatTreeNestedDataSource<ShelfNode>();
selectedNode: ShelfNode | null = null;
showLimits = false;
showChecks = false;
disableMinMax = false;
loggedUser: string;
showSpinner: boolean;

rightClickedNode:ShelfNode | null = null;
showDialog=false;
dialogMode:'add'|'edit'='add';
dialogNodeName='';

contextMenuVisible=false;
contextX=0;
contextY=0;

private unsubscribe$ = new Subject<void>();
  constructor(
    public http: HttpClient,
        @Inject('BASE_URL') public baseUrl: string,
        private router: Router,
        private activatedRoute: ActivatedRoute,
        private dialog: MatDialog,
        public service: CommonService,
        private _snackBar: SnackbarService, 
  ) {  this.loggedUser = localStorage.getItem("loggedUserId");}

  ngOnInit(): void {
    this. getShelfVars()
  }

  getShelfVars(){
    this.http.post<any>(this.baseUrl + `api/MasterShelfVariables/GetShelfVar`,{Group:Number(this.group)})
        .pipe(takeUntil(this.unsubscribe$)).subscribe({next:(res)=>{
          this.showSpinner = true
            
            if(res){
              const nestedData = this.buildNestedTree(res);
              this.dataSource.data=nestedData;
              this.expandAllNodes(nestedData)
              if (nestedData.length > 0) {
                this.onSelect(nestedData[0]); // Select root
              }
            }
          
            this.showSpinner = false
        },
        error:(error)=>{console.error(error);  this.showSpinner = false}})
    }
        
  

  hasChild = (_: number, node: ShelfNode) => !!node.children && node.children.length > 0;

  onSelect(node: ShelfNode): void {
    this.selectedNode = node;
    this.configureDisplayFields(node);
  }

  onRightClick(event:MouseEvent,node:ShelfNode):void{
    event.preventDefault();
    console.log(node)
    this.contextX=event.clientX
    this.contextY=event.clientY
    this.contextMenuVisible=true
    this.rightClickedNode=node
  }

  @HostListener('document:click')
  hideContextMenu(){
    this.contextMenuVisible=false
  }

  configureDisplayFields(node: ShelfNode): void {
    const limitIds = [11160, 14825, 15490, 15995, 16910, 22700];
    const checkIds = [10100, 20000, 30100];

    this.disableMinMax = limitIds.includes(node.Id);
    this.showLimits = !checkIds.includes(node.Id);
    this.showChecks = !this.disableMinMax;
  }

 updateValue(type: 'min' | 'max' | 'soft' | 'hard', val: string) {
    if (!this.selectedNode) return;
    (this.selectedNode as any)[{
      min: 'mainMin',
      max: 'mainMax',
      soft: 'main_soft_check',
      hard: 'main_hard_check'
    }[type]] = val;
    this.selectedNode.IsNewlyAdded = 'U';
  }

  openAddDialog():void{
    this.hideContextMenu();
    this.dialogMode='add';
    this.dialogNodeName=''
    this.showDialog=true;
  }

  openEditDialog():void{
    if(!this.rightClickedNode) return;
    this.hideContextMenu();
    this.dialogMode='edit';
    this.dialogNodeName=this.rightClickedNode.Name;
    this.showDialog=true;
  }

  confirmDialog(): void {
    if (this.dialogMode === 'add') {
      const newNode: ShelfNode = {
        Id: Math.floor(Math.random() * 100000),
        PId: this.rightClickedNode!.Id,
        Name: this.dialogNodeName,
        optional: 'Y',
        IsNewlyAdded: 'N',
        children: []
      };
      this.rightClickedNode!.children = this.rightClickedNode!.children || [];
      this.rightClickedNode!.children.push(newNode);
      this.treeControl.expand(this.rightClickedNode!);
    } else if (this.dialogMode === 'edit') {
      this.rightClickedNode!.Name = this.dialogNodeName;
      this.rightClickedNode!.IsNewlyAdded = 'U';
    }
    this.showDialog = false;
  }

  cancelDialog(): void {
    this.showDialog = false;
  }

  deleteNode(): void {
    if (!this.rightClickedNode) return;
    const parent = this.findParent(this.dataSource.data, this.rightClickedNode);
    if (parent) {
      parent.children = parent.children?.filter(c => c.Id !== this.rightClickedNode!.Id);
    } else {
      this.dataSource.data = this.dataSource.data.filter(c => c.Id !== this.rightClickedNode!.Id);
    }
    this.contextMenuVisible = false;
  }

  retireNode(): void {
    if (!this.rightClickedNode) return;
    this.rightClickedNode.Name += ' (Retired)';
    this.rightClickedNode.RetiredDate = new Date().toLocaleDateString();
    this.rightClickedNode.IsNewlyAdded = 'U';
    this.contextMenuVisible = false;
  }



  unretireNode(): void {
    if (!this.rightClickedNode) return;
    this.rightClickedNode.Name = this.rightClickedNode.Name.replace(' (Retired)', '');
    this.rightClickedNode.RetiredDate = '';
    this.rightClickedNode.IsNewlyAdded = 'U';
    this.contextMenuVisible = false;
  }


  getSelectedData(): any[] {
    const res: any[] = [];
    const walk = (node: ShelfNode) => {
      if (['N', 'U'].includes(node.IsNewlyAdded || '')) {
        const copy = cloneDeep(node);
        delete (copy as any).children;
        res.push(copy);
      }
      node.children?.forEach(walk);
    };
    this.dataSource.data.forEach(walk);
    return res;
  }

  private buildNestedTree(flat: ShelfNode[]): ShelfNode[] {
    const map: { [Id: number]: ShelfNode } = {};
    const roots: ShelfNode[] = [];

    flat.forEach(n => {
      n.children = [];
      // n.level = 0;
      map[n.Id] = n;
    });

    flat.forEach(n => {
      if (n.PId && map[n.PId]) {
        // n.level = (map[n.PId].level || 0) + 1;
        map[n.PId].children!.push(n);
      } else {
        roots.push(n);
      }
    });

    const setLevel = (node:ShelfNode,level:number)=>{
      node.level=level
      node.children?.forEach(child=>setLevel(child,level+1))
    }

    roots.forEach(root=>setLevel(root,0))

    return roots;
  }

  private expandAllNodes(Node:ShelfNode[]):void{
    Node.forEach(node=>{
      this.treeControl.expand(node);
      if(node.children&&node.children.length>0){
        this.expandAllNodes(node.children)
      }
    })
  }

  private findParent(nodes: ShelfNode[], target: ShelfNode): ShelfNode | null {
    for (const node of nodes) {
      if (node.children?.some(child => child.Id === target.Id)) {
        return node;
      }
      const parent = node.children ? this.findParent(node.children, target) : null;
      if (parent) return parent;
    }
    return null;
  }

  canAdd(): boolean {
  return this.group === 1 && (this.rightClickedNode?.level ?? 0) < 2;
  }

  canEdit(): boolean {
    return !!this.rightClickedNode && this.rightClickedNode.level !== 0 &&!this.rightClickedNode.RetiredDate;
  }

  canDelete(): boolean {
    return this.rightClickedNode?.IsNewlyAdded === 'N';
  }

  canRetire(): boolean {
    return !!this.rightClickedNode && !this.rightClickedNode.RetiredDate;
  }

  canUnretire(): boolean {
    return !!this.rightClickedNode && !!this.rightClickedNode.RetiredDate;
  }
}

=================
.shelf-wrapper {
  display: flex;
  gap: 24px;
  align-items: flex-start;
  padding: 16px;
}

.tree-panel {
  width: 600px;
  min-width: 600px;
  max-width: 600px;
  border: 1px solid #ccc;
  border-radius: 8px;
  background-color: #fafafa;
  padding: 12px;
  overflow-y: auto;
  max-height: 70vh;
  min-height: 35vh;
}

.node-line {
  display: flex;
  align-items: center;
  cursor: pointer;
  padding: 4px;
  border-radius: 4px;
  transition: background 0.2s ease;
}

.node-line:hover {
  background: #e3f2fd;
}

.node-icon {
  margin-right: 8px;
  color: #3f51b5;
}

.form-panel {
  flex: 1;
  border: 1px solid #ccc;
  border-radius: 8px;
  padding: 16px;
  background: #ffffff;
  max-width: 500px;
}

.form-panel h4 {
  margin-bottom: 12px;
  color: #1976d2;
  font-weight: 500;
}

.form-section {
  display: flex;
  flex-wrap: wrap;
  gap: 16px;
  margin-bottom: 16px;
}

.node-line.compact-node{
  height: 30px;
  display: flex;
  align-items: center;
}

.rMenu{
  position: fixed;
  background: white;
  border: 1px solid black;
  z-index: 9999;
  padding: 4px;
}

.selected { background: #bbdefb; border-radius: 4px; }

mat-form-field {
  flex: 1 1 120px;
}






