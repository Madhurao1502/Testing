// shelf-tree.component.ts using Angular Material MatTree
import { Component, Input, OnInit } from '@angular/core';
import { NestedTreeControl } from '@angular/cdk/tree';
import { MatTreeNestedDataSource } from '@angular/material/tree';
import { ShelfService } from '../shelf.service';
import { cloneDeep } from 'lodash';

interface ShelfNode {
  id: number;
  name: string;
  mainMin?: string;
  mainMax?: string;
  main_soft_check?: string;
  main_hard_check?: string;
  isNewlyAdded?: string;
  children?: ShelfNode[];
}

@Component({
  selector: 'app-shelf-tree',
  templateUrl: './shelf-tree.component.html',
  styleUrls: ['./shelf-tree.component.scss']
})
export class ShelfTreeComponent implements OnInit {
  @Input() group!: number;
  @Input() title!: string;

  treeControl = new NestedTreeControl<ShelfNode>(node => node.children);
  dataSource = new MatTreeNestedDataSource<ShelfNode>();

  selectedNode: ShelfNode | null = null;
  showLimits = false;
  showChecks = false;
  disableMinMax = false;

  constructor(private shelfService: ShelfService) {}

  ngOnInit(): void {
    this.shelfService.getShelfVars(this.group).subscribe((data) => {
      this.dataSource.data = data;
    });
  }

  hasChild = (_: number, node: ShelfNode) => !!node.children && node.children.length > 0;

  onSelect(node: ShelfNode): void {
    this.selectedNode = node;
    this.configureDisplayFields(node);
  }

  configureDisplayFields(node: ShelfNode): void {
    const limitIds = [11160, 14825, 15490, 15995, 16910, 22700];
    const checkIds = [10100, 20000, 30100];

    this.disableMinMax = limitIds.includes(node.id);

    if (this.disableMinMax) {
      this.showLimits = true;
      this.showChecks = false;
    } else if (checkIds.includes(node.id)) {
      this.showLimits = false;
      this.showChecks = true;
    } else {
      this.showLimits = true;
      this.showChecks = true;
    }
  }

  updateValue(type: 'min' | 'max' | 'soft' | 'hard', value: string): void {
    if (!this.selectedNode) return;

    if (type === 'min') this.selectedNode.mainMin = value;
    if (type === 'max') this.selectedNode.mainMax = value;
    if (type === 'soft') this.selectedNode.main_soft_check = value;
    if (type === 'hard') this.selectedNode.main_hard_check = value;

    this.selectedNode.isNewlyAdded = 'U';
  }

  getSelectedData(): any[] {
    const result: any[] = [];
    const traverse = (node: ShelfNode) => {
      if (node.isNewlyAdded === 'N' || node.isNewlyAdded === 'U') {
        const cleaned = cloneDeep(node);
        delete cleaned.children;
        result.push(cleaned);
      }
      if (node.children) {
        node.children.forEach(child => traverse(child));
      }
    };
    this.dataSource.data.forEach(n => traverse(n));
    return result;
  }
}


<h3>{{ title }}</h3>

<mat-tree [dataSource]="dataSource" [treeControl]="treeControl">
  <!-- Node without children -->
  <mat-tree-node *matTreeNodeDef="let node" matTreeNodePadding>
    <button mat-icon-button disabled></button>
    <span (click)="onSelect(node)">{{ node.name }}</span>
  </mat-tree-node>

  <!-- Node with children -->
  <mat-nested-tree-node *matTreeNodeDef="let node; when: hasChild">
    <div class="mat-tree-node" (click)="onSelect(node)">
      <button mat-icon-button matTreeNodeToggle [attr.aria-label]="'toggle ' + node.name">
        <mat-icon>
          {{ treeControl.isExpanded(node) ? 'expand_more' : 'chevron_right' }}
        </mat-icon>
      </button>
      {{ node.name }}
    </div>
    <div *ngIf="treeControl.isExpanded(node)">
      <ng-container matTreeNodeOutlet></ng-container>
    </div>
  </mat-nested-tree-node>
</mat-tree>

<div *ngIf="selectedNode" style="margin-top: 10px">
  <h4>{{ title }} Limits</h4>

  <div *ngIf="showLimits">
    <mat-form-field>
      <input matInput placeholder="Min" [(ngModel)]="selectedNode.mainMin"
             (change)="updateValue('min', selectedNode.mainMin)" [disabled]="disableMinMax" />
    </mat-form-field>

    <mat-form-field>
      <input matInput placeholder="Max" [(ngModel)]="selectedNode.mainMax"
             (change)="updateValue('max', selectedNode.mainMax)" [disabled]="disableMinMax" />
    </mat-form-field>
  </div>

  <div *ngIf="showChecks">
    <mat-form-field>
      <input matInput placeholder="Soft" [(ngModel)]="selectedNode.main_soft_check"
             (change)="updateValue('soft', selectedNode.main_soft_check)" />
    </mat-form-field>

    <mat-form-field>
      <input matInput placeholder="Hard" [(ngModel)]="selectedNode.main_hard_check"
             (change)="updateValue('hard', selectedNode.main_hard_check)" />
    </mat-form-field>
  </div>
</div>

***************************************

<mat-tab-group>
  <mat-tab label="Location">
    <app-shelf-tree #treeLocation [group]="1" title="Location"></app-shelf-tree>
  </mat-tab>
  <mat-tab label="Section">
    <app-shelf-tree #treeSection [group]="2" title="Section"></app-shelf-tree>
  </mat-tab>
  <mat-tab label="Shelf">
    <app-shelf-tree #treeShelf [group]="3" title="Shelf"></app-shelf-tree>
  </mat-tab>
  <mat-tab label="UPC">
    <app-shelf-tree #treeUPC [group]="4" title="UPC"></app-shelf-tree>
  </mat-tab>
</mat-tab-group>

<button mat-raised-button color="primary" (click)="save()">Save Shelf Variables</button>


import { Component, ViewChild } from '@angular/core';
import { ShelfTreeComponent } from '../shelf-tree/shelf-tree.component';

@Component({
  selector: 'app-shelf-master',
  templateUrl: './shelf-master.component.html',
})
export class ShelfMasterComponent {
  @ViewChild('treeLocation') treeLocation!: ShelfTreeComponent;
  @ViewChild('treeSection') treeSection!: ShelfTreeComponent;
  @ViewChild('treeShelf') treeShelf!: ShelfTreeComponent;
  @ViewChild('treeUPC') treeUPC!: ShelfTreeComponent;

  save(): void {
    const allData = [
      ...this.treeLocation.getSelectedData(),
      ...this.treeSection.getSelectedData(),
      ...this.treeShelf.getSelectedData(),
      ...this.treeUPC.getSelectedData(),
    ];
    console.log('Saving:', allData);
    // Call ShelfService.saveShelfVars(allData) if needed
  }
}


>>>>>>>>>>>>>>>>>>>>>

function buildNestedTree(flatData: any[]): any[] {
  const idMapping: { [key: number]: any } = {};
  const rootNodes: any[] = [];

  // Step 1: Map by ID
  flatData.forEach(node => {
    node.children = [];
    idMapping[node.id] = node;
  });

  // Step 2: Build the hierarchy
  flatData.forEach(node => {
    if (node.pId && idMapping[node.pId]) {
      idMapping[node.pId].children.push(node);
    } else {
      rootNodes.push(node);
    }
  });

  return rootNodes;
}

ngOnInit(): void {
  this.shelfService.getShelfVars(this.group).subscribe((data) => {
    const nestedData = buildNestedTree(data);
    this.dataSource.data = nestedData;
  });
}
****************************************************
.tree-container {
  border: 1px solid #ccc;
  border-radius: 6px;
  background-color: #fdfdfd;
  padding: 8px 12px;
  max-height: 500px;
  overflow-y: auto;
  margin-bottom: 16px;
}

.custom-tree .mat-tree-node,
.custom-tree .mat-nested-tree-node {
  position: relative;
  padding-left: 16px;
}

.node-line {
  display: flex;
  align-items: center;
  padding: 4px 0;
  cursor: pointer;
  position: relative;
}

.node-icon {
  margin-right: 6px;
  color: #3f51b5;
}

.node-label {
  font-size: 14px;
  color: #333;
}

.node-line:hover {
  background-color: #e3f2fd;
  border-radius: 4px;
}

.selected {
  background-color: #bbdefb !important;
  border-radius: 4px;
}

.form-panel {
  border: 1px solid #ccc;
  border-radius: 6px;
  padding: 16px;
  background-color: #fafafa;
}

.form-panel h4 {
  margin-top: 0;
  color: #1976d2;
  font-weight: 500;
}

.form-section {
  display: flex;
  gap: 16px;
  margin-top: 8px;
}

mat-form-field {
  flex: 1;
}

<h3>{{ title }}</h3>

<div class="tree-container">
  <mat-tree [dataSource]="dataSource" [treeControl]="treeControl" class="custom-tree">
    <!-- Leaf node -->
    <mat-tree-node *matTreeNodeDef="let node" matTreeNodePadding>
      <div class="node-line">
        <button mat-icon-button disabled></button>
        <mat-icon class="node-icon">insert_drive_file</mat-icon>
        <span class="node-label" (click)="onSelect(node)">{{ node.name }}</span>
      </div>
    </mat-tree-node>

    <!-- Expandable node -->
    <mat-nested-tree-node *matTreeNodeDef="let node; when: hasChild">
      <div class="mat-tree-node node-line" [class.selected]="node === selectedNode">
        <button mat-icon-button matTreeNodeToggle>
          <mat-icon>
            {{ treeControl.isExpanded(node) ? 'expand_more' : 'chevron_right' }}
          </mat-icon>
        </button>
        <mat-icon class="node-icon">folder</mat-icon>
        <span class="node-label" (click)="onSelect(node)">{{ node.name }}</span>
      </div>
      <div *ngIf="treeControl.isExpanded(node)">
        <ng-container matTreeNodeOutlet></ng-container>
      </div>
    </mat-nested-tree-node>
  </mat-tree>
</div>

<div *ngIf="selectedNode" class="form-panel">
  <h4>Checks / Limits</h4>

  <div *ngIf="showLimits" class="form-section">
    <mat-form-field>
      <input matInput placeholder="Min" [(ngModel)]="selectedNode.mainMin"
             (change)="updateValue('min', selectedNode.mainMin)" [disabled]="disableMinMax" />
    </mat-form-field>

    <mat-form-field>
      <input matInput placeholder="Max" [(ngModel)]="selectedNode.mainMax"
             (change)="updateValue('max', selectedNode.mainMax)" [disabled]="disableMinMax" />
    </mat-form-field>
  </div>

  <div *ngIf="showChecks" class="form-section">
    <mat-form-field>
      <input matInput placeholder="Soft" [(ngModel)]="selectedNode.main_soft_check"
             (change)="updateValue('soft', selectedNode.main_soft_check)" />
    </mat-form-field>

    <mat-form-field>
      <input matInput placeholder="Hard" [(ngModel)]="selectedNode.main_hard_check"
             (change)="updateValue('hard', selectedNode.main_hard_check)" />
    </mat-form-field>
  </div>
</div>


