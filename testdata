/**
 * Checks if the given name is unique among siblings of the rightClickedNode
 * @param name Name to check for duplication
 * @param excludeId Optional ID to exclude (when editing the same node)
 * @returns true if the name is unique, false if duplicate exists
 */
isDuplicateName(name: string, excludeId?: number): boolean {
  if (!this.rightClickedNode) return true; // no node selected means no duplicates

  const parent = this.findParent(this.dataSource.data, this.rightClickedNode);

  // Determine siblings to check: children of parent or root nodes if no parent
  const siblings = parent ? parent.children || [] : this.dataSource.data;

  // Check if any sibling has the same name (case-insensitive), excluding excludeId node
  const nameLower = name.trim().toLowerCase();
  return !siblings.some(
    node => node.Name.trim().toLowerCase() === nameLower && node.Id !== excludeId
  );
}

confirmDialog(): void {
  if (!this.dialogNodeName.trim()) {
    alert('Name cannot be empty.');
    return;
  }

  // Check for duplicate, excluding current node for edit
  const excludeId = this.dialogMode === 'edit' && this.rightClickedNode ? this.rightClickedNode.Id : undefined;

  if (!this.isDuplicateName(this.dialogNodeName, excludeId)) {
    alert(`Variable "${this.dialogNodeName.trim()}" already exists. Please use a different name.`);
    return;
  }

  if (this.dialogMode === 'add') {
    // Add node logic (as you already have)
    const newNode: ShelfNode = {
      Id: Math.floor(Math.random() * 100000),
      PId: this.rightClickedNode!.Id,
      Name: this.dialogNodeName.trim(),
      optional: 'Y',
      IsNewlyAdded: 'N',
      children: []
    };
    this.rightClickedNode!.children = this.rightClickedNode!.children || [];
    this.rightClickedNode!.children.push(newNode);
    this.treeControl.expand(this.rightClickedNode!);
  } else if (this.dialogMode === 'edit') {
    // Edit node logic
    if (this.rightClickedNode) {
      this.rightClickedNode.Name = this.dialogNodeName.trim();
      this.rightClickedNode.IsNewlyAdded = 'U';
    }
  }

  // Refresh UI
  this.dataSource.data = this.dataSource.data.slice();

  this.showDialog = false;
}
