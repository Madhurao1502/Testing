<ul class="shelf-tree-list">
  <ng-container *ngFor="let node of nodes">
    <li>
      <div class="node-content">
        <button *ngIf="node.children?.length"
                (click)="node.open = !node.open; $event.stopPropagation()">
          {{ node.open ? '-' : '+' }}
        </button>

        <input type="checkbox" [checked]="node.checked" [disabled]="node.disabled || disabled"
               (change)="toggleCheck(node)" />
        <span [class.disabled]="node.disabled || disabled" (click)="selectNode(node)">{{ node.name }}</span>

        <button *ngIf="node.children?.length && !disabled && !node.disabled"
                (click)="onSelectAllChildrenClick(node, $event)"> <b>(Select all Child variables)</b></button>
      </div>

      <app-shelf-task-tree *ngIf="node.children?.length && node.open"
        [nodes]="node.children"
        [disabled]="disabled"
        (nodeCheck)="nodeCheck.emit($event)"
        (nodeSelect)="nodeSelect.emit($event)"
        (selectAllChildren)="selectAllChildren.emit($event)">
      </app-shelf-task-tree>
    </li>
  </ng-container>
</ul>


private processTreeData(data: ShelfNode[]): ShelfNode[] {
  const nodeMap = new Map<number, ShelfNode>();
  const rootNodes: ShelfNode[] = [];

  data.forEach(item => {
    const node: ShelfNode = {
      ...item,
      children: [],
      isParent: false,
      open: true,  // set default expanded state
      disabled: this.isTaskLocked() || (item.optional !== 'Y' && item.optional !== undefined)
    };
    nodeMap.set(item.id, node);
  });

  data.forEach(item => {
    const node = nodeMap.get(item.id)!;
    const parent = nodeMap.get(item.pId);
    if (parent) {
      parent.children!.push(node);
      parent.isParent = true;
    } else {
      rootNodes.push(node);
    }
  });

  return rootNodes;
}


<div class="shelf-task-container" style="display: flex; gap: 20px;">
  <div class="tree-container" style="flex: 1; max-width: 60%;">
    <mat-tab-group [(selectedIndex)]="selectedTabIndex" (selectedIndexChange)="onTabChangeByIndex($event)">
      <!-- tabs with trees -->
    </mat-tab-group>
  </div>

  <div class="limits-container" style="flex: 0 0 300px;">
    <div *ngIf="showLimitsPanel">
      <form [formGroup]="limitsForm">
        <mat-form-field>
          <mat-label>Min</mat-label>
          <input matInput formControlName="min" [disabled]="isLocked" />
        </mat-form-field>
        <mat-form-field>
          <mat-label>Max</mat-label>
          <input matInput formControlName="max" [disabled]="isLocked" />
        </mat-form-field>

        <mat-form-field *ngIf="showChecksPanel">
          <mat-label>Soft Check</mat-label>
          <input matInput formControlName="soft" [disabled]="isLocked" />
        </mat-form-field>
        <mat-form-field *ngIf="showChecksPanel">
          <mat-label>Hard Check</mat-label>
          <input matInput formControlName="hard" [disabled]="isLocked" />
        </mat-form-field>
      </form>
    </div>
  </div>
</div>
<mat-form-field *ngIf="activeTab === 'location' || activeTab === 'section' || activeTab === 'shelf' || activeTab === 'upc'">
  <!-- But only show for location or hide in others according to the logic -->
</mat-form-field>
<mat-form-field *ngIf="activeTab === 'location'">
  <mat-label>Min</mat-label>
  <input matInput formControlName="min" [disabled]="isLocked" />
</mat-form-field>

<mat-form-field *ngIf="activeTab === 'location'">
  <mat-label>Max</mat-label>
  <input matInput formControlName="max" [disabled]="isLocked" />
</mat-form-field>
get showMinMax(): boolean {
  return this.activeTab === 'location';
}

get showSoftHardChecks(): boolean {
  return ['section', 'shelf', 'upc'].includes(this.activeTab);
}

<mat-form-field *ngIf="showMinMax">
  <!-- min / max inputs -->
</mat-form-field>

<mat-form-field *ngIf="showSoftHardChecks">
  <!-- soft / hard inputs -->
</mat-form-field>
<mat-accordion multi>
  <mat-expansion-panel *ngFor="let category of reviewCategories" [expanded]="expandedCategory === category" (opened)="expandedCategory = category" (closed)="expandedCategory = null">
    <mat-expansion-panel-header>
      <mat-panel-title>{{ category.ReviewCategoryName }}</mat-panel-title>
      <mat-panel-description>
        <!-- maybe show selected count or icons -->
      </mat-panel-description>
    </mat-expansion-panel-header>

    <div *ngFor="let keycat of keycatsMap[category.ReviewCategoryNumber]">
      <!-- Render keycat details here with checkboxes and inputs similar to your original table -->
      <mat-checkbox [checked]="isSelected(keycat)" [disabled]="disabled" (change)="onKeycatSelected(keycat, $event.checked)">{{ keycat.KeycatName }}</mat-checkbox>
      <!-- add more inputs for QCUnder etc -->
    </div>
  </mat-expansion-panel>
</mat-accordion>
