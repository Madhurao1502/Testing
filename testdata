<ul class="shelf-tree-list">
  <ng-container *ngFor="let node of nodes">
    <li>
      <div class="node-content">
        <button *ngIf="node.children?.length"
                (click)="node.open = !node.open; $event.stopPropagation()">
          {{ node.open ? '-' : '+' }}
        </button>

        <input type="checkbox" [checked]="node.checked" [disabled]="node.disabled || disabled"
               (change)="toggleCheck(node)" />
        <span [class.disabled]="node.disabled || disabled" (click)="selectNode(node)">{{ node.name }}</span>

        <button *ngIf="node.children?.length && !disabled && !node.disabled"
                (click)="onSelectAllChildrenClick(node, $event)"> <b>(Select all Child variables)</b></button>
      </div>

      <app-shelf-task-tree *ngIf="node.children?.length && node.open"
        [nodes]="node.children"
        [disabled]="disabled"
        (nodeCheck)="nodeCheck.emit($event)"
        (nodeSelect)="nodeSelect.emit($event)"
        (selectAllChildren)="selectAllChildren.emit($event)">
      </app-shelf-task-tree>
    </li>
  </ng-container>
</ul>


private processTreeData(data: ShelfNode[]): ShelfNode[] {
  const nodeMap = new Map<number, ShelfNode>();
  const rootNodes: ShelfNode[] = [];

  data.forEach(item => {
    const node: ShelfNode = {
      ...item,
      children: [],
      isParent: false,
      open: true,  // set default expanded state
      disabled: this.isTaskLocked() || (item.optional !== 'Y' && item.optional !== undefined)
    };
    nodeMap.set(item.id, node);
  });

  data.forEach(item => {
    const node = nodeMap.get(item.id)!;
    const parent = nodeMap.get(item.pId);
    if (parent) {
      parent.children!.push(node);
      parent.isParent = true;
    } else {
      rootNodes.push(node);
    }
  });

  return rootNodes;
}


<div class="shelf-task-container" style="display: flex; gap: 20px;">
  <div class="tree-container" style="flex: 1; max-width: 60%;">
    <mat-tab-group [(selectedIndex)]="selectedTabIndex" (selectedIndexChange)="onTabChangeByIndex($event)">
      <!-- tabs with trees -->
    </mat-tab-group>
  </div>

  <div class="limits-container" style="flex: 0 0 300px;">
    <div *ngIf="showLimitsPanel">
      <form [formGroup]="limitsForm">
        <mat-form-field>
          <mat-label>Min</mat-label>
          <input matInput formControlName="min" [disabled]="isLocked" />
        </mat-form-field>
        <mat-form-field>
          <mat-label>Max</mat-label>
          <input matInput formControlName="max" [disabled]="isLocked" />
        </mat-form-field>

        <mat-form-field *ngIf="showChecksPanel">
          <mat-label>Soft Check</mat-label>
          <input matInput formControlName="soft" [disabled]="isLocked" />
        </mat-form-field>
        <mat-form-field *ngIf="showChecksPanel">
          <mat-label>Hard Check</mat-label>
          <input matInput formControlName="hard" [disabled]="isLocked" />
        </mat-form-field>
      </form>
    </div>
  </div>
</div>
<mat-form-field *ngIf="activeTab === 'location' || activeTab === 'section' || activeTab === 'shelf' || activeTab === 'upc'">
  <!-- But only show for location or hide in others according to the logic -->
</mat-form-field>
<mat-form-field *ngIf="activeTab === 'location'">
  <mat-label>Min</mat-label>
  <input matInput formControlName="min" [disabled]="isLocked" />
</mat-form-field>

<mat-form-field *ngIf="activeTab === 'location'">
  <mat-label>Max</mat-label>
  <input matInput formControlName="max" [disabled]="isLocked" />
</mat-form-field>
get showMinMax(): boolean {
  return this.activeTab === 'location';
}

get showSoftHardChecks(): boolean {
  return ['section', 'shelf', 'upc'].includes(this.activeTab);
}

<mat-form-field *ngIf="showMinMax">
  <!-- min / max inputs -->
</mat-form-field>

<mat-form-field *ngIf="showSoftHardChecks">
  <!-- soft / hard inputs -->
</mat-form-field>
<mat-accordion multi>
  <mat-expansion-panel *ngFor="let category of reviewCategories" [expanded]="expandedCategory === category" (opened)="expandedCategory = category" (closed)="expandedCategory = null">
    <mat-expansion-panel-header>
      <mat-panel-title>{{ category.ReviewCategoryName }}</mat-panel-title>
      <mat-panel-description>
        <!-- maybe show selected count or icons -->
      </mat-panel-description>
    </mat-expansion-panel-header>

    <div *ngFor="let keycat of keycatsMap[category.ReviewCategoryNumber]">
      <!-- Render keycat details here with checkboxes and inputs similar to your original table -->
      <mat-checkbox [checked]="isSelected(keycat)" [disabled]="disabled" (change)="onKeycatSelected(keycat, $event.checked)">{{ keycat.KeycatName }}</mat-checkbox>
      <!-- add more inputs for QCUnder etc -->
    </div>
  </mat-expansion-panel>
</mat-accordion>



=====

private loadTreeData() {
  // Assume fetchTreeData() returns data from service/api
  this.rawData = this.fetchTreeData();
  this.locationTree = this.processTreeData(this.rawData);

  if (this.locationTree.length > 0) {
    // Preselect first root node
    const firstNode = this.locationTree[0];
    firstNode.checked = true;
    // Update panels or form controls with its min/max values
    this.updatePanelsForNode(firstNode);
    
    // Optional: Also expand it explicitly, if needed
    firstNode.open = true;
  }
}

onSelectAllChildrenClick(node: ShelfNode, event: Event) {
  event.stopPropagation();
  if (this.isLocked) return;

  this.checkAllChildren(node);

  // Force collapse then expand to refresh visual state
  node.open = false;
  setTimeout(() => {
    node.open = true;
  }, 0);
}

/* Container with tree and limits side by side */
.shelf-task-container {
  display: flex;
  gap: 20px;
  padding: 16px;
  font-family: "Segoe UI", Tahoma, Geneva, Verdana, sans-serif;
  background: #fafafa;
  border-radius: 6px;
  box-shadow: 0 2px 6px rgb(0 0 0 / 0.1);
  min-height: 400px;
}

/* Tree container */
.tree-container {
  flex: 1 1 60%;
  border: 1px solid #ddd;
  border-radius: 4px;
  padding: 12px;
  background: white;
  overflow-y: auto;
  max-height: 600px;
}

/* Limits container (min/max etc) */
.limits-container {
  flex: 0 0 300px;
  border: 1px solid #ddd;
  border-radius: 4px;
  padding: 12px 16px;
  background: white;
  box-shadow: inset 0 0 5px rgb(0 0 0 / 0.05);
}

/* Shelf tree list styles */
.shelf-tree-list {
  list-style: none;
  padding-left: 12px;
  margin: 0;
}

/* Each tree node styles */
.shelf-tree-list li {
  margin-bottom: 6px;
  font-size: 14px;
  user-select: none;
}

/* Node content section */
.node-content {
  display: flex;
  align-items: center;
  gap: 8px;
}

/* Expand/collapse toggle button */
.node-content button {
  background: none;
  border: none;
  font-weight: bold;
  cursor: pointer;
  width: 25px;
  height: 25px;
  color: #444;
}

.node-content button:hover {
  color: #007bff;
  background: #eaf4ff;
  border-radius: 3px;
}

/* Disabled node text style */
.node-content span.disabled {
  color: #aaa;
  cursor: not-allowed;
}

/* Select all children button */
.node-content button.select-all {
  font-weight: normal;
  font-size: 12px;
  color: #007bff;
  cursor: pointer;
  background: none;
  border: none;
  padding: 0;
  text-decoration: underline;
}

.node-content button.select-all:hover {
  color: #004a9f;
}

/* Style inputs in the limits panel */
mat-form-field {
  width: 100%;
  margin-bottom: 12px;
}
<button class="select-all" *ngIf="node.children?.length && !disabled && !node.disabled"
        (click)="onSelectAllChildrenClick(node, $event)">
  <b>(Select all Child variables)</b>
</button>



/* Style for the expand/collapse (+ / -) button */
.node-content > button:first-of-type {
  background-color: #007bff;       /* Bootstrap primary blue */
  color: white;
  border: none;
  border-radius: 3px;
  width: 28px;
  height: 28px;
  font-weight: bold;
  font-size: 18px;
  cursor: pointer;
  user-select: none;
  transition: background-color 0.3s ease;
  display: flex;
  align-items: center;
  justify-content: center;
}

/* Hover effect for expand/collapse button */
.node-content > button:first-of-type:hover {
  background-color: #0056b3;
}

/* Focus outline for accessibility */
.node-content > button:first-of-type:focus {
  outline: 2px solid #0056b3;
  outline-offset: 2px;
}

/* Style for the 'Select all Child variables' button */
.node-content > button.select-all {
  background: none;
  border: none;
  color: #28a745;              /* Bootstrap success green */
  cursor: pointer;
  font-size: 13px;
  font-weight: 600;
  margin-left: auto;           /* Push it to the right edge */
  padding: 0;
  text-decoration: underline;
  user-select: none;
  transition: color 0.3s ease;
}

/* Hover effect for 'Select all Child variables' button */
.node-content > button.select-all:hover {
  color: #1e7e34;
  text-decoration: none;
}

/* Disabled state for buttons */
.node-content > button:disabled,
.node-content > button.select-all:disabled {
  color: #aaa;
  cursor: not-allowed;
  text-decoration: none;
  background-color: transparent;
}

<button class="select-all"
        *ngIf="node.children?.length && !disabled && !node.disabled"
        (click)="onSelectAllChildrenClick(node, $event)">
  <b>(Select all Child variables)</b>
</button>

