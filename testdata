import { Component, Inject } from '@angular/core';
import { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';

export interface ShelfVarDialogData {
  mode: 'add' | 'edit';
  initialName: string;
}

@Component({
  selector: 'app-shelf-var-dialog',
  templateUrl: './shelf-var-dialog.component.html',
  styleUrls: ['./shelf-var-dialog.component.css']
})
export class ShelfVarDialogComponent {
  name: string;

  constructor(
    public dialogRef: MatDialogRef<ShelfVarDialogComponent>,
    @Inject(MAT_DIALOG_DATA) public data: ShelfVarDialogData
  ) {
    this.name = data.initialName || '';
  }

  onCancel(): void {
    this.dialogRef.close(null);
  }

  onConfirm(): void {
    const trimmedName = this.name.trim();
    if (!trimmedName) {
      alert('Name cannot be empty.');
      return;
    }

    // Send name back to caller
    this.dialogRef.close(trimmedName);
  }
}



<h2 mat-dialog-title>
  {{ data.mode === 'add' ? 'Add Shelf Variable' : 'Edit Shelf Variable' }}
</h2>

<div mat-dialog-content>
  <mat-form-field appearance="fill" class="full-width">
    <mat-label>Shelf Variable Name</mat-label>
    <input matInput [(ngModel)]="name" />
  </mat-form-field>
</div>

<div mat-dialog-actions align="end">
  <button mat-button (click)="onCancel()">Cancel</button>
  <button mat-raised-button color="primary" (click)="onConfirm()">
    {{ data.mode === 'add' ? 'Add' : 'Save' }}
  </button>
</div>


.full-width {
  width: 100%;
}


import { MatDialog } from '@angular/material/dialog';
import { ShelfVarDialogComponent, ShelfVarDialogData } from '../shelf-var-dialog/shelf-var-dialog.component';

// Inject MatDialog in constructor:
// constructor(private dialog: MatDialog) { }

openAddDialog(): void {
  if (!this.rightClickedNode) return;

  const dialogRef = this.dialog.open<ShelfVarDialogComponent, ShelfVarDialogData, string>(
    ShelfVarDialogComponent,
    {
      width: '400px',
      data: { mode: 'add', initialName: '' }
    }
  );

  dialogRef.afterClosed().subscribe(result => {
    if (result) {
      // result is the entered shelf variable name
      const newNode: ShelfNode = {
        Id: this.generateNewNodeId(this.rightClickedNode!),
        PId: this.rightClickedNode!.Id,
        Name: result,
        optional: 'Y',
        IsNewlyAdded: 'N',
        children: []
      };
      this.rightClickedNode!.children = this.rightClickedNode!.children || [];
      this.rightClickedNode!.children.push(newNode);
      this.treeControl.expand(this.rightClickedNode!);
      this.dataSource.data = this.dataSource.data.slice(); // Refresh tree UI
    }
  });
}

openEditDialog(): void {
  if (!this.rightClickedNode) return;

  const dialogRef = this.dialog.open<ShelfVarDialogComponent, ShelfVarDialogData, string>(
    ShelfVarDialogComponent,
    {
      width: '400px',
      data: { mode: 'edit', initialName: this.rightClickedNode.Name }
    }
  );

  dialogRef.afterClosed().subscribe(result => {
    if (result) {
      this.rightClickedNode!.Name = result;
      this.rightClickedNode!.IsNewlyAdded = 'U';
      this.dataSource.data = this.dataSource.data.slice(); // Refresh tree UI
    }
  });
}
