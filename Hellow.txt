import { Directive, HostListener, ElementRef } from '@angular/core';

@Directive({
  selector: '[appDecimalOnly]'
})
export class DecimalOnlyDirective {

  constructor(private el: ElementRef) { }

  @HostListener('keydown', ['$event'])
  onKeyDown(event: KeyboardEvent) {
    const allowedKeys = [46, 8, 9, 27, 13, 110, 190]; // Backspace, delete, tab, escape, enter, dot
    const ctrlA = event.key === 'a' && event.ctrlKey;
    const navigationKeys = event.key >= 'Home' && event.key <= 'ArrowDown';

    if (
      allowedKeys.includes(event.keyCode) ||
      ctrlA ||
      navigationKeys
    ) {
      return;
    }

    if (
      (event.shiftKey || event.keyCode < 48 || event.keyCode > 57) &&
      (event.keyCode < 96 || event.keyCode > 105)
    ) {
      event.preventDefault();
    }
  }

  @HostListener('blur', ['$event'])
  onBlur(event: FocusEvent) {
    const inputElement = event.target as HTMLInputElement;
    const val = parseFloat(inputElement.value);

    if (val > 199.99) {
      alert("Cannot exceed 199.99 seconds");
      inputElement.select();
      inputElement.focus();
      inputElement.value = '';
    }
  }
}


++++++++++++++++++++++++

import { Directive, HostListener, ElementRef } from '@angular/core';

@Directive({
  selector: '[appIntegerOnly]'
})
export class IntegerOnlyDirective {

  constructor(private el: ElementRef) { }

  @HostListener('keypress', ['$event'])
  onKeyPress(event: KeyboardEvent) {
    const charCode = event.which ? event.which : event.keyCode;
    if (charCode < 48 || charCode > 57) {
      event.preventDefault();
    }
  }

  @HostListener('change', ['$event'])
  onChange(event: Event) {
    const inputElement = event.target as HTMLInputElement;
    const val = parseInt(inputElement.value, 10);

    if (val === 0) {
      alert("Value should be greater than 0 minutes");
      inputElement.select();
      inputElement.focus();
      inputElement.value = '';
    }
  }
}
