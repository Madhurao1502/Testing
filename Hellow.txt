createWave(): void {
    const selectedWeeks = this.selection.selected;

    if (selectedWeeks.length < 2) {
        this.errorMessage = "A wave must contain at least 2 weeks.";
        return;
    }

    // Sort selected weeks by their original index in the left grid
    const sortedWeeks = selectedWeeks.sort((a, b) => this.leftGridData.data.indexOf(a) - this.leftGridData.data.indexOf(b));
    
    // Find all consecutive blocks in the selected weeks
    let longestConsecutiveBlock: any[] = [];
    let currentBlock: any[] = [sortedWeeks[0]];

    for (let i = 1; i < sortedWeeks.length; i++) {
        const previousWeek = parseInt(sortedWeeks[i - 1].startWeek, 10);
        const currentWeek = parseInt(sortedWeeks[i].startWeek, 10);

        if (currentWeek === previousWeek + 1) {
            currentBlock.push(sortedWeeks[i]);
        } else {
            if (currentBlock.length > longestConsecutiveBlock.length) {
                longestConsecutiveBlock = currentBlock;
            }
            currentBlock = [sortedWeeks[i]];
        }
    }

    // Final check for the last block
    if (currentBlock.length > longestConsecutiveBlock.length) {
        longestConsecutiveBlock = currentBlock;
    }

    // If no consecutive block is found
    if (longestConsecutiveBlock.length < 2) {
        this.errorMessage = "Selected weeks must contain at least 2 consecutive weeks to create a wave.";
        return;
    }

    // Check if the selected block is indeed consecutive
    const startWeek = longestConsecutiveBlock[0].startWeek;
    const endWeek = longestConsecutiveBlock[longestConsecutiveBlock.length - 1].startWeek;

    const maxDueDate = new Date(longestConsecutiveBlock[longestConsecutiveBlock.length - 1].endDate);
    maxDueDate.setDate(maxDueDate.getDate() + 7);
    const minDueDate = new Date(longestConsecutiveBlock[0].startDate);
    minDueDate.setDate(minDueDate.getDate() - 7);

    const formatToDateTimeString = (date: Date): string => {
      const isoString = date.toISOString();
      return isoString.slice(0, 16);  // Extract 'YYYY-MM-DDTHH:MM' portion
    };

    const wave = {
        startWeek: `${startWeek} (${longestConsecutiveBlock[0].startDate} - ${longestConsecutiveBlock[0].endDate})`,
        endWeek: `${endWeek} (${longestConsecutiveBlock[longestConsecutiveBlock.length - 1].startDate} - ${longestConsecutiveBlock[longestConsecutiveBlock.length - 1].endDate})`,
        startDate: longestConsecutiveBlock[0].startDate,
        endDate: longestConsecutiveBlock[longestConsecutiveBlock.length - 1].endDate,
        dueDate: '',
        minDueDate: formatToDateTimeString(minDueDate),
        maxDueDate: formatToDateTimeString(maxDueDate)
    };

    this.rightGridData.data = [...this.rightGridData.data, wave];
    this.leftGridData.data = this.leftGridData.data.filter(item => !this.selection.isSelected(item));
    this.selection.clear();
}
