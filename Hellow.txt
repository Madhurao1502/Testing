updateGridData() {
    this.displayedData = [];
    const scheduleType = this.scheduleAndSampleForm.get('scheduleType')?.value;
    const startWeek = this.scheduleAndSampleForm.get('startWeek')?.value;
    const endWeek = this.scheduleAndSampleForm.get('endWeek')?.value;
    const noEndDate = this.scheduleAndSampleForm.get('noEndDate')?.value;
    const selectedWeeks = this.scheduleAndSampleForm.get('manualSelection')?.value;
    const selectedVendors = this.generalForm.get('vendor')?.value;
    const vendorMap = new Map(this.vendorList.map(vendor => [vendor.value, vendor.text]));
    const selectedRotation = this.scheduleAndSampleForm.get('selectedRotation')?.value;
    const rotationSamples = this.rotationData.filter(r => r.rotationName === selectedRotation);

    const startIndex = this.scheduleInfoByWeek.findIndex(d => d.startWeek === startWeek);
    const endIndex = noEndDate ? this.scheduleInfoByWeek.length - 1 : this.scheduleInfoByWeek.findIndex(d => d.startWeek === endWeek);
    let weeksToDisplay = [];

    if (scheduleType === '1' || scheduleType === '2') {
        const periodIndexes = [];

        if (scheduleType === '1') {
            for (let i = startIndex; i <= endIndex; i += 1) {
                periodIndexes.push(i);
            }
        } else {
            for (let i = startIndex; i <= endIndex; i += this.scheduleAndSampleForm.get('periodicValue')?.value) {
                periodIndexes.push(i);
            }
        }

        weeksToDisplay = periodIndexes.map(i => this.scheduleInfoByWeek[i]?.startWeek);
    } else if (scheduleType === '3') {
        weeksToDisplay = selectedWeeks;
    }

    const totalWeeks = weeksToDisplay.length;
    const vendorWeekData = new Map<string, string[]>();  // To track selected samples per week

    selectedVendors.forEach(vendor => {
        weeksToDisplay.forEach(week => {
            const weekData = this.scheduleInfoByWeek.find(d => d.startWeek === week);
            if (weekData) {
                const sampleOptions = [...this.sampleOptions];  // Clone the sample options for dropdown
                const selectedSamplesForWeek = vendorWeekData.get(week) || [];
                const filteredSampleOptions = sampleOptions.filter(opt => !selectedSamplesForWeek.includes(opt));

                let sample = '';  // This will be set based on user selection
                const vendorName = vendorMap.get(vendor);

                // Assume `sampleSelectionForm` is a form array containing the sample dropdown for each vendor
                sample = this.sampleSelectionForm.get(vendor)?.get(week)?.value;

                if (sample) {
                    // Update the week data with the selected sample
                    selectedSamplesForWeek.push(sample);
                    vendorWeekData.set(week, selectedSamplesForWeek);
                }

                let row = {
                    MMYY: weekData.monthYear,
                    Start_Week: weekData.startWeek,
                    Start_Date: weekData.startDate,
                    End_Date: weekData.endDate,
                    selectedSample: sample,
                    Vendor: vendorName
                };

                this.displayedData.push(row);
            }
        });
    });

    this.leftGridData = this.displayedData;
}
