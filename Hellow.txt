<div class="progressContainer">
  <ul class="progressbar">
    <li *ngFor="let step of progressSteps" [class.statusactive]="step.status === 'Succeeded'" [class.statusrunning]="step.status === 'In-Progress'">
      {{ step.name }} <span>{{ step.percentage }}%</span>
    </li>
  </ul>
  <div style="color: #00205B;">
    Overall: <span>{{ overallCompletion }}%</span>
  </div>
</div>


import { Component, Input, OnInit } from '@angular/core';

interface ProgressStep {
  name: string;
  status: 'Succeeded' | 'In-Progress' | 'Pending';
  percentage: number;
}

@Component({
  selector: 'app-progress-bar',
  templateUrl: './progress-bar.component.html',
  styleUrls: ['./progress-bar.component.css']
})
export class ProgressBarComponent implements OnInit {
  @Input() progressSteps: ProgressStep[] = [];
  overallCompletion: number = 0;

  ngOnInit() {
    this.calculateOverallCompletion();
  }

  private calculateOverallCompletion() {
    const total = this.progressSteps.reduce((sum, step) => sum + step.percentage, 0);
    this.overallCompletion = Math.round(total / this.progressSteps.length);
  }
}

.progressContainer {
  width: 600px;
  background-color: white;
}

.progressbar {
  counter-reset: step;
  list-style-type: none;
  display: flex;
  justify-content: space-between;
}

.progressbar li {
  position: relative;
  font-size: 11px;
  text-align: center;
  text-transform: uppercase;
  color: orangered;
  font-weight: bold;
}

.progressbar li:before {
  content: counter(step);
  counter-increment: step;
  width: 30px;
  height: 30px;
  border: 2px solid orangered;
  border-radius: 50%;
  display: block;
  line-height: 30px;
  background-color: white;
  margin: 0 auto;
}

.progressbar li.statusactive {
  color: limegreen;
}

.progressbar li.statusactive:before {
  border-color: limegreen;
}

.progressbar li.statusrunning {
  color: orange;
}

.progressbar li.statusrunning:before {
  border-color: orange;
}

<app-progress-bar [progressSteps]="progressData"></app-progress-bar>

export class AppComponent {
  progressData = [
    { name: 'Data Preparation', status: 'Succeeded', percentage: 100 },
    { name: 'Business Rule', status: 'In-Progress', percentage: 50 },
    { name: 'Data Delivery', status: 'In-Progress', percentage: 70 },
    { name: 'Data Imputation', status: 'Pending', percentage: 0 }
  ];
}


 this.progressData = this.buildProgressData(apiResponse);
  }

  // Function to dynamically build progress steps based on deliveryTypeId
  buildProgressData(apiResponse: any): ProgressStep[] {
    const deliveryTypeId = apiResponse.deliveryTypeId;

    let stepMapping: { key: string; percentageKey: string; name: string }[] = [];

    if (deliveryTypeId === "DET-Shelf") {
      stepMapping = [
        { key: "mdmProceStatus", percentageKey: "mdmProcPercentang", name: "MDM" },
        { key: "dataPrepProcStatus", percentageKey: "dataPrepProcPercentage", name: "Data Preparation" },
        { key: "brProcStatus", percentageKey: "brProcPercentage", name: "Business Rule" },
        { key: "freqProcStatus", percentageKey: "freqProcPercentage", name: "Frequency" },
        { key: "trendingProcStatus", percentageKey: "trendingProcPercentage", name: "Trending" },
        { key: "reqListProcStatus", percentageKey: "reqListProcPercentage", name: "Request List" },
        { key: "dataDeliveryProcStatus", percentageKey: "dataDeliveryProcPercentage", name: "Data Delivery" },
        { key: "dataImputationProcStatus", percentageKey: "dataImputationProcPercentage", name: "Data Imputation" }
      ];
    } else if (deliveryTypeId === "NDET-Shelf") {
      stepMapping = [
        { key: "dataPrepProcStatus", percentageKey: "dataPrepProcPercentage", name: "Data Preparation" },
        { key: "brProcStatus", percentageKey: "brProcPercentage", name: "Business Rule" },
        { key: "dataDeliveryProcStatus", percentageKey: "dataDeliveryProcPercentage", name: "Data Delivery" },
        { key: "dataImputationProcStatus", percentageKey: "dataImputationProcPercentage", name: "Data Imputation" }
      ];
    } else if (deliveryTypeId === "Shelf-Extract" || deliveryTypeId === "Display-Extract") {
      stepMapping = [
        { key: "dataPrepProcStatus", percentageKey: "dataPrepProcPercentage", name: "Data Preparation" },
        { key: "brProcStatus", percentageKey: "brProcPercentage", name: "Business Rule" },
        { key: "dataDeliveryProcStatus", percentageKey: "dataDeliveryProcPercentage", name: "Data Delivery" }
      ];
    } else if (deliveryTypeId === "NAS-OOS") {
      stepMapping = [
        { key: "mdmProceStatus", percentageKey: "mdmProcPercentang", name: "MDM" },
        { key: "dataPrepProcStatus", percentageKey: "dataPrepProcPercentage", name: "Data Preparation" },
        { key: "brProcStatus", percentageKey: "brProcPercentage", name: "Business Rule" },
        { key: "dataDeliveryProcStatus", percentageKey: "dataDeliveryProcPercentage", name: "Data Delivery" }
      ];
    }

    return stepMapping.map(step => ({
      name: step.name,
      status: this.getStatus(apiResponse, step.key),
      percentage: this.getPercentage(apiResponse, step.percentageKey)
    }));
  }

  getStatus(apiResponse: any, key: string): string {
    return apiResponse[key] || "Pending";
  }

  getPercentage(apiResponse: any, key: string): number {
    return apiResponse[key] !== undefined ? Number(apiResponse[key]) : 0;
  }
}
