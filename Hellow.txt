handleWeekSelectionChange(selectedWeeks: number[]) {
  // Get the current selected weeks from the form control
  const currentSelectedWeeks = this.scheduleForm.get('selectedWeeks')?.value || [];

  // Detect weeks that the user tried to uncheck (weeks removed from the selection)
  const removedWeeks = currentSelectedWeeks.filter(week => !selectedWeeks.includes(week));

  if (removedWeeks.length > 0) {
    // Create a copy of the valid weeks (that should remain selected)
    let validWeeks = [...selectedWeeks];

    removedWeeks.forEach(weekToRemove => {
      // Find the week in tableData
      const weekEntry = this.tableData.find(week => week.startWeek === weekToRemove);

      if (weekEntry && weekEntry.waveNumber) {
        // Show alert that the wave needs to be removed before the week can be unselected
        alert(`Week ${weekToRemove} is part of wave ${weekEntry.waveNumber}. Please remove the wave before removing the week.`);

        // Re-add the week back to the selection
        validWeeks.push(weekToRemove);
      } else {
        // If no wave is associated, proceed with removing the week from the tableData
        this.tableData = this.tableData.filter(week => week.startWeek !== weekToRemove);
      }
    });

    // Re-set the form control value to the valid weeks, preventing invalid unchecks
    this.scheduleForm.get('selectedWeeks')?.setValue(validWeeks, { emitEvent: false });

    // Update the left grid after the modification
    this.leftGridData = new MatTableDataSource<any>(this.tableData);
  }
}
