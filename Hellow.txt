import { Directive, ElementRef, HostListener, Renderer2, Input } from '@angular/core';
import { NgControl } from '@angular/forms';

@Directive({
  selector: '[appCurrencyFormatter]'
})
export class CurrencyFormatterDirective {
  @Input() set appCurrencyFormatter(value: string | number) {
    if (value !== null && value !== undefined) {
      this.formatValue(value.toString());
    }
  }

  constructor(private el: ElementRef, private control: NgControl, private renderer: Renderer2) {}

  @HostListener('input', ['$event'])
  onInputChange(event: Event) {
    let input = (event.target as HTMLInputElement).value;
    this.formatValue(input);
  }

  private formatValue(value: string) {
    if (!value) {
      this.setFormattedValue('$0.00');
      return;
    }

    // Remove non-numeric characters except dot
    value = value.replace(/[^0-9.]/g, '');

    // Ensure only two decimal places
    let [integerPart, decimalPart] = value.split('.');

    if (decimalPart) {
      decimalPart = decimalPart.substring(0, 2); // Keep only two decimal places
    }

    // Format with commas for thousands
    integerPart = integerPart.replace(/\B(?=(\d{3})+(?!\d))/g, ',');

    let formattedValue = `$${integerPart}${decimalPart !== undefined ? '.' + decimalPart : '.00'}`;

    this.setFormattedValue(formattedValue);
  }

  private setFormattedValue(value: string) {
    this.renderer.setProperty(this.el.nativeElement, 'value', value);

    // Update FormControl (if used within Reactive Forms)
    if (this.control && this.control.control) {
      this.control.control.setValue(value, { emitEvent: false });
    }
  }
}
