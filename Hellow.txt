subscribeToControls(controls: { [key: string]: FormControl }) {
  Object.entries(controls).forEach(([controlName, ctrl], index) => {
    let emissionCount = 0;

    ctrl.valueChanges.pipe(
      tap(() => {
        emissionCount++;
        console.log(`Control: ${controlName}, Emission: ${emissionCount}`);
      }),
      filter(() => emissionCount > 2) // Adjust `2` based on your need
    ).subscribe(() => {
      console.log(`Value changed for ${controlName} after ${emissionCount} emissions`);
      this.formStateService.markComponentTouched('Component2');
    });
  });
}

--------------------------------
private subscriptions: Subscription[] = [];

subscribeToControls(controls: { [key: string]: FormControl }) {
  // Unsubscribe from previous subscriptions
  this.subscriptions.forEach(sub => sub.unsubscribe());
  this.subscriptions = [];

  Object.entries(controls).forEach(([controlName, ctrl]) => {
    let emissionCount = 0;

    const sub = ctrl.valueChanges.pipe(
      tap(() => {
        emissionCount++;
        console.log(`Control: ${controlName}, Emission: ${emissionCount}`);
      }),
      filter(() => emissionCount > 2)
    ).subscribe(() => {
      console.log(`Value changed for ${controlName} after ${emissionCount} emissions`);
      this.formStateService.markComponentTouched('Component2');
    });

    this.subscriptions.push(sub); // Store subscriptions
  });
}

ngOnDestroy() {
  // Cleanup on component destroy
  this.subscriptions.forEach(sub => sub.unsubscribe());
}


----------------
