import { Directive, ElementRef, HostListener, Renderer2, OnInit } from '@angular/core';
import { NgControl } from '@angular/forms';

@Directive({
  selector: '[appCurrencyFormatter]'
})
export class CurrencyFormatterDirective implements OnInit {

  constructor(private el: ElementRef, private control: NgControl, private renderer: Renderer2) {}

  ngOnInit() {
    if (this.control && this.control.control) {
      this.control.control.valueChanges.subscribe(value => {
        if (value !== null && value !== undefined) {
          this.formatValue(value.toString(), false);
        }
      });

      const currentValue = this.control.control.value;
      if (currentValue !== null && currentValue !== undefined) {
        this.formatValue(currentValue.toString(), false);
      }
    }
  }

  @HostListener('input', ['$event'])
  onInputChange(event: Event) {
    const input = (event.target as HTMLInputElement);
    const inputValue = input.value;
    const previousCursorPosition = input.selectionStart; // Store cursor position

    this.formatValue(inputValue, true);

    // Restore cursor position after formatting.  Crucial!
    setTimeout(() => { // Use setTimeout to ensure formatting is complete
      input.setSelectionRange(previousCursorPosition, previousCursorPosition);
    });
  }


  private formatValue(value: string, fromUserInput: boolean) {
    if (!value) {
      this.setFormattedValue('');
      return;
    }

    value = value.replace(/[^0-9.]/g, '');

    let parts = value.split('.');
    if (parts.length > 2) {
      value = parts[0] + '.' + parts.slice(1).join('').replace(/\./g, '');
    }

    let [integerPart, decimalPart] = value.split('.');

    integerPart = integerPart.replace(/\B(?=(\d{3})+(?!\d))/g, ',');

    decimalPart = decimalPart ? decimalPart.substring(0, 2) : '';

    let formattedValue = '$' + integerPart + (decimalPart.length > 0 || fromUserInput ? '.' + decimalPart : '.00');

    this.setFormattedValue(formattedValue);
  }

  private setFormattedValue(value: string) {
    this.renderer.setProperty(this.el.nativeElement, 'value', value);

    if (this.control && this.control.control) {
      this.control.control.setValue(value, { emitEvent: false });
    }
  }
}
