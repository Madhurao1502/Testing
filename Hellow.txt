import { Directive, ElementRef, HostListener, Renderer2, OnInit } from '@angular/core';
import { NgControl } from '@angular/forms';

@Directive({
  selector: '[appCurrencyFormatter]'
})
export class CurrencyFormatterDirective implements OnInit {
  
  constructor(private el: ElementRef, private control: NgControl, private renderer: Renderer2) {}

  ngOnInit() {
    if (this.control && this.control.control) {
      this.control.control.valueChanges.subscribe(value => {
        if (value !== null && value !== undefined) {
          this.formatValue(value.toString());
        }
      });
    }
  }

  @HostListener('input', ['$event'])
  onInputChange(event: Event) {
    let input = (event.target as HTMLInputElement).value;
    this.formatValue(input);
  }

  private formatValue(value: string) {
    if (!value) {
      this.setFormattedValue('$0.00');
      return;
    }

    // Remove non-numeric characters except dot
    value = value.replace(/[^0-9.]/g, '');

    // Split integer and decimal parts
    let [integerPart, decimalPart] = value.split('.');

    // Ensure integer part has thousand separators
    integerPart = integerPart.replace(/\B(?=(\d{3})+(?!\d))/g, ',');

    // Ensure decimal part has exactly 2 digits
    decimalPart = decimalPart ? decimalPart.substring(0, 2) : '00';

    // Final formatted value
    let formattedValue = `$${integerPart}.${decimalPart.padEnd(2, '0')}`;

    this.setFormattedValue(formattedValue);
  }

  private setFormattedValue(value: string) {
    this.renderer.setProperty(this.el.nativeElement, 'value', value);

    // Update FormControl without emitting another change event
    if (this.control && this.control.control) {
      this.control.control.setValue(value, { emitEvent: false });
    }
  }
}
