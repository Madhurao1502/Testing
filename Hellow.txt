handleWeekSelectionChange(selectedWeeks: number[]) {
  const removedWeeks = this.detectRemovedWeeks(selectedWeeks);

  if (removedWeeks.length > 0) {
    removedWeeks.forEach(weekToRemove => {
      const weekEntry = this.tableData.find(week => week.startWeek === weekToRemove);

      if (weekEntry && weekEntry.waveNumber) {
        // Use a simple confirmation prompt for removing the wave
        const confirmation = confirm(`Week ${weekToRemove} is part of wave ${weekEntry.waveNumber}. Do you want to remove the wave entirely or just the week? 
        Press OK to remove the wave, or Cancel to remove just the week.`);

        if (confirmation) {
          // Remove the entire wave
          this.removeWave(weekEntry.waveNumber);
        } else {
          // Remove just the selected week
          this.tableData = this.tableData.filter(week => week.startWeek !== weekToRemove);
        }
      } else {
        // If no wave is associated, just remove the week
        this.tableData = this.tableData.filter(week => week.startWeek !== weekToRemove);
      }
    });

    this.leftGridData = new MatTableDataSource<any>(this.tableData);
  }
}

handleStartEndWeekChange() {
  const { startWeek, endWeek, noEndWeek } = this.scheduleForm.value;

  this.generateTable();

  const removedWeeks = this.detectRemovedWeeks([startWeek, endWeek]);

  if (removedWeeks.length > 0) {
    removedWeeks.forEach(weekToRemove => {
      const weekEntry = this.tableData.find(week => week.startWeek === weekToRemove);

      if (weekEntry && weekEntry.waveNumber) {
        const confirmation = confirm(`Week ${weekToRemove} is part of wave ${weekEntry.waveNumber}. Do you want to remove the wave entirely or just the week? 
        Press OK to remove the wave, or Cancel to remove just the week.`);

        if (confirmation) {
          this.removeWave(weekEntry.waveNumber);
        } else {
          this.tableData = this.tableData.filter(week => week.startWeek !== weekToRemove);
        }
      } else {
        this.tableData = this.tableData.filter(week => week.startWeek !== weekToRemove);
      }
    });

    this.leftGridData = new MatTableDataSource<any>(this.tableData);
  }
}
