<!-- custom-form.component.html -->
<div class="form-container">
  <form [formGroup]="form" (ngSubmit)="onSubmit()">
    <div class="form-group">
      <label for="name">Name / Number:</label>
      <input id="name" type="text" formControlName="name">
    </div>

    <div class="form-group">
      <label for="type">Type:</label>
      <select id="type" formControlName="type">
        <option *ngFor="let type of types" [value]="type">{{ type }}</option>
      </select>
    </div>

    <div class="form-group">
      <label for="description">Description:</label>
      <input id="description" type="text" formControlName="description">
    </div>

    <div class="form-group">
      <label for="version">Version:</label>
      <select id="version" formControlName="version" disabled>
        <option *ngFor="let version of versions" [value]="version">{{ version }}</option>
      </select>
    </div>

    <div class="form-group">
      <label for="manager">Manager:</label>
      <input id="manager" type="text" formControlName="manager">
    </div>

    <div class="form-group">
      <label for="clientName">Client Name:</label>
      <select id="clientName" formControlName="clientName">
        <option *ngFor="let client of clients" [value]="client">{{ client }}</option>
      </select>
    </div>

    <div class="form-group">
      <label for="contactNumber">Contact Number:</label>
      <input id="contactNumber" type="text" formControlName="contactNumber" (blur)="formatPhoneNumber()">
    </div>

    <div class="form-group">
      <label for="isThisAReplacement">Is this a replacement:</label>
      <input id="isThisAReplacement" type="checkbox" formControlName="isThisAReplacement">
    </div>

    <div class="form-group">
      <label for="vendor">Vendor:</label>
      <select id="vendor" formControlName="vendor">
        <option *ngFor="let vendor of vendors" [value]="vendor">{{ vendor }}</option>
      </select>
    </div>

    <div class="form-group">
      <label for="type2">Type:</label>
      <select id="type2" formControlName="type2">
        <option *ngFor="let type of types" [value]="type">{{ type }}</option>
      </select>
    </div>

    <button type="submit" [disabled]="form.invalid">Submit</button>
  </form>
</div>
***********************
// custom-form.component.ts
import { Component, OnInit } from '@angular/core';
import { FormBuilder, FormGroup, Validators } from '@angular/forms';

@Component({
  selector: 'app-custom-form',
  templateUrl: './custom-form.component.html',
  styleUrls: ['./custom-form.component.css']
})
export class CustomFormComponent implements OnInit {
  form: FormGroup;
  types = ['one', 'two'];
  versions = ['v1.0', 'v2.0'];
  clients = ['Client A', 'Client B', 'Client C']; // This would ideally come from a function/service
  vendors = ['Vendor X', 'Vendor Y', 'Vendor Z']; // This would also come from a function/service

  constructor(private fb: FormBuilder) {
    this.form = this.fb.group({
      name: ['', Validators.required],
      type: ['', Validators.required],
      description: ['', Validators.required],
      version: [{ value: 'v1.0', disabled: true }, Validators.required],
      manager: ['', Validators.required],
      clientName: ['', Validators.required],
      contactNumber: ['', [Validators.required, Validators.pattern(/^\(\d{3}\) \d{3}-\d{4}$/)]], // US phone number format
      isThisAReplacement: [false],
      vendor: ['', Validators.required],
      type2: ['', Validators.required]
    });
  }

  ngOnInit(): void {
    // Optionally load clients and vendors from a service
    // this.loadClients();
    // this.loadVendors();
  }

  formatPhoneNumber(): void {
    const phoneControl = this.form.get('contactNumber');
    if (phoneControl && phoneControl.value) {
      const cleaned = ('' + phoneControl.value).replace(/\D/g, '');
      const match = cleaned.match(/^(\d{3})(\d{3})(\d{4})$/);
      if (match) {
        phoneControl.setValue(`(${match[1]}) ${match[2]}-${match[3]}`);
      }
    }
  }

  onSubmit(): void {
    if (this.form.valid) {
      console.log(this.form.value);
    }
  }
}
*********************************

/* custom-form.component.css */
.form-container {
  max-width: 600px;
  margin: 0 auto;
  padding: 20px;
  border: 1px solid #ccc;
  border-radius: 10px;
  background-color: #f9f9f9;
}

.form-group {
  margin-bottom: 15px;
}

.form-group label {
  display: block;
  margin-bottom: 5px;
  font-weight: bold;
}

.form-group input,
.form-group select {
  width: 100%;
  padding: 8px;
  border: 1px solid #ccc;
  border-radius: 5px;
}

button {
  padding: 10px 20px;
  border: none;
  border-radius: 5px;
  background-color: #007bff;
  color: white;
  cursor: pointer;
}

button:disabled {
  background-color: #cccccc;
}
