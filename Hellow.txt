
      <div class="table-container mat-elevation-z8" style="margin-top: 2px;" >        
        <mat-table #table id="table"   matSort [dataSource]="gridDataSource">
               <!--UPC Number Column-->
          <ng-container matColumnDef="upcNumber" sticky>
        
            <mat-header-cell  class="mat-header-style" *matHeaderCellDef >UPC Number</mat-header-cell>
            <mat-cell  *matCellDef="let element" #dropdown id="dropdown" >  
              <span class="caret" #caretIcon id="caretIcon" *ngIf="(element.observationReceived>1)||(element.observationRequested>1)" >&#94;</span>
              <span  *ngIf="(element.observationReceived<=0)&&(element.observationRequested<=0)" >&nbsp;&nbsp;&nbsp;&nbsp;</span>
               {{element.upcNumber | UPC_Format}}    
               <mat-icon class="editicon" title="Edit" style="font-size: medium;margin-left: 5px;" *ngIf="isUserPartOfGroup && (element.requested=='Y' &&(element.status=='Not collected'||element.status=='Partial Collection') )" (click)="editDimensions(element)"> edit</mat-icon>           
               <!-- <mat-icon *ngIf="element.upcSibilingFlag == 1"  title="This UPC has sibilings">horizontal_split</mat-icon> -->
              </mat-cell>
          </ng-container>
          <!--Description Column-->
          <ng-container matColumnDef="upcDesc" sticky >
            <mat-header-cell  class="mat-header-style" *matHeaderCellDef>Description</mat-header-cell>
            <mat-cell  *matCellDef="let element">{{element.upcDesc}}</mat-cell>
          </ng-container>
           <!--Override Column-->
           <ng-container matColumnDef="override" sticky>
            <mat-header-cell  class="mat-header-style" *matHeaderCellDef style="color: slateblue;">Override</mat-header-cell>
            <mat-cell *matCellDef="let element">
              <mat-slide-toggle [checked] = "element.override == 'Y' ? true : false"
                                [color] = "toggleColor"
                                (change)="Override($event, element)"
                                [disabled]="!(dialogData.requestStatus === 'User Review' && isUserPartOfGroup)">              
              </mat-slide-toggle>
            </mat-cell>
          </ng-container>
          <!--Category Column-->
          <ng-container matColumnDef="category" sticky>
            <mat-header-cell  class="mat-header-style" *matHeaderCellDef>Category</mat-header-cell>
            <mat-cell  *matCellDef="let element">{{element.category}}</mat-cell>
          </ng-container>
          <!--Eligibility Column-->
          <ng-container matColumnDef="eligibility" sticky >
            <mat-header-cell class="mat-header-style" *matHeaderCellDef>Eligibility</mat-header-cell>
            <mat-cell *matCellDef="let element">{{element.eligibility}}</mat-cell>
          </ng-container>
          <!--Items Received Column-->
          <ng-container matColumnDef="eligibilityReason" sticky>
            <mat-header-cell class="mat-header-style" *matHeaderCellDef>ELG Reason</mat-header-cell>
            <mat-cell *matCellDef="let element">{{element.eligibilityReason}}</mat-cell>
          </ng-container>
           <!--Brand Column-->
          <ng-container matColumnDef="brand">
            <mat-header-cell class="mat-header-style" *matHeaderCellDef>Brand</mat-header-cell>
            <mat-cell *matCellDef="let element">{{element.brand}}</mat-cell>
          </ng-container>

          <!-- Observation Column -->
          <ng-container matColumnDef="Observation">
            <mat-header-cell class="mat-header-style" *matHeaderCellDef>Obs (R / S)</mat-header-cell>
            <mat-cell *matCellDef="let element" title="Observations (Received : {{element.observationReceived}} / Sent : {{element.observationRequested}} )">{{element.observationReceived}} <span *ngIf="element.observationReceived ||element.observationRequested "> / </span> {{element.observationRequested}}</mat-cell>
          </ng-container>

          <!--Package Column-->
          <ng-container matColumnDef="package">
            <mat-header-cell class="mat-header-style" *matHeaderCellDef>Package</mat-header-cell>
            <mat-cell *matCellDef="let element">{{element.package}}</mat-cell>
          </ng-container>
          <!--Attribute Name1 Column-->
          <ng-container matColumnDef="attributeName1">
            <mat-header-cell class="mat-header-style" *matHeaderCellDef style="color:cornflowerblue;">Attr1</mat-header-cell>
            <mat-cell  *matCellDef="let element">{{element.attributeName1}}</mat-cell>
          </ng-container>
          <!--Attribute Value1 Column-->
          <ng-container matColumnDef="attributeValue1">
            <mat-header-cell class="mat-header-style" *matHeaderCellDef style="color:cornflowerblue;">Val1</mat-header-cell>
            <mat-cell *matCellDef="let element">{{element.attributeValue1}}</mat-cell>
          </ng-container>
          <!--Unit Type Column-->
          <ng-container matColumnDef="unitType1">
            <mat-header-cell class="mat-header-style" *matHeaderCellDef style="color:cornflowerblue;">Unit1</mat-header-cell>
            <mat-cell *matCellDef="let element">{{element.unitType1}}</mat-cell>
          </ng-container>
          <!--Attribute Name2 Column-->
          <ng-container matColumnDef="attributeName2">
            <mat-header-cell class="mat-header-style" *matHeaderCellDef style="color:dodgerblue;">Attr2</mat-header-cell>
            <mat-cell *matCellDef="let element">{{element.attributeName2}}</mat-cell>
          </ng-container>
          <!--Attribute Value2 Column-->
          <ng-container matColumnDef="attributeValue2">
            <mat-header-cell class="mat-header-style" *matHeaderCellDef style="color:dodgerblue;">Val2</mat-header-cell>
            <mat-cell *matCellDef="let element">{{element.attributeValue2}}</mat-cell>
          </ng-container>
          <!--Unit Type Column-->
          <ng-container matColumnDef="unitType2">
            <mat-header-cell  class="mat-header-style" *matHeaderCellDef style="color:dodgerblue;">Unit2</mat-header-cell>
            <mat-cell *matCellDef="let element">{{element.unitType2}}</mat-cell>
          </ng-container>
  
          <!--Keycat Column-->
          <ng-container matColumnDef="keycatName">
            <mat-header-cell class="mat-header-style" *matHeaderCellDef>Keycat</mat-header-cell>
            <mat-cell *matCellDef="let element">{{element.keycatName}}</mat-cell>
          </ng-container>
  
          <!--Stores Moving Column-->
          <ng-container matColumnDef="storesMoving">
            <mat-header-cell class="mat-header-style" *matHeaderCellDef>Stores Moving</mat-header-cell>
            <mat-cell *matCellDef="let element">{{element.storesMoving}}</mat-cell>
          </ng-container>
          <!--Avg UPC Movement Column-->
          <ng-container matColumnDef="avgUpcMovement">
            <mat-header-cell class="mat-header-style" *matHeaderCellDef>Avg UPC Mov</mat-header-cell>
            <mat-cell *matCellDef="let element">{{element.avgUpcMovement}}</mat-cell>
          </ng-container>
    
          <mat-header-row *matHeaderRowDef="displayedColumns; sticky: true"></mat-header-row>
          <mat-row id="mattablerow" (click)="selectedRow = selectedRow === row ? null : row" [ngClass]="{'selectedRow': row === selectedRow}" *matRowDef="let row; columns: displayedColumns;let i = index"
          matRipple class="element-row" [cdkDetailRow]="row" [cdkDetailRowTpl]="tpl" 
          (toggleChange)="GetUPCCollectionDetail($event,row)"
          ></mat-row>
        </mat-table>
       
        <div class="mat-spinner-container">
          <mat-spinner mode="indeterminate" *ngIf="showSpinner"></mat-spinner>
          <div *ngIf="showSpinner" style="position: relative; left: 25px">
            Loading...
          </div>
        </div>
        <div *ngIf="(gridDataSource == null || gridDataSource.data.length == 0 )&& showSpinner==false" style="text-align:center;">No records found</div>
      </div>




     <!-- ************************INNER TABLE********************************** -->
      <ng-template #tpl let-element >
        <div class="mat-row detail-row" [@detailExpand] style="overflow: hidden;"   >
          <!-- The symbol for {{element.name}} is {{element.symbol}} -->
    
          <table class="expanded-table"> 
            <tr > 
              <th>T #</th>
              <th>Collector</th>              
              <th>Store #</th>
              <th>Name</th>
              <th>Address</th>
              <th>Collected</th>
              <th>Height</th>
              <th>Width</th>
              <th>Depth</th>            
              <th>Processed </th>
            </tr>
            <tr *ngFor="let item of this.UPCCollectionDetailList" >
              <td>{{item.territory}}</td>
              <td>
                {{item.collectorName}}
                
              </td>              
              <td>
                {{item.storeNumber}}                
              </td>
              <td style="max-width: 283px;white-space: normal;">
                {{item.storeName}}                
              </td>
              <td style="max-width: 283px;white-space: normal;">{{item.storeAddress}}</td>
              <td>{{item.collected}}</td>
              <td>{{item.height}}</td>
              <td>{{item.width}}</td>
              <td>{{item.depth}}</td>
              
              <td>{{item.processed}}</td>
            </tr>       
          </table>
         
          <!-- <button (click)="collapseAll()">close</button> -->
        </div>
      </ng-template>

<!-- *********************************************************** -->

    </div>
  

    <div>
      <mat-paginator class="mat-paginator-sticky" [pageSizeOptions]="[25, 50, 100]" showFirstLastButtons></mat-paginator>
    </div>
  

   
  </mat-dialog-content>
  

</div>

.mat-dialog-title {
  margin: 0px;
  margin-bottom: 10px;
  font-size: medium;
  background-color: lightgray;
  padding-left: 1em;
  padding-right: 1em;
  cursor: grab;
}
.mat-spinner {
  z-index:111 ;
}
.mat-dialog-body {
  /* max-height:80%;  */
  background-color: white;
  /* overflow: hidden;   */
}

#review_filter{
  margin-top: 10px;
}

.bar-chart{
  width: 60%;
  height: 20px;
  background-color: #f0f0f0;
  position: relative;
  display: flex;
  align-items: center;
  margin: 5px;
  border-radius: 5px;
}

.bar{
  height: 100%;
  background-color: #5CB85C;
  border-radius: 5px;
  transition: width0.5s ease-in-out;
}

.bar1{
  height: 100%;
  background-color: #FFC436;
  /* background-color: #dfdf12; */
  border-radius: 5px;
  transition: width0.5s ease-in-out;
}

.bar2{
  height: 100%;
  /* background-color: #feb728; */
  background-color: #FF4A4A;
  border-radius: 5px;
  transition: width0.5s ease-in-out;
}

.percentage-text{
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%,-50%);
  color: #000;
  z-index: 101;
  font-weight: 600;
}

.content-header {
  width: 100%;
  align-items: center;
  margin-bottom: 1%;
  /* max-height: 150px; */
    /* width: 100%;
  height:55px; */
}

.tool-header {
  width: 100%;
  min-height: 50px !important;
  height: 55px !important;
}

.filter-header {
    width:100%;
    float:left;
    padding-left: 1em;
    padding-top: 0.5em;
    min-height: 50px !important;
    height: 55px !important;
}

.mat-paginator-sticky {
  bottom: 0px;
  right:0px;
  position: sticky;
  z-index: 10;
  height:52px;
  white-space: nowrap;

}

.mat-header-style {
  font-weight: bold;
  font-size: 15px;
  background-color: lightgray;
}

.table-container {	
  position: relative;	
  min-height: 66vh;	
  max-height: 66vh;	
  min-width: 100%;	
  overflow-x: scroll;	
  margin-top: 5%;	
  height: calc(50vh - 5px);	
}

.mat-header-row {
  height: 40px;
}

.mat-row{
  max-width: 120%;
}

.mat-row:hover {
  background-color: mintcream;
}

.selectedRow {
  background-color: lightyellow;
}

 /* table{width: 100%;} */

.mat-column-upcNumber {
  left: 0px;
  width: 10%;
  padding: 0px 10px;
  min-width: 140px;
  max-width: 200px;  
}

.mat-column-upcDesc {
  
  left: 50px;
  width: 20% ;
  padding: 0px 10px;
  min-width: 200px;
  max-width: 500px;
 } 

 .mat-column-override {
  left: 100px;
  width: 10% ;
  padding: 0px 10px;
  min-width: 80px;
  max-width: 100px;
} 

.mat-column-category {
  left: 200px;
  width: 15% ;
  padding: 0px 10px;
  min-width: 150px;
  max-width: 500px;
} 

.mat-column-eligibility {
  left: 220px;
  width: 5% ;
  padding: 0px 10px;
  min-width: 80px;
  max-width: 100px;  
}

.mat-column-eligibilityReason {
  left: 240px;
  width: 20% ;
  padding: 0px 10px;
  min-width: 150px;
  max-width: 500px;
}

.mat-column-brand {
  width: 15% ;
  padding: 0px 10px;
  min-width: 200px;
  max-width: 500px;
}

.mat-column-Observation
{  
  width: 15% ;
  padding: 0px 10px;
  min-width: 150px;
  max-width: 500px;
}

.mat-column-package { 
  width: 15% ;
  padding: 0px 10px;
  min-width: 200px;
  max-width: 500px;
}
 
.mat-column-attributeName1
{
  
  width: 5% ;
  padding: 0px 10px;
  min-width: 60px;
  max-width: 100px;
}


.mat-column-attributeValue1
{  
  width: 5% ;
  padding: 0px 10px;
  min-width: 60px;
  max-width: 100px;
}

.mat-column-unitType1
{  
  width: 5% ;
  padding: 0px 10px;
  min-width: 60px;
  max-width: 100px;
}

.mat-column-attributeName2
{
  width: 5% ;
  padding: 0px 10px;
  min-width: 60px;
  max-width: 100px;
}


.mat-column-attributeValue2
{
  width: 5% ;
  padding: 0px 10px;
  min-width: 60px;
  max-width: 100px;
}

.mat-column-unitType2
{
  width: 5% ;
  padding: 0px 10px;
  min-width: 60px;
  max-width: 100px;
}

.mat-column-keycatName { 
  left: 50px;
  width: 20% ;
  padding: 0px 10px;
  min-width: 200px;
  max-width: 500px;
 }  

 .mat-column-storesMoving
{  
  width: 5% ;
  padding: 0px 10px;
  min-width: 70px;
  max-width: 100px;
} 



.caret{
  display: inline-block;
  margin-right: 5px;
  margin-top: -1px;
  transition: transform 0.3s;
  font-size: 18px;
  font-weight: 800;  
  transform: rotate(90deg); 
}

.clickable-cell{
  cursor: pointer;
}

.caret.clicked {
  transform: rotate(180deg);
  margin-top: -5px;
}

.mat-column-avgUpcMovement
{  
  width: 5% ;
  padding: 0px 10px;
  min-width: 100px;
  max-width: 300px;
}

.mat-column-modifiedBy
{  
  left: 50px;
  width: 20% ;
  padding: 0px 10px;
  min-width: 200px;
  max-width: 500px;
 } 

 .mat-column-modifiedDate
 {   
   left: 50px;
   width: 20% ;
   padding: 0px 10px;
   min-width: 200px;
   max-width: 500px;
  } 
 
  .icon1{
    padding-left: 24%;
      float: right;
      padding-right: 9%;
  }
  
.icon {
  font-size: 160%;
  color: deepskyblue;
  z-index: 15;
}

.icon:hover {
  font-size: 168%;
  color: rgb(0, 129, 173);
  cursor: pointer;
}
  
.float-child {
  margin-top: 1%;
  width: 20%;
  float: right;
}  


.expanded-table {
  margin-top: 5px;
  margin-bottom: 15px;
  margin-left: 70px;
  border-collapse: collapse;
  /* width: 1350px; */
  /* width: 95%; */
  border: 1px solid #ddd;
  font-size: 14px;
}

.expanded-table th,
.expanded-table td {
  padding: 8px 12px;
  text-align: left;
  border-bottom: 1px solid #ddd;
  white-space: nowrap;
}

.expanded-table th {
  background-color: #f2f2f2;
}

::ng-deep .cdk-overlay-pane {
  min-width: 0;
}
.table-responsive {
  display: block;
  width: 100%;
  overflow-x: auto;
 }
 
 .mat-table {
  width: 100%;
  max-width: 100%;
  margin-bottom: 1rem;
  display: table;
  border-collapse: collapse;
  margin: 0px;
 }
 
.editicon{ 
  cursor: pointer;
  color: #3498db;
  /* font-size: 24px; */
  transition: color 0.3s;
}

.editicon:hover{
color: #1a4c66;    

}



 
 /* .mat-cell,
 .mat-header-cell {
  word-wrap: initial;
  display: table-cell;
  padding: 0px 5px;
  line-break: unset;
  width: auto;
  white-space: nowrap;
  overflow: hidden;
  vertical-align: middle;
 } */



.content ::ng-deep .mat-form-field-flex > .mat-form-field-infix { width: 155px !important;}  
/* @media screen and (max-device-width: 767px)
  and (orientation: portrait) {

    .seach_sc {
      margin-left: 15%;
    }
   
  } */

  @media screen and (min-device-width: 768px)
  and (max-device-width: 1300px ) {
   
   ::ng-deep .mat-form-field {
      width: 100% !important;
    }  

    
  }
  
  @media screen and (max-device-width: 767px)
  and (orientation: portrait) {
    .content-header{
      /* margin-bottom: 120%; */
    }
    /* .seach_sc { */
      /* margin-left: 39%; */
    /* } */

    /* ::ng-deep .mat-form-field {
      width: 100% !important;
    } */
  }
  
 @media screen and (min-device-width: 768px)
 and (max-device-width: 1300px ) {
  .content-header{
    /* margin-bottom: 17%; */
  }
  .filter-header {
    width: 100%;
  }
  /* .seach_sc {
    margin-left: 15%;
  } */
  /* ::ng-deep .mat-form-field {
     width: 100% !important;
   } */
 }


 



/* @media only screen and (min-device-width: 0px)  and (max-device-width: 991px) {

  ::ng-deep #review_filter .mat-form-field {
    min-width: 95% !important;
    background-color: wheat;
  }
} */


/* @media only screen and (min-device-width: 1110px) {

  ::ng-deep #review_filter .mat-form-field {
    max-width: 100% !important;
  }
} */
 

@media only screen and (max-width: 768px) and (min-width: 1301px) {

  ::ng-deep #review_filter .mat-form-field {
    max-width: 100% !important;
  }
}

@media only screen and (max-width: 991px) {

  ::ng-deep #review_filter .mat-form-field {
    max-width: 90% !important;
    
  }
  .seach_sc {
    max-width: 20% !important;
    margin-left: 78%;
  }
}

@media only screen and (min-width: 991px) {
  .mat-dialog-body {
    max-height:80%; 
    background-color: white;
    overflow: hidden;  
  }
}

@media (min-width: 992px){
.col-lg-2 {
    flex: 0 0 16.666667%;
    max-width: 11.666667%;
}
}
 
@media only screen and (max-width: 767px) {
  ::ng-deep #review_filter .mat-form-field {
    min-width: 100% !important;
  }
  .seach_sc {
    max-width: 29% !important;
    margin-left: 70%;
  }
  .mat-dialog-body {
    background-color: white;
    overflow-y :scroll;  
  }
}

@media only screen and (min-width: 0px) and (max-width: 767px) {
  .seach_sc {
    max-width: 62% !important;
    margin-left: 40%;
  }

}

/* #review_filter .col-md-4 .mat-form-field {
  width: 100% !important;
}

#review_filter .col-sm-1 .mat-form-field{
  max-width: 29% !important;
  margin-left: 70%;
} */





