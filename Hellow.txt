updateGridData() {
    this.displayedData = [];
    const scheduleType = this.scheduleAndSampleForm.get('scheduleType')?.value;
    const startWeek = this.scheduleAndSampleForm.get('startWeek')?.value;
    const endWeek = this.scheduleAndSampleForm.get('endWeek')?.value;
    const noEndDate = this.scheduleAndSampleForm.get('noEndDate')?.value;
    const selectedWeeks = this.scheduleAndSampleForm.get('manualSelection')?.value;
    const sampleType = this.scheduleAndSampleForm.get('sampleType')?.value;
    const selectedSample = this.scheduleAndSampleForm.get('selectedSample')?.value;
    const selectedRotation = this.scheduleAndSampleForm.get('selectedRotation')?.value;
    const scheduleEvery = this.scheduleAndSampleForm.get('periodicValue')?.value;
    const selectedVendors = this.generalForm.get('vendor')?.value;
    const vendorMap = new Map(this.vendorList.map(vendor => [vendor.value, vendor.text]));

    const rotationSamples = this.rotationData.filter(r => r.rotationName === selectedRotation);
    const startIndex = this.scheduleInfoByWeek.findIndex(d => d.startWeek === startWeek);
    const endIndex = noEndDate ? this.scheduleInfoByWeek.length - 1 : this.scheduleInfoByWeek.findIndex(d => d.startWeek === endWeek);
    let weeksToDisplay = [];

    if (scheduleType === '1' || scheduleType === '2') {
        const periodIndexes = [];

        if (scheduleType === '1') {
            for (let i = startIndex; i <= endIndex; i += 1) {
                periodIndexes.push(i);
            }
        } else {
            for (let i = startIndex; i <= endIndex; i += scheduleEvery) {
                periodIndexes.push(i);
            }
        }

        weeksToDisplay = periodIndexes.map(i => this.scheduleInfoByWeek[i]?.startWeek);
    } else if (scheduleType === '3') {
        weeksToDisplay = selectedWeeks;
    }

    const totalWeeks = weeksToDisplay.length;
    const totalVendors = selectedVendors.length;
    const vendorWeekDistribution = Array.from({ length: totalWeeks * totalVendors }, (_, idx) => weeksToDisplay[idx % totalWeeks]);

    let vendorIndex = 0;
    vendorWeekDistribution.forEach((week, idx) => {
        const weekData = this.scheduleInfoByWeek.find(d => d.startWeek === week);
        if (weekData) {
            const vendorValue = selectedVendors[vendorIndex];
            const vendorName = vendorMap.get(vendorValue);
            let sample = '';

            if (sampleType === 'FIX') {
                sample = selectedSample;
            } else if (sampleType === 'ROT') {
                const rotationIndex = idx % rotationSamples.length;
                sample = rotationSamples[rotationIndex]?.sampleName || '';
            }

            // Validation: Check for duplicate sample for the same week and vendor
            const isDuplicate = this.displayedData.some(data => 
                data.Start_Week === weekData.startWeek && data.Vendor === vendorName && data.selectedSample === sample
            );

            if (!isDuplicate) {
                let row = {
                    MMYY: weekData.monthYear,
                    Start_Week: weekData.startWeek,
                    Start_Date: weekData.startDate,
                    End_Date: weekData.endDate,
                    selectedSample: sample,
                    Vendor: vendorName
                };
                this.displayedData.push(row);
            }

            if ((idx + 1) % totalWeeks === 0) { 
                vendorIndex = (vendorIndex + 1) % totalVendors; 
            }
        }
    });

    this.leftGridData = this.displayedData;
}
