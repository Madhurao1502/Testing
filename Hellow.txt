.form-container {
  max-width: 800px;
  margin: 20px auto;
}

mat-card {
  padding: 20px;
}

mat-card-title {
  font-size: 1.5rem;
  color: rgba(0, 0, 0, 0.6); /* Dim heading */
  text-align: center;
}

table.mat-table {
  width: 100%;
  border-collapse: collapse;
  background: white;
  border-radius: 8px;
  overflow: hidden;
}

table.mat-table th, table.mat-table td {
  padding: 12px;
  text-align: left;
  border-bottom: 1px solid rgba(0, 0, 0, 0.12);
}

mat-form-field {
  width: 100%;
}

.action-buttons {
  text-align: center;
}

.form-actions {
  margin-top: 20px;
  text-align: center;
}


<div class="form-container">
  <mat-card>
    <mat-card-title>Attribute Form</mat-card-title>
    <mat-card-content>
      <form [formGroup]="attributeForm" (ngSubmit)="submitForm()">
        <table class="mat-table">
          <thead>
            <tr>
              <th>Level</th>
              <th>Attribute</th>
              <th>Label</th>
              <th>Action</th>
            </tr>
          </thead>
          <tbody>
            <tr *ngFor="let row of attributes.controls; let i = index; trackBy: trackByFn" [formGroup]="getFormGroup(i)">
              <!-- Auto-incremented Level (Read-Only) -->
              <td>
                <mat-form-field appearance="outline">
                  <mat-label>Level</mat-label>
                  <input matInput type="text" formControlName="level" readonly />
                </mat-form-field>
              </td>

              <!-- Attribute Selection (Dropdown for all EXCEPT UPC row) -->
              <td>
                <mat-form-field appearance="outline">
                  <mat-label>Attribute</mat-label>
                  <ng-container *ngIf="i !== attributes.length - 1; else fixedUPC">
                    <mat-select formControlName="attribute" (selectionChange)="onAttributeChange(i)">
                      <mat-option *ngFor="let attr of attributeList" [value]="attr">{{ attr }}</mat-option>
                    </mat-select>
                  </ng-container>
                  <!-- Hardcoded UPC Attribute (Last Row) -->
                  <ng-template #fixedUPC>
                    <input matInput type="text" formControlName="attribute" readonly />
                  </ng-template>
                </mat-form-field>
              </td>

              <!-- Label Input (Read-Only for UPC) -->
              <td>
                <mat-form-field appearance="outline">
                  <mat-label>Label</mat-label>
                  <input matInput type="text" formControlName="label" placeholder="Enter a label" [readonly]="i === attributes.length - 1" />
                </mat-form-field>
              </td>

              <!-- Action Buttons -->
              <td class="action-buttons">
                <button mat-icon-button color="warn" (click)="removeRow(i)" *ngIf="i > 0 && i < attributes.length - 1">
                  <mat-icon>delete</mat-icon>
                </button>
                <button mat-icon-button color="primary" (click)="addRow()" *ngIf="i === attributes.length - 2 && showAddButton()">
                  <mat-icon>add</mat-icon>
                </button>
              </td>
            </tr>
          </tbody>
        </table>

        <div class="form-actions">
          <button mat-raised-button color="primary" type="submit">Submit</button>
        </div>
      </form>
    </mat-card-content>
  </mat-card>
</div>

addRow(): void {
  if (this.attributes.length - 1 < this.maxAttributes) {
    const newLevel = this.attributes.length; // Auto-increment level
    const newRow = this.fb.group({
      level: [{ value: `Level ${newLevel}`, disabled: true }], // Auto-filled level
      attribute: ['', Validators.required],
      label: ['', Validators.required]
    });

    this.attributes.insert(this.attributes.length - 1, newRow);
  }
}

addUPCRow(): void {
  this.attributes.push(
    this.fb.group({
      level: [{ value: `Level ${this.maxAttributes}`, disabled: true }], // Fixed last level
      attribute: [{ value: 'UPC', disabled: true }, Validators.required],
      label: ['UPC', Validators.required]
    })
  );
}

ngOnInit(): void {
  this.addRow(); // Add Level 1 (first row)
  this.addUPCRow(); // Add last row (UPC)
}

