formatDate(dateString: string) { 
  // First, try to create a valid Date object safely
  let parsedDate = this.safeParseDate(dateString);

  if (isNaN(parsedDate.getTime())) {
    console.error("Invalid date format:", dateString);
    return "Invalid Date";
  }

  return new Intl.DateTimeFormat(navigator.language).format(parsedDate);
}

// Helper function to safely parse a date from different formats
safeParseDate(dateString: string): Date {
  if (!dateString) return new Date(NaN);

  // If the date is already a valid ISO string or a standard format
  let parsed = Date.parse(dateString);
  if (!isNaN(parsed)) return new Date(parsed);

  // If it's in DD-MM-YYYY or other non-standard formats, fix it
  return this.fixDateFormat(dateString);
}

// Function to manually fix DD-MM-YYYY or MM-DD-YYYY cases
fixDateFormat(dateString: string): Date {
  const parts = dateString.split(/[-\/]/); // Support both "-" and "/"

  if (parts.length === 3) {
    let [part1, part2, part3] = parts.map(Number);

    // Check if the format is DD-MM-YYYY or MM-DD-YYYY
    if (part1 > 12) {
      // Assume it's DD-MM-YYYY
      return new Date(part3, part2 - 1, part1);
    } else {
      // Assume it's MM-DD-YYYY
      return new Date(part3, part1 - 1, part2);
    }
  }

  return new Date(NaN); // Return invalid date
}



''''''''''''''''''''''''''''

 static parseDate(dateString: string): Date {
    if (!dateString) return new Date(NaN);

    // Try direct parsing for ISO or standard formats
    let parsed = Date.parse(dateString);
    if (!isNaN(parsed)) return new Date(parsed);

    // If direct parsing fails, manually fix the format
    return this.fixDateFormat(dateString);
  }

  // âœ… Fix dates in different formats (US vs. India)
  private static fixDateFormat(dateString: string): Date {
    // Match formats like "12/3/2023 12:00:00 AM" (US) or "03-12-2023 00:00:00" (India)
    const match = dateString.match(/(\d{1,2})[-\/](\d{1,2})[-\/](\d{4})/);
    
    if (!match) return new Date(NaN);

    let [, part1, part2, year] = match.map(Number);

    // If system uses MM/DD/YYYY (US format), this is fine
    if (part1 <= 12 && part2 > 12) {
      return new Date(year, part1 - 1, part2);
    }

    // If system uses DD-MM-YYYY (Indian format), swap parts
    return new Date(year, part2 - 1, part1);
  }
}
