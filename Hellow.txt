private _filter(name: string): String[] {
    const filterValue = name.toLowerCase();
    // Set selected values to retain the selected checkbox state 
    this.setSelectedValues();
    this.selectFormControl.patchValue(this.selectedValues);
    let filteredList = this.data.filter(option => option.toLowerCase().indexOf(filterValue) === 0);
   
    return filteredList;
  }

/**
 * Remove from selected values based on uncheck
 */
 selectionChange(event) {
  if (event.isUserInput) {
    if (!event.source.selected) {
      // If the option is deselected, remove it from selectedValues
      let index = this.selectedValues.indexOf(event.source.value);
      if (index > -1) {
        this.selectedValues.splice(index, 1);
      }
    } else {
      // If the option is selected, add it to selectedValues
      if (this.selectedValues.indexOf(event.source.value) === -1) {
        this.selectedValues.push(event.source.value);
      }
    }

    // Update the FormControl value with selected options
    this.selectFormControl.patchValue(this.selectedValues);

    // Update the "Select All" checkbox state
    this.updateSelectAllState();
  }
}

  openedChange(e) {
    // Set search textbox value as empty while opening selectbox 
    this.searchTextboxControl.patchValue('');
    // Focus to search textbox while clicking on selectbox
    if (e == true) {
      this.searchTextBox.nativeElement.focus();
    }
  }

  /**
   * Clearing search textbox value 
   */
  clearSearch(event) {
    event.stopPropagation();
    this.searchTextboxControl.patchValue('');
  }

  /**
   * Set selected values to retain the state 
   */
  setSelectedValues() {
    console.log('selectFormControl', this.selectFormControl.value);
    if (this.selectFormControl.value && this.selectFormControl.value.length > 0) {
      this.selectFormControl.value.forEach((e) => {
        if (this.selectedValues.indexOf(e) == -1) {
          this.selectedValues.push(e);
        }
      });
    }
  }

  toggleSelectAll() {
    if (this.allSelected) {
      // Deselect all options if all are already selected
      this.selectedValues = [];
    } else {
      // Select all options if not all are selected
      this.selectedValues = [...this.data];
    }
  
    // Update the FormControl value with selected options
    this.selectFormControl.patchValue(this.selectedValues);
  
    // Toggle the allSelected state
    this.allSelected = !this.allSelected;
  }
  updateSelectAllState() {
    const selectedOptions = this.selectFormControl.value || [];
    this.allSelected = selectedOptions.length === this.data.length;
  }


<mat-form-field>
<mat-select
  (openedChange)="openedChange($event)"
  placeholder="Select"
  [formControl]="selectFormControl"
  multiple
>
  <mat-select-trigger>
    {{ selectFormControl.value ? selectFormControl.value[0] : '' }}
    <span *ngIf="selectFormControl.value?.length > 1" class="additional-selection">
      (+{{ selectFormControl.value.length - 1 }}
      {{ selectFormControl.value?.length === 2 ? 'other' : 'others' }})
    </span>
  </mat-select-trigger>
  <div class="select-container">
    <!-- Search -->
    <mat-optgroup>
      <mat-form-field style="width: 100%;">
        <input
          #search
          autocomplete="off"
          placeholder="Search"
          aria-label="Search"
          matInput
          [formControl]="searchTextboxControl"
        />
        <button
          [disableRipple]="true"
          *ngIf="search.value"
          matSuffix
          mat-icon-button
          aria-label="Clear"
          (click)="clearSearch($event)"
        >
          <mat-icon>close</mat-icon>
        </button>
      </mat-form-field>
    </mat-optgroup>

    <div *ngIf="(filteredOptions | async)?.length > 0" class="select-all-container">
    <mat-checkbox class="select-all-option" [checked]="allSelected" (change)="toggleSelectAll()">
      {{ allSelected ? 'Unselect All' : 'Select All' }}
    </mat-checkbox>
  </div>

    <!-- No Results -->
    <mat-optgroup *ngIf="(filteredOptions | async).length === 0">
      <div>No results found!</div>
    </mat-optgroup>

    <!-- Options -->
    <mat-option
      (onSelectionChange)="selectionChange($event)"
      *ngFor="let option of filteredOptions | async"
      [value]="option"
    >
      {{ option }}
    </mat-option>
  </div>
</mat-select>
</mat-form-field>
<div *ngIf="selectFormControl.value">
{{ 'You have chosen ' + selectFormControl.value }}
</div>
