handleWeekSelectionChange(selectedWeeks: number[]) {
  const removedWeeks = this.detectRemovedWeeks(selectedWeeks);

  if (removedWeeks.length > 0) {
    let revertSelection = false;
    removedWeeks.forEach(weekToRemove => {
      const weekEntry = this.tableData.find(week => week.startWeek === weekToRemove);

      if (weekEntry && weekEntry.waveNumber) {
        // Warn the user about the wave association
        alert(`Week ${weekToRemove} is part of wave ${weekEntry.waveNumber}. Please remove the wave before unselecting this week.`);

        // Revert selection in the FormControl
        revertSelection = true;
      }
    });

    if (revertSelection) {
      // Restore the correct week selection without the unchecked wave weeks
      const validSelection = selectedWeeks.filter(week => {
        const weekEntry = this.tableData.find(w => w.startWeek === week);
        return !(weekEntry && weekEntry.waveNumber);
      });

      // Reset the form control to avoid reflecting unchecked wave weeks
      this.scheduleForm.get('selectedWeeks')?.setValue(validSelection, { emitEvent: false });

      // Update the UI and table data after modification
      this.leftGridData = new MatTableDataSource<any>(this.tableData);
    } else {
      // If no waves were associated, allow removal from tableData
      this.tableData = this.tableData.filter(week => !removedWeeks.includes(week.startWeek));
      this.leftGridData = new MatTableDataSource<any>(this.tableData);
    }
  }
}
