<div class="container">
  <!-- Paste Box -->
  <div class="section paste-box">
    <h3>Paste Numbers</h3>
    <textarea
      [(ngModel)]="inputData"
      (paste)="onPaste($event)"
      placeholder="Paste comma, pipe or line-separated numbers"
      rows="12"
      cols="40">
    </textarea>
  </div>

  <!-- File Upload Box -->
  <div
    class="section upload-box"
    [class.dragover]="isDragOver"
    (drop)="onFileDrop($event)"
    (dragover)="onDragOver($event)"
    (dragleave)="onDragLeave($event)"
  >
    <h3>Upload File</h3>
    <p>Drag and drop a .txt/.csv file here</p>
    <input type="file" (change)="onFileUpload($event)" accept=".txt,.csv" />
  </div>
</div>

<!-- Summary and Actions -->
<p>Total Numbers: {{ numbers.length }}</p>
<button (click)="sendToApi()">Send to API</button>
<button (click)="clearNumbers()">Clear All</button>


import { Component } from '@angular/core';
import { HttpClient } from '@angular/common/http';

@Component({
  selector: 'app-root',
  templateUrl: './app.component.html',
  styleUrls: ['./app.component.css']
})
export class AppComponent {
  inputData: string = '';
  numbers: string[] = [];
  isDragOver: boolean = false;

  constructor(private http: HttpClient) {}

  parseInput(content: string): string[] {
    let delimiter = '\n';
    if (content.includes(',')) delimiter = ',';
    else if (content.includes('|')) delimiter = '|';

    return content
      .split(delimiter)
      .map(val => val.trim())
      .filter(val => val !== '' && /^[0-9]+$/.test(val));
  }

  onPaste(event: ClipboardEvent): void {
    event.preventDefault();
    const clipboardData = event.clipboardData?.getData('text') || '';
    const newNumbers = this.parseInput(clipboardData);
    this.numbers = [...this.numbers, ...newNumbers];
    this.inputData = '';
  }

  onFileUpload(event: Event): void {
    const input = event.target as HTMLInputElement;
    if (!input.files || input.files.length === 0) return;
    const file = input.files[0];
    this.readFile(file);
  }

  onDragOver(event: DragEvent): void {
    event.preventDefault();
    this.isDragOver = true;
  }

  onDragLeave(event: DragEvent): void {
    event.preventDefault();
    this.isDragOver = false;
  }

  onFileDrop(event: DragEvent): void {
    event.preventDefault();
    this.isDragOver = false;

    const file = event.dataTransfer?.files?.[0];
    if (file) this.readFile(file);
  }

  readFile(file: File): void {
    const reader = new FileReader();
    reader.onload = () => {
      const content = reader.result as string;
      const newNumbers = this.parseInput(content);
      this.numbers = [...this.numbers, ...newNumbers];
    };
    reader.readAsText(file);
  }

  clearNumbers(): void {
    this.numbers = [];
    this.inputData = '';
  }

  sendToApi(): void {
    const payload = { numbers: this.numbers };
    this.http.post('https://your-api-url/api/values', payload).subscribe({
      next: res => console.log('Success:', res),
      error: err => console.error('Error:', err)
    });
  }
}


.container {
  display: flex;
  gap: 30px;
  margin-top: 20px;
  justify-content: center;
  align-items: flex-start;
  flex-wrap: wrap;
}

.section {
  width: 300px;
  border: 2px dashed #ccc;
  padding: 20px;
  border-radius: 12px;
  text-align: center;
  background-color: #f9f9f9;
  transition: border-color 0.3s ease, background-color 0.3s ease;
}

.upload-box input[type="file"] {
  margin-top: 10px;
}

textarea {
  width: 100%;
  height: 200px;
  resize: none;
  font-family: monospace;
}

.dragover {
  border-color: green;
  background-color: #e6ffea;
}
