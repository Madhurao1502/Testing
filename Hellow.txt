<mat-form-field appearance="outline" style="width:200px; margin-right:5px;">
  <mat-label>Chain Id</mat-label>
  <button
    mat-button
    *ngIf="this.chainControl.value?.length"
    matSuffix
    mat-icon-button
    (click)="clearChainCtrl($event)"
  >
    <mat-icon style="font-size: large; vertical-align: baseline;">cancel</mat-icon>
  </button>

  <mat-select [formControl]="chainControl" multiple (openedChange)="onDropdownOpen()">
    <!-- Search Input -->
    <div style="padding: 5px;">
      <mat-form-field style="width: 100%;">
        <mat-label>Search</mat-label>
        <input matInput [(ngModel)]="searchChainText" (input)="filterChains()" placeholder="Search..." />
      </mat-form-field>
    </div>

    <!-- Select All Checkbox -->
    <div class="select-all" *ngIf="!searchChainText">
      <mat-checkbox
        [(ngModel)]="allSelected"
        [ngModelOptions]="{ standalone: true }"
        (change)="toggleAllSelection()"
      >
        Select All
      </mat-checkbox>
    </div>

    <!-- Options List -->
    <mat-option
      *ngFor="let chain of filteredChains"
      [value]="chain.chainID"
      (click)="toggleSelection(chain.chainID)"
      matTooltip="{{ chain.chainID }}"
    >
      <mat-checkbox
        [checked]="chainControl.value?.includes(chain.chainID)"
        [value]="chain.chainID"
      >
        {{ chain.chainID }}
      </mat-checkbox>
    </mat-option>
  </mat-select>
</mat-form-field>


{
  chainControl = new FormControl([]); // Holds the selected chain IDs
  searchChainText: string = ''; // Search text
  allSelected: boolean = false; // Tracks "Select All" state
  chains = [
    { chainID: 'Chain1' },
    { chainID: 'Chain2' },
    { chainID: 'Chain3' },
    { chainID: 'Chain4' },
    { chainID: 'Chain5' },
  ]; // Example chain list
  filteredChains = [...this.chains]; // Filtered list of chains

  // Handles toggling individual selections
  toggleSelection(chainID: string) {
    const currentSelection = this.chainControl.value || [];

    if (currentSelection.includes(chainID)) {
      // Remove the chain if already selected
      this.chainControl.setValue(currentSelection.filter(id => id !== chainID));
    } else {
      // Add the chain if not already selected
      this.chainControl.setValue([...currentSelection, chainID]);
    }

    // Update "Select All" checkbox state
    this.updateSelectAllState();
  }

  // Clears all selections
  clearChainCtrl(event: MouseEvent) {
    event.stopPropagation();
    this.chainControl.reset();
    this.searchChainText = '';
    this.filteredChains = [...this.chains];
    this.allSelected = false;
  }

  // Filters chains based on the search text
  filterChains() {
    const searchValue = this.searchChainText?.toLowerCase() || '';

    if (searchValue === '') {
      this.filteredChains = [...this.chains];
    } else {
      this.filteredChains = this.chains.filter(c =>
        c.chainID.toLowerCase().includes(searchValue)
      );
    }

    // Update "Select All" checkbox state
    this.updateSelectAllState();
  }

  // Toggles "Select All" functionality
  toggleAllSelection() {
    if (this.allSelected) {
      // Select all filtered items
      const allIds = this.filteredChains.map(chain => chain.chainID);
      this.chainControl.setValue([...new Set([...this.chainControl.value, ...allIds])]);
    } else {
      // Deselect all filtered items
      const filteredIds = this.filteredChains.map(chain => chain.chainID);
      this.chainControl.setValue(
        this.chainControl.value.filter(id => !filteredIds.includes(id))
      );
    }
  }

  // Updates the "Select All" checkbox state
  updateSelectAllState() {
    const filteredIds = this.filteredChains.map(chain => chain.chainID);
    const currentSelection = this.chainControl.value || [];

    this.allSelected = filteredIds.every(id => currentSelection.includes(id));
  }

  // Resyncs selections when dropdown opens
  onDropdownOpen() {
    this.updateSelectAllState();
  }
}
