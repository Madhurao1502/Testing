<div class="wave-management-container">
  <!-- Multi-Week Grid -->
  <mat-card class="multi-week-grid-card">
    <mat-card-title>Summary Multi-Week Grid</mat-card-title>
    <mat-table [dataSource]="multiWeekGridDataSource" matSort class="mat-elevation-z8">
      <!-- Checkbox Column -->
      <ng-container matColumnDef="select">
        <mat-header-cell *matHeaderCellDef>
          <mat-checkbox (change)="$event ? selectAllRows() : null" [checked]="isAllSelected()" [indeterminate]="isAnyRowSelected()">
          </mat-checkbox>
        </mat-header-cell>
        <mat-cell *matCellDef="let row">
          <mat-checkbox (click)="$event.stopPropagation()" (change)="$event ? selectRow(row) : null" [checked]="isSelected(row)">
          </mat-checkbox>
        </mat-cell>
      </ng-container>

      <!-- Start Week Column -->
      <ng-container matColumnDef="startWeek">
        <mat-header-cell *matHeaderCellDef mat-sort-header>Start Week</mat-header-cell>
        <mat-cell *matCellDef="let row">{{ row.startWeek }}</mat-cell>
      </ng-container>

      <!-- Start Date Column -->
      <ng-container matColumnDef="startDate">
        <mat-header-cell *matHeaderCellDef mat-sort-header>Start Date</mat-header-cell>
        <mat-cell *matCellDef="let row">{{ row.startDate }}</mat-cell>
      </ng-container>

      <!-- End Date Column -->
      <ng-container matColumnDef="endDate">
        <mat-header-cell *matHeaderCellDef mat-sort-header>End Date</mat-header-cell>
        <mat-cell *matCellDef="let row">{{ row.endDate }}</mat-cell>
      </ng-container>

      <mat-header-row *matHeaderRowDef="displayedColumns"></mat-header-row>
      <mat-row *matRowDef="let row; columns: displayedColumns;" (click)="onRowClicked(row)"></mat-row>
    </mat-table>

    <!-- Button to Create Wave -->
    <mat-card-actions>
      <button mat-raised-button color="primary" (click)="createWave()">Create Wave</button>
    </mat-card-actions>
  </mat-card>

  <!-- Wave Schedule Grid -->
  <mat-card class="wave-schedule-grid-card">
    <mat-card-title>Wave Schedule Grid</mat-card-title>
    <mat-table [dataSource]="waveScheduleGridDataSource" matSort class="mat-elevation-z8">
      <!-- Start Week Column -->
      <ng-container matColumnDef="startWeek">
        <mat-header-cell *matHeaderCellDef mat-sort-header>Start Week</mat-header-cell>
        <mat-cell *matCellDef="let wave">{{ wave.startWeek }}</mat-cell>
      </ng-container>

      <!-- End Week Column -->
      <ng-container matColumnDef="endWeek">
        <mat-header-cell *matHeaderCellDef mat-sort-header>End Week</mat-header-cell>
        <mat-cell *matCellDef="let wave">{{ wave.endWeek }}</mat-cell>
      </ng-container>

      <!-- Due Date Column -->
      <ng-container matColumnDef="dueDate">
        <mat-header-cell *matHeaderCellDef mat-sort-header>Due Date</mat-header-cell>
        <mat-cell *matCellDef="let wave">
          <button mat-icon-button (click)="openDueDateDialog(wave)">
            <mat-icon>calendar_today</mat-icon>
          </button>
          {{ wave.dueDate }}
        </mat-cell>
      </ng-container>

      <!-- Delete Button Column -->
      <ng-container matColumnDef="delete">
        <mat-header-cell *matHeaderCellDef>Delete</mat-header-cell>
        <mat-cell *matCellDef="let wave">
          <button mat-icon-button (click)="deleteWave(wave.startWeek, wave.endWeek)">
            <mat-icon color="warn">delete</mat-icon>
          </button>
        </mat-cell>
      </ng-container>

      <mat-header-row *matHeaderRowDef="waveDisplayedColumns"></mat-header-row>
      <mat-row *matRowDef="let wave; columns: waveDisplayedColumns;"></mat-row>
    </mat-table>
  </mat-card>

  <!-- Due Date Dialog -->
  <ng-template #dueDateDialog>
    <h2 mat-dialog-title>Set Due Date</h2>
    <mat-dialog-content>
      <mat-form-field>
        <input matInput [matDatepicker]="picker" placeholder="Choose a date" [(ngModel)]="selectedDueDate">
        <mat-datepicker-toggle matSuffix [for]="picker"></mat-datepicker-toggle>
        <mat-datepicker #picker></mat-datepicker>
      </mat-form-field>
      <mat-form-field>
        <input matInput placeholder="Time" [(ngModel)]="selectedDueTime" type="time">
      </mat-form-field>
    </mat-dialog-content>
    <mat-dialog-actions>
      <button mat-button (click)="closeDialog()">Cancel</button>
      <button mat-button color="primary" (click)="saveDueDate()">Save</button>
    </mat-dialog-actions>
  </ng-template>
</div>


import { Component, ViewChild, TemplateRef } from '@angular/core';
import { MatDialog } from '@angular/material/dialog';

@Component({
  selector: 'app-wave-management',
  templateUrl: './wave-management.component.html',
  styleUrls: ['./wave-management.component.css']
})
export class WaveManagementComponent {
  multiWeekGridDataSource = []; // Replace with your data source
  waveScheduleGridDataSource = []; // Replace with your data source
  displayedColumns: string[] = ['select', 'startWeek', 'startDate', 'endDate'];
  waveDisplayedColumns: string[] = ['startWeek', 'endWeek', 'dueDate', 'delete'];
  
  selectedWeeks: any[] = [];
  waveSchedule: any[] = [];

  selectedDueDate: Date;
  selectedDueTime: string;

  @ViewChild('dueDateDialog') dueDateDialog: TemplateRef<any>;

  constructor(private dialog: MatDialog) {}

  getSelectedWeekIds(): number[] {
    // Implement logic to get selected weeks
    return this.selectedWeeks.map(week => week.startWeek);
  }

  createWave() {
    const selectedIds = this.getSelectedWeekIds();
    if (selectedIds.length < 2) {
      alert('Please select a minimum of 2 weeks to create a Wave');
      return;
    }

    selectedIds.sort((a, b) => a - b);

    if (!this.areWeeksContinuous(selectedIds)) {
      alert('Please select weeks in a continuous sequence');
      return;
    }

    const [startWeek, endWeek] = this.getStartAndEndWeeks(selectedIds);

    if (this.isOverlappingExistingWave(startWeek, endWeek)) {
      alert('The selected weeks overlap a currently defined Wave. Re-select schedule weeks and try again');
      return;
    }

    const newWave = {
      startWeek,
      endWeek,
      startDate: this.getDateRange(startWeek),
      endDate: this.getDateRange(endWeek),
      dueDate: null
    };

    this.waveSchedule.push(newWave);
    this.updateGrids();
  }

  areWeeksContinuous(selectedIds: number[]): boolean {
    for (let i = 1; i < selectedIds.length; i++) {
      if (selectedIds[i] !== selectedIds[i - 1] + 1) {
        return false;
      }
    }
    return true;
  }

  getStartAndEndWeeks(selectedIds: number[]): [number, number] {
    const startWeek = selectedIds[0];
    const endWeek = selectedIds[selectedIds.length - 1];
    return [startWeek, endWeek];
  }

  isOverlappingExistingWave(startWeek: number, endWeek: number): boolean {
    return this.waveSchedule.some(wave =>
      (startWeek >= wave.startWeek && startWeek <= wave.endWeek) ||
      (endWeek >= wave.startWeek && endWeek <= wave.endWeek) ||
      (startWeek <= wave.startWeek && endWeek >= wave.endWeek)
    );
  }

  deleteWave(startWeek: number, endWeek: number) {
    this.waveSchedule = this.waveSchedule.filter(wave => wave.startWeek !== startWeek);
    this.updateGrids();
  }

  updateGrids() {
    this.multiWeekGridDataSource = [...this.multiWeekGridDataSource];
    this.waveScheduleGridDataSource = [...this.waveSchedule];
  }

  openDueDateDialog(wave: any) {
    this.dialog.open(this.dueDateDialog);
  }

  saveDueDate() {
    // Implement saving due date logic
    this.dialog.closeAll();
  }

  closeDialog() {
    this.dialog.closeAll();
  }
}


import { formatDate } from '@angular/common'; // Angular's date formatting utility

// Example function to get the start date of a week
function getStartDateOfWeek(year: number, week: number): Date {
  const date = new Date(year, 0, 1 + (week - 1) * 7);
  // Adjust date to the correct start of the week (assuming weeks start on Monday)
  const dayOfWeek = date.getDay();
  const diff = date.getDate() - dayOfWeek + (dayOfWeek === 0 ? -6 : 1); // Adjust to Monday
  return new Date(date.setDate(diff));
}

// Function to get the date range string for a given week number
function getDateRange(weekNumber: number): string {
  const year = new Date().getFullYear(); // Use current year or modify as needed

  // Get start date of the week
  const startDate = getStartDateOfWeek(year, weekNumber);
  const endDate = new Date(startDate);
  endDate.setDate(startDate.getDate() + 6); // Assuming the week ends 6 days after the start

  // Format dates as strings
  const formattedStartDate = formatDate(startDate, 'MM/dd/yyyy', 'en-US');
  const formattedEndDate = formatDate(endDate, 'MM/dd/yyyy', 'en-US');

  return `${formattedStartDate} - ${formattedEndDate}`;
}
