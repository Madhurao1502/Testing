<div class="filter-topbar">
  <div class="filter-container">
    <form [formGroup]="filterForm" class="filter-form">
      
      <!-- ROW 1: Primary Filters -->
      <div class="filter-row primary-row">
        
        <!-- IRI Week -->
        <div class="filter-field">
          <label class="form-label">IRI Week</label>
          <mat-form-field appearance="outline">
            <mat-select formControlName="iriWeek" (selectionChange)="onIriWeekChange()">
              <mat-option *ngFor="let week of iriWeeks" [value]="week.iri_week">
                {{week.iri_week_viewOnly}}
              </mat-option>
            </mat-select>
          </mat-form-field>
        </div>

        <!-- Territory -->
        <div class="filter-field">
          <label class="form-label">Territory</label>
          <mat-form-field appearance="outline">
            <mat-select formControlName="territory" (selectionChange)="onTerritoryChange()">
              <mat-option [value]="'-1'">ALL</mat-option>
              <mat-option *ngFor="let territory of territories" [value]="territory.territory_id">
                {{territory.territory_name}}
              </mat-option>
            </mat-select>
          </mat-form-field>
        </div>

        <!-- Store -->
        <div class="filter-field">
          <label class="form-label">Store</label>
          <mat-form-field appearance="outline">
            <input matInput [matAutocomplete]="storeAuto" formControlName="store" placeholder="Search stores...">
            <button mat-button *ngIf="filterForm.get('store')?.value" matSuffix mat-icon-button (click)="clearStrCtrl()">
              <mat-icon>cancel</mat-icon>
            </button>
            <mat-autocomplete #storeAuto="matAutocomplete" (optionSelected)="onStoreSelected($event)">
              <mat-option *ngFor="let store of filteredStores" [value]="store.store_name" [matTooltip]="store.store_name">
                {{store.store_name}} ({{store.store_number}})
              </mat-option>
            </mat-autocomplete>
          </mat-form-field>
        </div>

        <!-- FSR -->
        <div class="filter-field">
          <label class="form-label">FSR</label>
          <mat-form-field appearance="outline">
            <input matInput [matAutocomplete]="fsrAuto" formControlName="fsr" placeholder="Search FSR...">
            <button mat-button *ngIf="filterForm.get('fsr')?.value" matSuffix mat-icon-button (click)="clearFsrCtrl()">
              <mat-icon>cancel</mat-icon>
            </button>
            <mat-autocomplete #fsrAuto="matAutocomplete" (optionSelected)="onFsrSelected($event)">
              <mat-option *ngFor="let fsr of filteredFSR" [value]="fsr.emp_name" [matTooltip]="fsr.emp_name">
                {{fsr.emp_name}} ({{fsr.emp_id}})
              </mat-option>
            </mat-autocomplete>
          </mat-form-field>
        </div>

        <!-- Store Assignment (Changed from radio to dropdown) -->
        <div class="filter-field">
          <label class="form-label">Store Assignment</label>
          <mat-form-field appearance="outline">
            <mat-select formControlName="storeAssignment">
              <mat-option value="all">All Stores</mat-option>
              <mat-option value="assigned">Assigned Stores</mat-option>
              <mat-option value="unassigned">Unassigned Stores</mat-option>
            </mat-select>
          </mat-form-field>
        </div>

        <!-- Sample Type (Changed from radio to dropdown) -->
        <div class="filter-field">
          <label class="form-label">Sample Type</label>
          <mat-form-field appearance="outline">
            <mat-select formControlName="sampleType">
              <mat-option value="all">All Types</mat-option>
              <mat-option value="sample">Sample</mat-option>
              <mat-option value="nonSample">Non-Sample</mat-option>
            </mat-select>
          </mat-form-field>
        </div>

        <!-- Action Buttons -->
        <div class="action-buttons">
          <button mat-raised-button color="primary" (click)="onApplyFilters()">
            Apply Filters
          </button>
          <button mat-stroked-button (click)="onClearFilters()">
            Clear Filters
          </button>
        </div>
      </div>

      <!-- ROW 2: Secondary Filters -->
      <div class="filter-row secondary-row">
        
        <!-- State -->
        <div class="filter-field">
          <label class="form-label">State</label>
          <mat-form-field appearance="outline">
            <input matInput [matAutocomplete]="stateAuto" formControlName="state">
            <button mat-button *ngIf="filterForm.get('state')?.value" matSuffix mat-icon-button (click)="clearStaCtrl()">
              <mat-icon>cancel</mat-icon>
            </button>
            <mat-autocomplete #stateAuto="matAutocomplete" (optionSelected)="onStateSelected($event)">
              <mat-option *ngFor="let state of filteredState" [value]="state.state">
                {{state.state}}
              </mat-option>
            </mat-autocomplete>
          </mat-form-field>
        </div>

        <!-- City -->
        <div class="filter-field">
          <label class="form-label">City</label>
          <mat-form-field appearance="outline">
            <input matInput [matAutocomplete]="cityAuto" formControlName="city">
            <button mat-button *ngIf="filterForm.get('city')?.value" matSuffix mat-icon-button (click)="clearcityCtrl()">
              <mat-icon>cancel</mat-icon>
            </button>
            <mat-autocomplete #cityAuto="matAutocomplete" (optionSelected)="onCitySelected($event)">
              <mat-option *ngFor="let city of filteredCity" [value]="city.city">
                {{city.city}}
              </mat-option>
            </mat-autocomplete>
          </mat-form-field>
        </div>

        <!-- Cluster -->
        <div class="filter-field">
          <label class="form-label">Cluster</label>
          <mat-form-field appearance="outline">
            <input matInput [matAutocomplete]="clusterAuto" formControlName="cluster">
            <mat-autocomplete #clusterAuto="matAutocomplete" (optionSelected)="onClusterSelected($event)">
              <mat-option *ngFor="let cluster of filteredCluster" [value]="cluster.position_name">
                {{cluster.position_name}}
              </mat-option>
            </mat-autocomplete>
          </mat-form-field>
        </div>

        <!-- Task -->
        <div class="filter-field">
          <label class="form-label">Task</label>
          <mat-form-field appearance="outline">
            <input matInput [matAutocomplete]="taskAuto" formControlName="task">
            <button mat-button *ngIf="filterForm.get('task')?.value" matSuffix mat-icon-button (click)="clearTaskCtrl()">
              <mat-icon>cancel</mat-icon>
            </button>
            <mat-autocomplete #taskAuto="matAutocomplete" (optionSelected)="onTaskSelected($event)">
              <mat-option *ngFor="let task of filteredTask" [value]="task.task_name">
                {{task.task_name}} ({{task.task_number}})
              </mat-option>
            </mat-autocomplete>
          </mat-form-field>
        </div>

        <!-- FSR Hours (Combined operator and hours input) -->
        <div class="filter-field fsr-hours-field">
          <label class="form-label">FSR Hours</label>
          <div class="fsr-hours-container">
            <mat-form-field appearance="outline" class="operator-field">
              <mat-select formControlName="fsrHourOperator" (selectionChange)="onFsrHourOperatorChange()">
                <mat-option *ngFor="let op of fsrHourOperators" [value]="op.value">
                  {{op.label}}
                </mat-option>
              </mat-select>
            </mat-form-field>
            
            <mat-form-field appearance="outline" class="hour-field">
              <input matInput 
                    formControlName="fsrHour" 
                    type="number" 
                    placeholder="Hours"
                    (change)="onFsrHourChange()"
                    min="0"
                    max="999">
            </mat-form-field>
          </div>
        </div>

        <!-- Visible Columns -->
        <div class="filter-field">
          <label class="form-label">Visible Columns</label>
          <mat-form-field appearance="outline">
            <mat-label>Select Columns</mat-label>
            <mat-select multiple [(value)]="selectedColumns" (selectionChange)="onColumnSelectionChange()">
              <mat-option *ngFor="let column of availableColumns" 
                          [value]="column.key" 
                          [disabled]="column.required">
                {{column.label}}
                <span *ngIf="column.required" class="required-indicator"> *</span>
              </mat-option>
            </mat-select>
          </mat-form-field>
        </div>

        <!-- Multi FSR Store Checkbox -->
        <div class="checkbox-field">
          <label class="form-label">Options</label>
          <mat-checkbox formControlName="multiFsrStore" (change)="onMultiFsrStoreChange()">
            Multi FSR Store
          </mat-checkbox>
        </div>
      </div>
    </form>
  </div>
</div>

<footer>
  <div class="mat-spinner-container">
    <mat-spinner mode="indeterminate" *ngIf="showSpinner"></mat-spinner>
    <div *ngIf="showSpinner" style="position:relative;left: 10px">Loading...</div>
  </div>
</footer>
UPDATED filter-sidebar.component.css (2-Row Layout Styling)
css
.filter-topbar {
  width: 100%;
  background-color: #f8f9fa;
  border-bottom: 1px solid #e0e0e0;
  padding: 16px 0;
}

.filter-container {
  max-width: 100%;
  margin: 0 auto;
  padding: 0 16px;
}

.filter-form {
  width: 100%;
}

/* ROW STYLING */
.filter-row {
  display: grid;
  gap: 16px;
  align-items: end;
  margin-bottom: 16px;
  width: 100%;
}

/* ROW 1: Primary Filters - 8 columns */
.primary-row {
  grid-template-columns: 
    1fr          /* IRI Week */
    1fr          /* Territory */
    1.2fr        /* Store */
    1.2fr        /* FSR */
    1fr          /* Store Assignment */
    1fr          /* Sample Type */
    auto;        /* Action Buttons */
}

/* ROW 2: Secondary Filters - 7 columns */
.secondary-row {
  grid-template-columns: 
    1fr          /* State */
    1fr          /* City */
    1fr          /* Cluster */
    1.2fr        /* Task */
    1.5fr        /* FSR Hours (operator + input) */
    1.5fr        /* Visible Columns */
    auto;        /* Multi FSR Store */
}

/* FIELD STYLING */
.filter-field {
  display: flex;
  flex-direction: column;
  min-width: 0; /* Prevents grid overflow */
}

.form-label {
  font-size: 12px;
  font-weight: 600;
  color: #333;
  margin-bottom: 4px;
  text-transform: uppercase;
  letter-spacing: 0.5px;
}

.filter-field mat-form-field {
  width: 100%;
  font-size: 14px;
}

.filter-field mat-form-field .mat-form-field-wrapper {
  padding-bottom: 0;
}

/* FSR HOURS SPECIAL STYLING */
.fsr-hours-field {
  position: relative;
}

.fsr-hours-container {
  display: grid;
  grid-template-columns: 60px 1fr;
  gap: 8px;
  width: 100%;
}

.operator-field {
  min-width: 60px;
}

.operator-field .mat-select-value {
  font-size: 13px;
  text-align: center;
}

.hour-field {
  flex: 1;
}

/* ACTION BUTTONS */
.action-buttons {
  display: flex;
  gap: 8px;
  align-items: flex-end;
}

.action-buttons button {
  min-width: 100px;
  height: 40px;
  font-size: 13px;
  font-weight: 500;
}

/* CHECKBOX FIELD */
.checkbox-field {
  display: flex;
  flex-direction: column;
  justify-content: flex-end;
  align-items: flex-start;
  min-height: 56px;
}

.checkbox-field mat-checkbox {
  margin-top: 8px;
}

.checkbox-field .form-label {
  margin-bottom: 8px;
}

/* MAT-SELECT STYLING */
.mat-select-panel {
  max-height: 300px;
}

.mat-option {
  font-size: 14px;
}

.required-indicator {
  color: #f44336;
  font-weight: bold;
}

/* RESPONSIVE DESIGN */
@media (max-width: 1600px) {
  .primary-row {
    grid-template-columns: 
      0.9fr 0.9fr 1.1fr 1.1fr 0.9fr 0.9fr auto;
  }
  
  .secondary-row {
    grid-template-columns: 
      0.9fr 0.9fr 0.9fr 1.1fr 1.4fr 1.4fr auto;
  }
}

@media (max-width: 1400px) {
  .filter-row {
    gap: 12px;
  }
  
  .primary-row {
    grid-template-columns: 
      0.8fr 0.8fr 1fr 1fr 0.8fr 0.8fr auto;
  }
  
  .secondary-row {
    grid-template-columns: 
      0.8fr 0.8fr 0.8fr 1fr 1.3fr 1.3fr auto;
  }
  
  .action-buttons button {
    min-width: 90px;
    font-size: 12px;
  }
}

@media (max-width: 1200px) {
  .filter-row {
    gap: 8px;
  }
  
  .primary-row,
  .secondary-row {
    grid-template-columns: repeat(auto-fit, minmax(140px, 1fr));
  }
  
  .action-buttons {
    grid-column: 1 / -1;
    justify-content: center;
    margin-top: 8px;
  }
  
  .checkbox-field {
    grid-column: 1 / -1;
    align-items: center;
  }
}

@media (max-width: 768px) {
  .filter-container {
    padding: 0 8px;
  }
  
  .filter-row {
    display: flex;
    flex-direction: column;
    gap: 12px;
  }
  
  .filter-field,
  .checkbox-field {
    width: 100%;
  }
  
  .fsr-hours-container {
    grid-template-columns: 80px 1fr;
  }
  
  .action-buttons {
    flex-direction: column;
    width: 100%;
  }
  
  .action-buttons button {
    width: 100%;
    min-width: unset;
  }
}

/* HOVER EFFECTS */
.filter-field:hover mat-form-field {
  transform: translateY(-1px);
  transition: transform 0.2s ease;
}

.action-buttons button:hover {
  transform: translateY(-1px);
  transition: transform 0.2s ease;
}

/* FOCUS STATES */
.mat-form-field.mat-focused {
  transform: scale(1.02);
  transition: transform 0.2s ease;
}

/* LOADING SPINNER */
.mat-spinner-container {
  display: flex;
  align-items: center;
  justify-content: center;
  padding: 8px;
  gap: 12px;
}

footer {
  position: fixed;
  bottom: 0;
  left: 0;
  right: 0;
  background-color: rgba(255, 255, 255, 0.9);
  backdrop-filter: blur(4px);
  z-index: 1000;
}
UPDATED filter-sidebar.component.ts (Dropdown Options)
typescript
// ADD these dropdown options to your existing FilterSidebarComponent:

export class FilterSidebarComponent implements OnInit, OnDestroy {
  // ... existing properties ...

  // ADDED: Dropdown options for Store Assignment
  storeAssignmentOptions = [
    { value: 'all', label: 'All Stores' },
    { value: 'assigned', label: 'Assigned Stores' },
    { value: 'unassigned', label: 'Unassigned Stores' }
  ];

  // ADDED: Dropdown options for Sample Type
  sampleTypeOptions = [
    { value: 'all', label: 'All Types' },
    { value: 'sample', label: 'Sample' },
    { value: 'nonSample', label: 'Non-Sample' }
  ];

  // ... existing code remains the same ...

  private initializeForm(): void {
    this.filterForm = this.fb.group({
      iriWeek: [''],
      territory: [''],
      store: [''],
      state: [''],
      city: [''],
      cluster: [''],
      task: [''],
      fsr: [''],
      fsrHour: [''],
      fsrHourOperator: ['NA'], 
      storeAssignment: ['all'],  // Default to 'all'
      sampleType: ['all'],       // Default to 'all'
      multiFsrStore: [false]
    });
  }

  // ... rest of your existing methods remain unchanged ...
}
Layout Summary:
Row 1 (Primary Filters):
text
[IRI Week] [Territory] [Store] [FSR] [Store Assignment] [Sample Type] [Apply] [Clear]
Row 2 (Secondary Filters):
text
[State] [City] [Cluster] [Task] [Operator][Hours] [Visible Columns] [☑ Multi FSR]
Key Improvements:
✅ Changed to Dropdowns:
Store Assignment: All Stores | Assigned Stores | Unassigned Stores

Sample Type: All Types | Sample | Non-Sample

✅ Organized Layout:
Row 1: Primary filters + action buttons

Row 2: Secondary filters + options

✅ Compact FSR Hours:
Combined: Operator dropdown + hours input side-by-side

Space efficient: Takes up less horizontal space

✅ Responsive Design:
Desktop: Full 2-row grid layout

Tablet: Adjusted column sizes

Mobile: Stacked vertical layout

✅ Professional Styling:
Consistent spacing and typography

Hover effects for better UX

Grid-based layout for perfect alignment

Proper focus states for accessibility

This new layout is much more organized and efficient with screen space while maintaining all functionality! 🎯
