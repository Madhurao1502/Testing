  <div class="table-container">
    <mat-card class="table-card" [ngClass]="getWeekTypeClass()">
      <mat-card-header>
        <!-- <mat-card-title> -->
          <!-- {{getWeekTypeDisplayName()}}
          <span class="week-indicator" [ngClass]="currentWeekType">
            {{currentWeekType | uppercase}}
          </span> -->
                <!-- Search Bar -->
          <!-- <div class="search-container">
            <mat-form-field appearance="outline" class="search-field">
              <mat-label>Search stores...</mat-label>
              <input matInput [formControl]="searchControl" 
                    placeholder="Search by store number, name, address, city, state, assigned to, etc.">
              <mat-icon matPrefix>search</mat-icon>
              <button mat-button *ngIf="searchControl.value" matSuffix mat-icon-button (click)="clearSearch()">
                <mat-icon>clear</mat-icon>
              </button>
            </mat-form-field>
          </div>
        </mat-card-title> -->
        <!-- <mat-card-subtitle>
          {{dataSource.data.length}} stores found
          <span *ngIf="getExpandedRowCount() > 0" class="expanded-info">
            • {{getExpandedRowCount()}} rows expanded
          </span>
        </mat-card-subtitle> -->
      </mat-card-header>
      
      <mat-card-content>
        <div class="table-wrapper">
          <mat-table #table [dataSource]="dataSource" matSort class="store-table mat-elevation-2">
            
            <!-- Store Number Column  -->
            <ng-container matColumnDef="store_number">
              <mat-header-cell *matHeaderCellDef class="mat-header-style">
                <button mat-icon-button 
                        [disabled]="isExpandingAll"
                        (click)="expandAllRows()" 
                        [title]="allExpanded ? 'Collapse All' : 'Expand All'"
                        class="expand-all-btn">
                  <mat-icon>{{allExpanded ? 'unfold_less' : 'unfold_more'}}</mat-icon>
                </button>
                Store #
              </mat-header-cell>
              <mat-cell *matCellDef="let element" class="store-number-cell">
                <span class="caret" [class.clicked]="isRowExpanded(element)">▼</span>
                <span class="store-number">{{element.StoreNumber}}</span>
              </mat-cell>
            </ng-container>

            <!-- Store Name Column (Always Present) -->
            <ng-container matColumnDef="store_name">
              <mat-header-cell *matHeaderCellDef class="mat-header-style">Store Name</mat-header-cell>
              <mat-cell *matCellDef="let element" class="store-name-cell">
                <span class="store-name" (click)="openProximityDataDialog(element); $event.stopPropagation();">
                  {{element.StoreName}}
                </span>
              </mat-cell>
            </ng-container>

            <!-- Address Column (Always Present) -->
            <ng-container matColumnDef="addr_line1">
              <mat-header-cell *matHeaderCellDef class="mat-header-style">Address</mat-header-cell>
              <mat-cell *matCellDef="let element">{{element.AddrLine1}}</mat-cell>
            </ng-container>

            <!-- City Column (Always Present) -->
            <ng-container matColumnDef="city">
              <mat-header-cell *matHeaderCellDef class="mat-header-style">City</mat-header-cell>
              <mat-cell *matCellDef="let element">{{element.City}}</mat-cell>
            </ng-container>

            <!-- State Column  -->
            <ng-container matColumnDef="state">
              <mat-header-cell *matHeaderCellDef class="mat-header-style">State</mat-header-cell>
              <mat-cell *matCellDef="let element">
                <span class="state-badge">{{element.State}}</span>
              </mat-cell>
            </ng-container>

            <!-- Zip Column  -->
            <ng-container matColumnDef="zip" *ngIf="isColumnVisible('zip')">
              <mat-header-cell *matHeaderCellDef class="mat-header-style">Zip</mat-header-cell>
              <mat-cell *matCellDef="let element">{{element.Zip}}</mat-cell>
            </ng-container>

            <!-- Assigned To Column  -->
            <ng-container matColumnDef="assigned_to">
              <mat-header-cell *matHeaderCellDef class="mat-header-style">Assigned To</mat-header-cell>
              <mat-cell *matCellDef="let element" class="assigned-cell" 
                        (click)="openAssignmentDialog(element, 'StoreLevel'); $event.stopPropagation()">
                <span class="assignment-badge" [ngClass]="getAssignmentClass(element.AssignedTo)">
                  {{element.AssignedTo}}
                </span>
              </mat-cell>
            </ng-container>

            <!-- Task Completed Column  -->
            <ng-container matColumnDef="task_completed" *ngIf="isColumnVisible('task_completed')">
              <mat-header-cell *matHeaderCellDef class="mat-header-style">Completed</mat-header-cell>
              <mat-cell *matCellDef="let element">
                <span class="status-badge" [ngClass]="getTaskCompletedClass(element.TaskCompleted)">
                  <!-- <mat-icon>{{element.TaskCompleted?.toLowerCase() === 'yes' ? 'check_circle' : 'radio_button_unchecked'}}</mat-icon> -->
                  {{formatTaskCompleted(element.TaskCompleted)}}
                </span>
              </mat-cell>
            </ng-container>

            <!-- Quality Column  -->
            <ng-container matColumnDef="quality" *ngIf="isColumnVisible('quality')">
              <mat-header-cell *matHeaderCellDef class="mat-header-style">Quality</mat-header-cell>
              <mat-cell *matCellDef="let element">
                <span class="quality-badge" [ngClass]="getQualityClass(element.Quality)">
                  {{formatQuality(element.Quality)}}
                </span>
              </mat-cell>
            </ng-container>

            <!-- Cost Over Column  -->
            <ng-container matColumnDef="cost_over" *ngIf="isColumnVisible('cost_over')">
              <mat-header-cell *matHeaderCellDef class="mat-header-style">Over Cost</mat-header-cell>
              <mat-cell *matCellDef="let element">
                <span class="cost-badge" [ngClass]="getCostOverClass(element.CostOver)">
                  <!-- <mat-icon>{{element.CostOver?.toLowerCase() === 'yes' ? 'warning' : 'check_circle'}}</mat-icon> -->
                  {{formatCostOver(element.CostOver)}}
                </span>
              </mat-cell>
            </ng-container>

            <!-- Guaranteed Miles Column  -->
            <ng-container matColumnDef="guaranteed_miles" *ngIf="isColumnVisible('guaranteed_miles')">
              <mat-header-cell *matHeaderCellDef class="mat-header-style">Miles</mat-header-cell>
              <mat-cell *matCellDef="let element">{{formatGuaranteedMiles(element.GuaranteedMiles)}}</mat-cell>
            </ng-container>

            <!-- Average Cost Column -->
            <ng-container matColumnDef="avg_cost" *ngIf="isColumnVisible('avg_cost')">
              <mat-header-cell *matHeaderCellDef class="mat-header-style">Avg Cost</mat-header-cell>
              <mat-cell *matCellDef="let element">{{formatAvgCost(element.AvgCost)}}</mat-cell>
            </ng-container>

            <!-- WK1 Costs Column  -->
            <ng-container matColumnDef="wk1_costs" *ngIf="isColumnVisible('wk1_costs')">
              <mat-header-cell *matHeaderCellDef class="mat-header-style">WK1 Costs</mat-header-cell>
              <mat-cell *matCellDef="let element">{{formatWk1Costs(element)}}</mat-cell>
            </ng-container>

            <!-- WK2 Costs Column  -->
            <ng-container matColumnDef="wk2_costs" *ngIf="isColumnVisible('wk2_costs')">
              <mat-header-cell *matHeaderCellDef class="mat-header-style">WK2 Costs</mat-header-cell>
              <mat-cell *matCellDef="let element">{{formatWk2Costs(element)}}</mat-cell>
            </ng-container>

            <!-- Comments Column -->
            <!-- <ng-container matColumnDef="user_comment">
              <mat-header-cell *matHeaderCellDef class="mat-header-style">Comments</mat-header-cell>
              <mat-cell *matCellDef="let element" class="comment-cell"> -->
                <!-- View mode -->
                <!-- <div *ngIf="!element.IsCommentEditing" class="comment-view">
                  <span class="comment-text" 
                        [title]="element.UserComment"
                        (click)="startCommentEdit(element); $event.stopPropagation();">
                    {{element.UserComment || 'Add comment...'}}
                  </span>
                  <button mat-icon-button 
                          (click)="startCommentEdit(element); $event.stopPropagation();"
                          class="comment-edit-btn">
                    <mat-icon>edit</mat-icon>
                  </button>
                </div> -->
                
                <!-- Edit mode -->
                <!-- <div *ngIf="element.IsCommentEditing" class="comment-edit">
                  <mat-form-field appearance="standard" class="comment-field">
                    <textarea matInput
                              [value]="element.UserComment"
                              placeholder="Enter comment..."
                              (keydown)="onCommentKeydown($event, element)"
                              #commentInput
                              rows="2"
                              maxlength="500">
                    </textarea>
                  </mat-form-field>
                  <div class="comment-actions">
                    <button mat-icon-button 
                            color="primary"
                            (click)="saveComment(element, commentInput.value); $event.stopPropagation();">
                      <mat-icon>check</mat-icon>
                    </button>
                    <button mat-icon-button 
                            (click)="cancelCommentEdit(element); $event.stopPropagation();">
                      <mat-icon>close</mat-icon>
                    </button>
                  </div>
                </div>
              </mat-cell>
            </ng-container> -->

            <ng-container matColumnDef="user_comment">
          <mat-header-cell *matHeaderCellDef class="mat-header-style">Comments</mat-header-cell>
          <mat-cell *matCellDef="let element" class="comment-cell">
            <!-- View mode -->
            <div *ngIf="!element.IsCommentEditing" class="comment-view">
              <span class="comment-text" 
                    [title]="element.UserComment"
                    (click)="canEditComments && startCommentEdit(element); $event.stopPropagation();"
                    [style.cursor]="canEditComments ? 'pointer' : 'default'">
                {{element.UserComment || (canEditComments ? 'Add comment...' : 'No comment')}}
              </span>
              
              <!-- Edit button - only show if user has permission -->
              <button *ngIf="canEditComments" 
                      mat-icon-button 
                      (click)="startCommentEdit(element); $event.stopPropagation();"
                      class="comment-edit-btn">
                <mat-icon>edit</mat-icon>
              </button>
              
              <!-- Delete button - only show if user has permission and comment exists -->
              <button *ngIf="canDeleteComments && element.UserComment" 
                      mat-icon-button 
                      (click)="deleteComment(element); $event.stopPropagation();"
                      class="comment-delete-btn">
                <mat-icon>delete</mat-icon>
      </button>
    </div>
    
    <!-- Edit mode - only if user has permission -->
    <div *ngIf="element.IsCommentEditing && canEditComments" class="comment-edit">
      <mat-form-field appearance="standard" class="comment-field">
        <textarea matInput
                  [value]="element.UserComment"
                  placeholder="Enter comment..."
                  (keydown)="onCommentKeydown($event, element)"
                  #commentInput
                  rows="2"
                  maxlength="500">
        </textarea>
      </mat-form-field>
      <div class="comment-actions">
        <button mat-icon-button 
                color="primary"
                (click)="saveComment(element, commentInput.value); $event.stopPropagation();">
          <mat-icon>check</mat-icon>
        </button>
        <button mat-icon-button 
                (click)="cancelCommentEdit(element); $event.stopPropagation();">
          <mat-icon>close</mat-icon>
        </button>
      </div>
    </div>
  </mat-cell>
            </ng-container>

            <!-- Header and Data Rows -->
            <mat-header-row *matHeaderRowDef="displayedColumns; sticky: true"></mat-header-row>
            <mat-row *matRowDef="let row; columns: displayedColumns; let i = index"
                    class="table-row"
                    [cdkDetailRow]="row" 
                    [cdkDetailRowTpl]="tpl"
                    (toggleChange)="GetSubgridData($event, row)"
                    (dataLoadRequest)="onDataLoadRequest($event)"
                    matRipple>
            </mat-row>
          </mat-table>
        </div>
        
        <mat-paginator [pageSizeOptions]="[50, 100, 150, 200]" 
                      showFirstLastButtons
                      class="table-paginator">
        </mat-paginator>

        <!--  Inner Table Template  -->
          <ng-template #tpl let-element let-subgridData="subgridData" let-isLoading="isLoading">
          <div class="mat-row detail-row" style="overflow: hidden;">
            
            <!-- Loading indicator for this specific row -->
            <div *ngIf="isLoading" class="row-loading">
              <mat-spinner diameter="20"></mat-spinner>
              <span>Loading data for {{element.StoreName}}...</span>
            </div>
            
            <!-- Data table for this specific row -->
            <table class="expanded-table" *ngIf="!isLoading"> 
              <tr> 
              <th>Task Name</th>
                <th>Assigned To</th>              
                <th>CSR Info</th>
                <th>Wave</th>
                <th>Avg Coll Time</th>
              </tr>
              <tr *ngFor="let item of subgridData;">
                <td> {{item.TaskName}}</td>
                <td (click)="openTaskAssignmentDialog(item);$event.stopPropagation()">{{item.AssignedTo}} </td>              
                <td>{{item.CsrInfo}} </td>
                <td >
                  {{item.Wave}}       
                </td>
                <td >
                  {{item.ExpectedCollectionTime}}</td>
              
              </tr>       
            </table>
          </div>
        </ng-template>
        <!-- <ng-template #tpl let-element>
          <div class="mat-row detail-row" [@detailExpand] style="overflow: hidden;">
            <table class="expanded-table"> 
              <tr> 
                <th>Task Name</th>
                <th>Assigned To</th>              
                <th>CSR Info</th>
                <th>Wave</th>
                <th>Avg Coll Time</th>
              
              </tr>
              <tr *ngFor="let item of SubgridData">
                <td> {{item.TaskName}}</td>
                <td>{{item.AssignedTo}} </td>              
                <td>{{item.CsrInfo}} </td>
                <td >
                  {{item.Wave}}       
                </td>
                <td >
                  {{item.ExpectedCollectionTime}}</td>
              
              </tr>       
            </table>
          </div>
        </ng-template> -->
      </mat-card-content>
    </mat-card>
  </div>

  <footer>
      <div class="mat-spinner-container">
          <mat-spinner mode="indeterminate" *ngIf="showSpinner"></mat-spinner>
          <div *ngIf="showSpinner" style="position:relative;left: 10px">Loading...</div>
      </div>
  </footer>


import { trigger, state, style, transition, animate } from '@angular/animations';
import { SelectionModel } from '@angular/cdk/collections';
import { HttpClient } from '@angular/common/http';
import { AfterViewInit, ChangeDetectorRef, Component, Inject, OnDestroy, OnInit, QueryList, ViewChild, ViewChildren } from '@angular/core';
import { FormControl } from '@angular/forms';
import { MatDialog } from '@angular/material/dialog';
import { MatPaginator } from '@angular/material/paginator';
import { MatSort } from '@angular/material/sort';
import { MatTable, MatTableDataSource } from '@angular/material/table';
import { catchError, debounceTime, distinctUntilChanged, firstValueFrom, of, Subject, takeUntil, tap } from 'rxjs';
import { AssignmentDialogComponent } from 'src/app/dialog/assignment-dialog/assignment-dialog.component';
import { ProximityDialogComponent } from 'src/app/dialog/proximity-dialog/proximity-dialog.component';
import { CdkDetailRowDirective } from 'src/app/shared/cdk-detail-row.directive';
import { GetGridDataFilter, Store } from 'src/app/shared/common.model';
import { CommonService } from 'src/app/shared/common.service';
@Component({
  selector: 'app-store-table',
  templateUrl: './store-table.component.html',
  styleUrls: ['./store-table.component.css'],
  animations: [
    trigger('detailExpand', [
      state('collapsed', style({height: '0px', minHeight: '0'})),
      state('expanded', style({height: '*'})),
      transition('expanded <=> collapsed', animate('225ms cubic-bezier(0.4, 0.0, 0.2, 1)')),
    ]),
  ],
})
export class StoreTableComponent implements OnInit, OnDestroy,AfterViewInit {
   @ViewChild(MatTable, { static: false }) table:MatTable<any>;
  @ViewChild(MatPaginator) paginator!: MatPaginator;
  @ViewChild(MatSort) sort!: MatSort;
@ViewChildren(CdkDetailRowDirective) detailRows!: QueryList<CdkDetailRowDirective>;
  isExpandingAll = false;
  allExpanded = false;
  expandedRowsData = new Map<string, any[]>();
  expandedRows=new Set<CdkDetailRowDirective>();
  selectedRows = new Set<any>();
  private unsubscribe$ = new Subject<void>();
  searchControl = new FormControl('');
  originalData: any[] = [];
  isSearching = false;
  canEditComments = false;
  canDeleteComments = false;
  // Dynamic column configuration based on week type
  baseColumns = ['store_number', 'store_name', 'addr_line1', 'city', 'state', 'zip', 'assigned_to', 'user_comment'];
  
  currentWeekColumns = [
    'store_number', 'store_name', 'addr_line1', 'city', 'state', 'assigned_to', 
    'task_completed', 'quality', 'cost_over', 'guaranteed_miles', 'user_comment'
  ];
  
  futureWeekColumns = [
    'store_number', 'store_name', 'addr_line1', 'city', 'state', 'assigned_to',
    'avg_cost', 'guaranteed_miles', 'user_comment'
  ];
  
  previousWeekColumns = [
    'store_number', 'store_name', 'addr_line1', 'city', 'state', 'assigned_to',
    'task_completed', 'quality', 'cost_over', 'wk1_costs', 'wk2_costs', 'user_comment'
  ];
   displayedColumns: string[] = this.baseColumns;
  dataSource = new MatTableDataSource<Store>([]);
  selection = new SelectionModel<Store>(true, []);
  GetGridDataFilter:GetGridDataFilter 
  private destroy$ = new Subject<void>();
  loggeduser:string
  showSpinner:boolean=false;
  isExpansionDetailRow = (index, row) => row.hasOwnProperty('detailRow');
     currentWeekType: 'current' | 'future' | 'previous' = 'current';
  constructor(private commonService: CommonService,
  public http: HttpClient,
  @Inject('BASE_URL') public baseUrl: string,
   private cdr: ChangeDetectorRef,
  private dialog:MatDialog) {this.loggeduser = localStorage.getItem("loggedUserId"); }

  ngOnInit(): void {
 this.commonService.spinner$
      .pipe(takeUntil(this.destroy$))
      .subscribe(isLoading => {
        this.showSpinner = isLoading;
      });

     this.commonService.weekType$
      .pipe(takeUntil(this.destroy$))
      .subscribe(weekType => {
        this.currentWeekType = weekType;
        this.updateDisplayedColumns();
        this.cdr.detectChanges();
      });

   this.commonService.currentWeekData$
      .pipe(takeUntil(this.destroy$))
      .subscribe(data => {
        if (this.currentWeekType === 'current') {
          this.updateDataSource(data);
        }
      });

    // Subscribe to future week data
    this.commonService.futureWeekData$
      .pipe(takeUntil(this.destroy$))
      .subscribe(data => {
        if (this.currentWeekType === 'future') {
          this.updateDataSource(data);
        }
      });

    // Subscribe to previous week data
    this.commonService.previousWeekData$
      .pipe(takeUntil(this.destroy$))
      .subscribe(data => {
        if (this.currentWeekType === 'previous') {
          this.updateDataSource(data);
        }
      });

       this.commonService.groupsStatus$.subscribe(userGroups => {
                this.canEditComments = userGroups['isgTechnologyGroup'];
                this.canDeleteComments = userGroups['isgTechnologyGroup'];
        })

      this.setupSearch();
  }
  // private updateDataSource(data: any[]): void {
  //   this.dataSource = new MatTableDataSource<any>(data);
  //   this.dataSource.paginator = this.paginator;
  //   this.dataSource.sort = this.sort;
  //   this.resetExpansionState();
  // }

  private updateDisplayedColumns(): void {
    switch (this.currentWeekType) {
      case 'current':
        this.displayedColumns = this.currentWeekColumns;
        break;
      case 'future':
        this.displayedColumns = this.futureWeekColumns;
        break;
      case 'previous':
        this.displayedColumns = this.previousWeekColumns;
        break;
      default:
        this.displayedColumns = this.baseColumns;
    }
    console.log(`Updated columns for ${this.currentWeekType} week:`, this.displayedColumns);
  }

  // Week type specific display methods
  getWeekTypeDisplayName(): string {
    switch (this.currentWeekType) {
      case 'current': return 'Current Week Tasks';
      case 'future': return 'Future Week Planning';
      case 'previous': return 'Previous Week History';
      default: return 'Store Assignment Data';
    }
  }

  getWeekTypeClass(): string {
    return `week-${this.currentWeekType}`;
  }

  // Column visibility checks
  isColumnVisible(columnName: string): boolean {
    return this.displayedColumns.includes(columnName);
  }

  // Data formatting methods for different week types
  formatTaskCompleted(value: any): string {
    return value?.toLowerCase() === 'yes' ? 'Yes' : 'No';
  }

  formatQuality(value: any): string {
    return value || 'N/A';
  }

  // formatCostOver(value: any): string {
  //   return value?.toLowerCase() === 'yes' ? 'Yes' : 'No';
  // }

  formatGuaranteedMiles(value: any): string {
    return value ? `${value}` : 'N/A';
  }

  formatAvgCost(value: any): string {
    return value ? `$${parseFloat(value).toFixed(2)}` : 'TBD';
  }

  formatCostOver(value: any): string {
    return value ? `${value}` : 'N/A';
  }

  formatWk1Costs(row: any): string {
    const prod = parseFloat(row.WK1FSRProdCost || 0);
    const travel = parseFloat(row.WK1StoreTravelCost || 0);
    const ovg = parseFloat(row.WK1StoreTravelOvgCost || 0);
    const total = prod + travel + ovg;
    return total > 0 ? `$${total.toFixed(2)}` : '$0.00';
  }

  formatWk2Costs(row: any): string {
    const prod = parseFloat(row.WK2FSRProdCost || 0);
    const travel = parseFloat(row.WK2StoreTravelCost || 0);
    const ovg = parseFloat(row.WK2StoreTravelOvgCost || 0);
    const total = prod + travel + ovg;
    return total > 0 ? `$${total.toFixed(2)}` : '$0.00';
  }

  // Status badge classes
  getTaskCompletedClass(value: any): string {
    return value?.toLowerCase() === 'yes' ? 'completed' : 'incomplete';
  }

  getQualityClass(value: any): string {
    const quality = value?.toLowerCase();
    if (quality === 'good') return 'quality-good';
    if (quality === 'average') return 'quality-average';
    if (quality === 'poor') return 'quality-poor';
    return 'quality-unknown';
  }

  getCostOverClass(value: any): string {
    return value?.toLowerCase() === 'yes' ? 'cost-over' : 'cost-ok';
  }

  // Your existing methods (expand/collapse, assignments, etc.)
  ngAfterViewInit(): void {
    this.dataSource.paginator = this.paginator;
    this.dataSource.sort = this.sort;
    
    if (this.paginator) {
      this.paginator.page
        .pipe(takeUntil(this.destroy$))
        .subscribe(() => {
          console.log('Page changed - resetting expansion state');
          this.forceCollapseAllRows();
          this.resetExpansionState();
        });
    }
  }



  ngOnDestroy(): void {
    this.destroy$.next();
    this.destroy$.complete();
  }

  /** Whether the number of selected elements matches the total number of rows. */
  isAllSelected() {
    const numSelected = this.selection.selected.length;
    const numRows = this.dataSource.data.length;
    return numSelected === numRows;
  }

  /** Selects all rows if they are not all selected; otherwise clear selection. */
 

  /** The label for the checkbox on the passed row */
  checkboxLabel(row?: Store): string {
    if (!row) {
      return `${this.isAllSelected() ? 'deselect' : 'select'} all`;
    }
    return `${this.selection.isSelected(row) ? 'deselect' : 'select'} row ${row.id}`;
  }


  /** Get full address string */
  getFullAddress(store: Store): string {
    return `${store.addr_line1}, ${store.city}, ${store.state} ${store.zip}`;
  }

  trackByStoreNumber(index: number, item: any): any {
  return item.storeNumber || item.StoreNumber || index;
}

async expandAllRows(): Promise<void> {
    if (this.isExpandingAll) {
      return;
    }
    
    this.isExpandingAll = true;
    
    try {
      if (this.allExpanded) {
        // Collapse all
        this.forceCollapseAllRows();
        this.allExpanded = false;
      } else {
        // First collapse any individually expanded rows
        this.forceCollapseAllRows();
        
        // Then expand all
        await this.expandAllRowsWithData();
        this.allExpanded = true;
      }
      
    } catch (error) {
      console.error('Error in expandAllRows:', error);
    } finally {
      this.isExpandingAll = false;
    }
  }

  private forceCollapseAllRows(): void {
    console.log('Force collapsing all rows...');
    
    const detailRowsArray = this.detailRows?.toArray() || [];
    
    // Collapse all directive rows
    detailRowsArray.forEach((detailRow) => {
      if (detailRow.isExpanded) {
        detailRow.collapse();
        console.log('Collapsed directive row');
      }
    });
    
    // Clear tracking sets
    this.expandedRows.clear();
    this.selectedRows.clear();
    
    // Force update all caret icons to collapsed state
    setTimeout(() => {
      const caretIcons = document.querySelectorAll('.caret');
      caretIcons.forEach(icon => {
        icon.classList.remove('clicked');
      });
      console.log('Updated all caret icons to collapsed state');
    }, 100);
    
    console.log('All rows force collapsed');
  }

  // FIXED: Expand rows with proper data assignment
  private async expandAllRowsWithData(): Promise<void> {
    console.log('Starting to expand all rows with data...');
    
    const currentPageData = this.getCurrentPageData();
    const detailRowsArray = this.detailRows?.toArray() || [];
    
    if (detailRowsArray.length === 0) {
      console.warn('No detail row directives found');
      return;
    }

    // Load all data first
    console.log('Loading data for all rows...');
    const dataLoadPromises = currentPageData.map(rowData => 
      this.loadSubgridDataForRow(rowData).catch(error => {
        console.error(`Error loading data for ${rowData.StoreNumber}:`, error);
        return [];
      })
    );

    const allRowData = await Promise.all(dataLoadPromises);
    console.log('All data loaded, expanding rows...');

    // Now expand each row with its specific data
    for (let i = 0; i < Math.min(currentPageData.length, detailRowsArray.length); i++) {
      const detailRowDirective = detailRowsArray[i];
      const rowData = allRowData[i];
      
      if (detailRowDirective && detailRowDirective.canExpand()) {
        try {
          // Expand with specific data for this row
          detailRowDirective.expandWithData(rowData);
          
          // Add to tracking sets
          this.expandedRows.add(detailRowDirective);
          this.selectedRows.add(currentPageData[i]);
          
          console.log(`Expanded row ${i + 1} with ${rowData.length} detail records`);
          
          // Small delay for UI smoothness
          await this.delay(25);
          
        } catch (error) {
          console.error(`Error expanding row ${i}:`, error);
        }
      }
    }
    
    // Update all caret icons to expanded state
    setTimeout(() => {
      const caretIcons = document.querySelectorAll('.caret');
      caretIcons.forEach(icon => {
        icon.classList.add('clicked');
      });
      console.log('Updated all caret icons to expanded state');
    }, 100);
    
    console.log('Finished expanding all rows');
  }

  // ENHANCED: Reset expansion state with forced cleanup
  private resetExpansionState(): void {
    console.log('Resetting expansion state');
    this.allExpanded = false;
    this.isExpandingAll = false;
    this.expandedRows.clear();
    this.selectedRows.clear();
    this.expandedRowsData.clear();
    
    // Force update all caret icons immediately
    setTimeout(() => {
      const caretIcons = document.querySelectorAll('.caret');
      caretIcons.forEach(icon => {
        icon.classList.remove('clicked');
      });
      console.log('Reset all caret icons');
    }, 50);
  }

  // ENHANCED: Update caret icon with better timing
  updateCaretIcon(cdkDetailRow: CdkDetailRowDirective, isExpanded: boolean): void {
    // Use multiple setTimeout attempts to ensure icon updates
    [0, 50, 100].forEach(delay => {
      setTimeout(() => {
        const rowElement = cdkDetailRow.viewContainerRef.element.nativeElement.parentElement;
        const caretIcon = rowElement?.querySelector('.caret');
        
        if (caretIcon) {
          if (isExpanded) {
            caretIcon.classList.add('clicked');
          } else {
            caretIcon.classList.remove('clicked');
          }
        }
      }, delay);
    });
  }



  // UPDATED: Collapse all rows
  private collapseAllRows(): void {
    console.log('Collapsing all rows...');
    
    this.expandedRows.forEach((detailRow) => {
      if (detailRow.isExpanded) {
        detailRow.collapse();
      }
    });
    
    this.expandedRows.clear();
    this.selectedRows.clear();
    console.log('All rows collapsed');
  }


  // UPDATED: Handle individual data load requests
  onDataLoadRequest(event: {directive: CdkDetailRowDirective, rowData: any}): void {
    const { directive, rowData } = event;
    
    // Check if we have cached data
    const storeKey = rowData.StoreNumber || rowData.store_number;
    if (this.expandedRowsData.has(storeKey)) {
      directive.setSubgridData(this.expandedRowsData.get(storeKey) || []);
    } else {
      // Load data from API
      this.loadSubgridDataForRow(rowData)
        .then(data => {
          directive.setSubgridData(data);
        })
        .catch(error => {
          console.error('Error loading subgrid data:', error);
          directive.setSubgridData([]);
        });
    }
  }

  // UPDATED: Load subgrid data method
  private loadSubgridDataForRow( row: any): Promise<any[]> {
     this.commonService.show(`subgrid-${row.StoreNumber}`);
    return new Promise((resolve, reject) => {
      const storeKey = row.StoreNumber || row.store_number;
      
      // Check cache first
      if (this.expandedRowsData.has(storeKey)) {
        resolve(this.expandedRowsData.get(storeKey) || []);
        return;
      }

      const payload = {
        IriWeek: row.IriWeek || row.iri_week,
        StoreNumber: storeKey
      };

      this.http.post<any[]>(this.baseUrl + 'api/TaskAssinment/GetSubgridData', payload)
        .pipe(takeUntil(this.unsubscribe$))
        .subscribe({
          next: (response) => {
            this.expandedRowsData.set(storeKey, response);
            resolve(response);
            this.commonService.hide(`subgrid-${row.StoreNumber}`);
          },
          error: (error) => {
            console.error(`Error loading data for store ${storeKey}:`, error);
            this.commonService.hide(`subgrid-${row.StoreNumber}`);
            reject(error);
          }
        });
    });
  }

  // SIMPLIFIED: Individual row expansion
  GetSubgridData(cdkDetailRow: CdkDetailRowDirective, row: any): void {
    console.log('Row toggle:', row.StoreNumber, 'Current state:', cdkDetailRow.isExpanded);
    
    if (cdkDetailRow.isExpanded) {
      this.expandedRows.add(cdkDetailRow);
      this.selectedRows.add(row);
    } else {
      this.expandedRows.delete(cdkDetailRow);
      this.selectedRows.delete(row);
      
      // If this was manually collapsed, update allExpanded state
      if (this.allExpanded && this.expandedRows.size < this.getCurrentPageData().length) {
        this.allExpanded = false;
      }
    }
    
    // Always update caret icon after state change
    this.updateCaretIcon(cdkDetailRow, cdkDetailRow.isExpanded);
    
    console.log(`Individual expansion: ${this.expandedRows.size} rows expanded`);
  }

 

  // UTILITY METHODS
  private getCurrentPageData(): any[] {
    if (!this.paginator) {
      return this.dataSource.data;
    }
    
    const startIndex = this.paginator.pageIndex * this.paginator.pageSize;
    const endIndex = startIndex + this.paginator.pageSize;
    return this.dataSource.data.slice(startIndex, endIndex);
  }



  private delay(ms: number): Promise<void> {
    return new Promise(resolve => setTimeout(resolve, ms));
  }

  // TEMPLATE HELPERS
  isRowExpanded(row: any): boolean {
    return this.selectedRows.has(row);
  }

  getExpandedRowCount(): number {
    return this.expandedRows.size;
  }

  getAssignmentClass(assignedTo: string): string {
    return assignedTo === 'NOT ASSIGNED' ? 'not-assigned' : 'assigned';
  }

  formatCollectionTime(time: string): string {
    return time || 'Not specified';
  }

  getClusterDisplay(positionName: string): string {
    return positionName || 'N/A';
  }

 

  UpdateTableWidth(){
  const tablewidth = document.getElementById('table'); 
  if(this.displayedColumns.length == 20){
    tablewidth.style.width = 150+'%' ;      
  }
 }



openProximityDataDialog(data:any){
    const dialogRef = this.dialog.open(ProximityDialogComponent,{
      width: '40vw',
      maxWidth: '40vw',
      minWidth: '600px',
      // height: '55vh',
      maxHeight: '55vh',
      minHeight:'250px',
      data:data,
      disableClose: true,
    })
  }

   async openAssignmentDialog(row: any, mode: 'StoreLevel' | 'TaskLevel' = 'StoreLevel'): Promise<void> {
  try {
    const currentFilters = await firstValueFrom(this.commonService.currentFilters$);
    
    if (!currentFilters || Object.keys(currentFilters).length === 0) {
      console.warn('No filters applied. Cannot open assignment dialog.');
      return;
    }
    const dialogRef = this.dialog.open(AssignmentDialogComponent, {
      width: '90vw',
      maxWidth: '1200px',
      height: '80vh',
      data: {
        storeNumber: row.StoreNumber,
        storeName: row.StoreName,
        iriWeek: row.IriWeek ,
        territoryId: currentFilters.territory_id,
        mode: mode
      },
      disableClose: true
    });

    dialogRef.afterClosed().subscribe(result => {
      if (result) {
        // Refresh the grid data
        this.refreshGridData();
      }
    });
  }catch (error) {
    console.error('Error opening assignment dialog:', error);
  }
}

  // ADD: Open assignment dialog for subgrid (task level)
async openTaskAssignmentDialog(taskData: any): Promise<void> {
  try {
    // Wait for current filters to complete
    const currentFilters = await firstValueFrom(this.commonService.currentFilters$);
    
    if (!currentFilters || Object.keys(currentFilters).length === 0) {
      console.warn('No filters applied. Cannot open assignment dialog.');
      return;
    }   

    const dialogRef = this.dialog.open(AssignmentDialogComponent, {
      width: '90vw',
      maxWidth: '1200px', 
      height: '80vh',
      data: {
        storeNumber: taskData.StoreNumber,
        storeName: taskData.StoreName,
        taskNumber: taskData.TaskNumber,
        taskName: taskData.TaskName,
        iriWeek: currentFilters.iri_week,
        territoryId:currentFilters.territory_id,
        mode: 'TaskLevel'
      },
      disableClose: true
    });

    dialogRef.afterClosed().subscribe(result => {
      if (result) {
        this.refreshGridData();
      }
    });
  }catch (error) {
    console.error('Error opening task assignment dialog:', error);
  }
}

  private refreshGridData(): void {
    // This depends on your current data loading implementation
    console.log('Refreshing grid data after assignment change');
  }

    startCommentEdit(row: any): void {
       if (!this.canEditComments) {
      console.log('User does not have permission to edit comments');
      return;
    }
    row.IsCommentEditing = true;
  }

  deleteComment(element: any): void {
    if (!this.canDeleteComments) {
      console.log('User does not have permission to delete comments');
      return;
    }
    
    if (confirm('Are you sure you want to delete this comment?')) {
      this.saveComment(element, '');
    }
  }

  cancelCommentEdit(row: any): void {
    row.IsCommentEditing = false;
  }

  onCommentKeydown(event: KeyboardEvent, row: any): void {
    if (event.key === 'Enter' && !event.shiftKey) {
      event.preventDefault();
      const target = event.target as HTMLTextAreaElement;
      this.saveComment(row, target.value);
    } else if (event.key === 'Escape') {
      this.cancelCommentEdit(row);
    }
  }

   async saveComment(row: any, newComment: string): Promise<void> {
    if (!this.canEditComments) {
      console.log('User does not have permission to save comments');
      return;
    }

    this.commonService.show('save-comment');
    try {
      await firstValueFrom(
        this.commonService.saveUserComment(row.StoreNumber, newComment)
      );
      
      row.UserComment = newComment;
      row.IsCommentEditing = false;
      
      console.log('Comment saved successfully');
      // Optional: Show success message
      
    } catch (error) {
      console.error('Error saving comment:', error);
      // Optional: Show error message
    }finally {
      this.commonService.hide('save-comment');
    }
  }

   private setupSearch(): void {
    this.searchControl.valueChanges.pipe(
      debounceTime(300),
      distinctUntilChanged(),
      tap(() => {
        this.isSearching = true;
        this.showSpinner = true;
      }),
      takeUntil(this.destroy$)
    ).subscribe(searchTerm => {
      this.performSearch(searchTerm || '');
    });
  }

  private performSearch(searchTerm: string): void {
    this.commonService.show('table-search');
    try {
      if (!searchTerm.trim()) {
        // No search term, show all data
        this.dataSource.data = [...this.originalData];
      } else {
        // Filter data based on search term
        const filtered = this.originalData.filter(row => 
          this.matchesSearchTerm(row, searchTerm.toLowerCase())
        );
        this.dataSource.data = filtered;
      }
      
      // Reset pagination and expansion state
      if (this.paginator) {
        this.paginator.firstPage();
      }
      this.resetExpansionState();
      
    } catch (error) {
      console.error('Error performing search:', error);
    } finally {
      this.isSearching = false;
      this.commonService.hide('table-search');
      this.showSpinner = false;
    }
  }

  private matchesSearchTerm(row: any, searchTerm: string): boolean {
    const searchableFields = [
      'StoreNumber', 'StoreName', 'AddrLine1', 'City', 'State', 
      'Zip', 'AssignedTo', 'TaskCompleted', 'Quality', 'UserComment'
    ];

    return searchableFields.some(field => {
      const value = row[field];
      return value && value.toString().toLowerCase().includes(searchTerm);
    });
  }

  clearSearch(): void {
    this.searchControl.setValue('');
  }

  // Enhanced updateDataSource to preserve original data
  private updateDataSource(data: any[]): void {
    this.commonService.show('table-update');

    // Store original data for search functionality
    this.originalData = [...data];
    
    // Apply current search if active
    const searchTerm = this.searchControl.value;
    if (searchTerm && searchTerm.trim()) {
      this.performSearch(searchTerm);
    } else {
      this.dataSource.data = data;
    }
    
    this.dataSource.paginator = this.paginator;
    this.dataSource.sort = this.sort;
    this.commonService.hide('table-update');
    this.resetExpansionState();
  }


}



filter
<div class="filter-topbar">
  <div class="filter-container">
    <form [formGroup]="filterForm" class="filter-form">
      
      <!-- Row 1: Main Filters -->
      <div class="filter-row main-filters">
        <!-- IRI Week -->
        <div class="filter-field">
          <label class="form-label">IRI Week</label>
          <mat-form-field appearance="outline">
            <mat-select formControlName="iriWeek" (selectionChange)="onIriWeekChange()">
              <mat-option *ngFor="let week of iriWeeks" [value]="week.iri_week">
                {{week.iri_week_viewOnly}}
              </mat-option>
            </mat-select>
          </mat-form-field>
        </div>

        <!-- Territory -->
        <div class="filter-field">
          <label class="form-label">Territory</label>
          <mat-form-field appearance="outline">
            <mat-select formControlName="territory" (selectionChange)="onTerritoryChange()">
              <mat-option [value]="'-1'">ALL</mat-option>
              <mat-option *ngFor="let territory of territories" [value]="territory.territory_id">
                {{territory.territory_name}}
              </mat-option>
            </mat-select>
          </mat-form-field>
        </div>

        <!-- Store -->
        <div class="filter-field">
          <label class="form-label">Store</label>
          <mat-form-field appearance="outline">
            <input matInput [matAutocomplete]="storeAuto" formControlName="store" placeholder="Search stores...">
            <button mat-button *ngIf="filterForm.get('store')?.value" matSuffix mat-icon-button (click)="clearStrCtrl()">
              <mat-icon>cancel</mat-icon>
            </button>
            <mat-autocomplete #storeAuto="matAutocomplete" (optionSelected)="onStoreSelected($event)">
              <mat-option *ngFor="let store of filteredStores" [value]="store.store_name" [matTooltip]="store.store_name">
                {{store.store_name}} ({{store.store_number}})
              </mat-option>
            </mat-autocomplete>
          </mat-form-field>
        </div>

        <!-- FSR (Field Service Representative) -->
        <div class="filter-field">
          <label class="form-label">FSR</label>
          <mat-form-field appearance="outline">
            <input matInput [matAutocomplete]="fsrAuto" formControlName="fsr" placeholder="Search FSR...">
            <button mat-button *ngIf="filterForm.get('fsr')?.value" matSuffix mat-icon-button (click)="clearFsrCtrl()">
              <mat-icon>cancel</mat-icon>
            </button>
            <mat-autocomplete #fsrAuto="matAutocomplete" (optionSelected)="onFsrSelected($event)">
              <mat-option *ngFor="let fsr of filteredFSR" [value]="fsr.emp_name" [matTooltip]="fsr.emp_name">
                {{fsr.emp_name}} ({{fsr.emp_id}})
              </mat-option>
            </mat-autocomplete>
          </mat-form-field>
        </div>

        <!-- Action Buttons -->
        <div class="action-buttons">
          <button mat-raised-button color="primary" (click)="onApplyFilters()">
            Apply Filters
          </button>
          <button mat-stroked-button (click)="onClearFilters()">
            Clear Filters
          </button>
        </div>
      </div>

      <!-- Row 2: Advanced Filters -->
      <div class="filter-row advanced-filters" [style.display]="showAdvancedFilters ? 'flex' : 'none'">
        <!-- State -->
        <div class="filter-field">
          <label class="form-label">State</label>
          <mat-form-field appearance="outline">
            <input matInput [matAutocomplete]="stateAuto" formControlName="state">
            <button mat-button *ngIf="filterForm.get('state')?.value" matSuffix mat-icon-button (click)="clearStaCtrl()">
              <mat-icon>cancel</mat-icon>
            </button>
            <mat-autocomplete #stateAuto="matAutocomplete" (optionSelected)="onStateSelected($event)">
              <mat-option *ngFor="let state of filteredState" [value]="state.state">
                {{state.state}}
              </mat-option>
            </mat-autocomplete>
          </mat-form-field>
        </div>

        <!-- City -->
        <div class="filter-field">
          <label class="form-label">City</label>
          <mat-form-field appearance="outline">
            <input matInput [matAutocomplete]="cityAuto" formControlName="city">
            <button mat-button *ngIf="filterForm.get('city')?.value" matSuffix mat-icon-button (click)="clearcityCtrl()">
              <mat-icon>cancel</mat-icon>
            </button>
            <mat-autocomplete #cityAuto="matAutocomplete" (optionSelected)="onCitySelected($event)">
              <mat-option *ngFor="let city of filteredCity" [value]="city.city">
                {{city.city}}
              </mat-option>
            </mat-autocomplete>
          </mat-form-field>
        </div>

        <!-- Cluster -->
        <div class="filter-field">
          <label class="form-label">Cluster</label>
          <mat-form-field appearance="outline">
            <input matInput [matAutocomplete]="clusterAuto" formControlName="cluster">
            <mat-autocomplete #clusterAuto="matAutocomplete" (optionSelected)="onClusterSelected($event)">
              <mat-option *ngFor="let cluster of filteredCluster" [value]="cluster.position_name">
                {{cluster.position_name}}
              </mat-option>
            </mat-autocomplete>
          </mat-form-field>
        </div>

        <!-- Task -->
        <div class="filter-field">
          <label class="form-label">Task</label>
          <mat-form-field appearance="outline">
            <input matInput [matAutocomplete]="taskAuto" formControlName="task">
            <button mat-button *ngIf="filterForm.get('task')?.value" matSuffix mat-icon-button (click)="clearTaskCtrl()">
              <mat-icon>cancel</mat-icon>
            </button>
            <mat-autocomplete #taskAuto="matAutocomplete" (optionSelected)="onTaskSelected($event)">
              <mat-option *ngFor="let task of filteredTask" [value]="task.task_name">
                {{task.task_name}} ({{task.task_number}})
              </mat-option>
            </mat-autocomplete>
          </mat-form-field>
        </div>
      </div>

      <!-- Row 3: FSR Hours & Toggle Options -->
      <div class="filter-row options-filters" [style.display]="showAdvancedFilters ? 'flex' : 'none'">
        <!-- FSR Hours -->
        <div class="filter-field">
          <label class="form-label">FSR Hours</label>
          <div class="fsr-hours-container">
      <!-- FSR Hour Operator -->
      <mat-form-field appearance="outline" class="operator-field">
        <mat-select formControlName="fsrHourOperator" (selectionChange)="onFsrHourOperatorChange()">
          <mat-option *ngFor="let op of fsrHourOperators" [value]="op.value">
            {{op.label}}
          </mat-option>
        </mat-select>
      </mat-form-field>
      
      <!-- FSR Hour Value -->
      <mat-form-field appearance="outline" class="hour-field">
        <input matInput 
              formControlName="fsrHour" 
              type="number" 
              placeholder="Enter hours..."
              (change)="onFsrHourChange()"
              min="0"
              max="999">
      </mat-form-field>
          </div>
      </div>
        <!-- Assigned/Unassigned Stores Toggle -->
        <div class="toggle-field">
          <label class="form-label">Store Assignment</label>
          <mat-radio-group formControlName="storeAssignment" class="radio-group">
            <mat-radio-button value="assigned">Assigned Stores</mat-radio-button>
            <mat-radio-button value="unassigned">Unassigned Stores</mat-radio-button>
            <mat-radio-button value="all">All Stores</mat-radio-button>
          </mat-radio-group>
        </div>

        <!-- Sample/Non-Sample Toggle -->
        <div class="toggle-field">
          <label class="form-label">Sample Type</label>
          <mat-radio-group formControlName="sampleType" class="radio-group">
            <mat-radio-button value="sample">Sample</mat-radio-button>
            <mat-radio-button value="nonSample">Non-Sample</mat-radio-button>
            <mat-radio-button value="all">All Types</mat-radio-button>
          </mat-radio-group>
        </div>

        <!-- Column Visibility Dropdown -->
          <div class="checkbox-field">
            <label class="form-label">Visible Columns</label>
            <mat-form-field appearance="outline">
              <mat-label>Select Columns</mat-label>
              <mat-select multiple [(value)]="selectedColumns" (selectionChange)="onColumnSelectionChange()">
                <mat-option *ngFor="let column of availableColumns" 
                            [value]="column.key" 
                            [disabled]="column.required">
                  {{column.label}}
                  <span *ngIf="column.required" class="required-indicator"> *</span>
                </mat-option>
              </mat-select>
            </mat-form-field>

             <mat-checkbox formControlName="multiFsrStore" (change)="onMultiFsrStoreChange()">Multi FSR Store</mat-checkbox>
          </div>

        <!-- Multi FSR Store Checkbox -->
        <div class="checkbox-field">
          
         
        </div>
      </div>

      <!-- Advanced Filters Toggle -->
      <div class="advanced-toggle">
        <button mat-button type="button" (click)="toggleAdvancedFilters()" class="toggle-button">
          <mat-icon>{{showAdvancedFilters ? 'expand_less' : 'expand_more'}}</mat-icon>
          {{showAdvancedFilters ? 'Hide' : 'Show'}} Advanced Filters
        </button>
      </div>
    </form>
  </div>
</div>

<footer>
    <div class="mat-spinner-container">
        <mat-spinner mode="indeterminate" *ngIf="showSpinner"></mat-spinner>
        <div *ngIf="showSpinner" style="position:relative;left: 10px">Loading...</div>
    </div>
</footer>


import { HttpClient } from '@angular/common/http';
import { Component, ElementRef, EventEmitter, Inject, OnDestroy, OnInit, Output, ViewChild } from '@angular/core';
import { FormBuilder, FormControl, FormGroup } from '@angular/forms';
import { catchError, debounceTime, distinctUntilChanged, firstValueFrom, map, Observable, of, startWith, Subject, switchMap, takeUntil, tap } from 'rxjs';
import { StoreFilter, FilterOptions, GetGridDataFilter } from 'src/app/shared/common.model';
import { CommonService } from 'src/app/shared/common.service';

@Component({
  selector: 'app-filter-sidebar',
  templateUrl: './filter-sidebar.component.html',
  styleUrls: ['./filter-sidebar.component.css']
})
export class FilterSidebarComponent implements OnInit, OnDestroy {
  @Output() filtersChanged = new EventEmitter<GetGridDataFilter>();
  @Output() clearFilters = new EventEmitter<void>();
availableColumns = [
    { key: 'store_number', label: 'Store Number', required: true },
    { key: 'store_name', label: 'Store Name', required: true },
    { key: 'addr_line1', label: 'Address', required: false },
    { key: 'city', label: 'City', required: false },
    { key: 'state', label: 'State', required: false },
    { key: 'zip', label: 'Zip', required: false },
    { key: 'assigned_to', label: 'Assigned To', required: true },
    { key: 'task_completed', label: 'Task Completed', required: false },
    { key: 'quality', label: 'Quality', required: false },
    { key: 'cost_over', label: 'Cost Over', required: false },
    { key: 'guaranteed_miles', label: 'Miles', required: false },
    { key: 'user_comment', label: 'Comments', required: true }
  ];

  selectedColumns: string[] = [];

  @Output() columnsChanged = new EventEmitter<string[]>();
  filterForm!: FormGroup;
  showAdvancedFilters = false;
  showSpinner = false;
   private formInitialized = false;
  private dataLoaded = {
    iriWeek: false,
    territory: false,
    employee: false
  };
  // Data arrays
  employeedata: any[] = [];
  iriWeeks: any[] = [];
  territories: any[] = [];
  filteredStores: any[] = [];
  filteredState: any[] = [];
  filteredCity: any[] = [];
  filteredCluster: any[] = [];
  filteredTask: any[] = [];
  filteredFSR: any[] = [];
  fsrHourOperators = [
    { value: 'NA', label: 'NA' },
    { value: '>', label: '>' },
    { value: '=', label: '=' },
    { value: '<', label: '<' }
  ];
  // Selected values
  selectedStoreNumber = '';
  selectedState = '';
  selectedCity = '';
  selectedCluster = '';
  selectedTask = '';
  selectedFsrId = '';
  areaNBRctrl = new FormControl();
  private unsubscribe$ = new Subject<void>();
  private loggeduser: string;

  constructor(
    private fb: FormBuilder,
    private commonService: CommonService,
    public http: HttpClient,
    @Inject('BASE_URL') public baseUrl: string,
  ) {
    this.initializeForm();
    this.loggeduser = localStorage.getItem("loggedUserId") || '';
  }

  async ngOnInit(): Promise<void> {
     this.selectedColumns = this.availableColumns
      .filter(col => col.required || ['addr_line1', 'city', 'state'].includes(col.key))
      .map(col => col.key);
    // this.loadAllData()

    try {
       this.employeedata = await firstValueFrom(this.commonService.getEmployee(this.loggeduser));
        this.dataLoaded.employee = true;
      await this.getIriWeek();
      this.dataLoaded.iriWeek = true;
      await this.getTerritory();  
      this.dataLoaded.territory = true;
      
      // Setup form subscriptions after data is loaded
      this.setupFormSubscriptions();
      
      // Mark form as initialized
      this.formInitialized = true;
      
      // NOW apply default filters after everything is ready
      this.applyDefaultFilters();
    } catch (error) {
      console.error('Error initializing filter component:', error);
    }
  }

  private initializeForm(): void {
    this.filterForm = this.fb.group({
      iriWeek: [''],
      territory: [''],
      store: [''],
      state: [''],
      city: [''],
      cluster: [''],
      task: [''],
      fsr: [''],
      fsrHour: [''],
      fsrHourOperator: ['NA'], 
      storeAssignment: ['all'],
      sampleType: ['all'],
      multiFsrStore: [false]
    });
  }

    private async getIriWeek(): Promise<void> {
    try {
      const response = await firstValueFrom(
        this.http.get<any[]>(this.baseUrl + 'api/TaskAssinment/GetIriWeek')
      );
      
      this.iriWeeks = response;
      
      // Set default value
      if (this.iriWeeks.length > 0) {
        this.filterForm.get('iriWeek')?.setValue(
          this.iriWeeks?.[0]?.['iri_week'], 
          { emitEvent: false }
        );
      }
    } catch (error) {
      console.error('Error fetching IRI weeks:', error);
      throw error;
    }
  }

  private async getTerritory(): Promise<void> {
    try {
      this.showSpinner = true;
      const response = await firstValueFrom(
        this.http.get<any[]>(this.baseUrl + 'api/TaskAssinment/GetTerritory')
      );
      
      this.territories = response;
      
      // Set default territory
      const defaultTerritory = this.getDefaultTerritory();
      this.filterForm.get('territory')?.setValue(defaultTerritory, { emitEvent: false });
      
      if (this.territories.length > 0) {
        this.areaNBRctrl.setValue(this.territories['area']);
      }
      
    } catch (error) {
      console.error('Error fetching territories:', error);
      throw error;
    } finally {
      this.showSpinner = false;
    }
  }

  private getDefaultTerritory(): string {
    if (!this.employeedata) return '';
    
    return this.employeedata?.['fieldTerritoryNumber'] == 0 || 
                              !this.employeedata?.['fieldTerritoryNumber']
                              ? this.territories?.[0]?.['territory_id']
                              : this.employeedata?.['territory_id'];
  }

  private setupFormSubscriptions(): void {
    // Store autocomplete
    this.filterForm.get('store')?.valueChanges.pipe(
      debounceTime(300),
      tap(() => (this.showSpinner = true)),
      switchMap(searchText => this.getStore(searchText)),
      takeUntil(this.unsubscribe$)
    ).subscribe(stores => {
      this.filteredStores = stores || [];
      this.showSpinner = false;
    });

    // State autocomplete
    this.filterForm.get('state')?.valueChanges.pipe(
      debounceTime(300),
      tap(() => (this.showSpinner = true)),
      switchMap(searchText => this.getState(searchText)),
      takeUntil(this.unsubscribe$)
    ).subscribe(states => {
      this.filteredState = states || [];
      this.showSpinner = false;
    });

    // City autocomplete
    this.filterForm.get('city')?.valueChanges.pipe(
      debounceTime(300),
      tap(() => (this.showSpinner = true)),
      switchMap(searchText => this.getCity(searchText)),
      takeUntil(this.unsubscribe$)
    ).subscribe(cities => {
      this.filteredCity = cities || [];
      this.showSpinner = false;
    });

    // Cluster autocomplete
    this.filterForm.get('cluster')?.valueChanges.pipe(
      debounceTime(300),
      tap(() => (this.showSpinner = true)),
      switchMap(searchText => this.getCluster(searchText)),
      takeUntil(this.unsubscribe$)
    ).subscribe(clusters => {
      this.filteredCluster = clusters || [];
      this.showSpinner = false;
    });

    // Task autocomplete
    this.filterForm.get('task')?.valueChanges.pipe(
      debounceTime(300),
      switchMap(searchText => this.getTask(searchText)),
      takeUntil(this.unsubscribe$)
    ).subscribe(tasks => {
      this.filteredTask = tasks || [];
    });

    // FSR autocomplete
    this.filterForm.get('fsr')?.valueChanges.pipe(
      debounceTime(300),
      switchMap(searchText => this.getFsr(searchText)),
      takeUntil(this.unsubscribe$)
    ).subscribe(fsrs => {
      this.filteredFSR = fsrs || [];
    });
  }

 
  getStore(searchText: string) {
    if (!searchText || searchText.length < 3) {
      return of([]);
    }

    const payload = {
      IriWeek: Number(this.filterForm.get('iriWeek')?.value),
      TerritoryId: Number(this.filterForm.get('territory')?.value),
      SearchText: searchText
    };
    
    return this.http.post<any[]>(this.baseUrl + 'api/TaskAssinment/GetStore', payload)
      .pipe(catchError(() => of([])));
  }

  getState(searchText: string) {
    if (!searchText || searchText.length <= 0) { return of([]); }
    
    const payload = {
      IriWeek: Number(this.filterForm.get('iriWeek')?.value),
      TerritoryId: Number(this.filterForm.get('territory')?.value),
      SearchText: searchText
    };
    
    return this.http.post<any[]>(this.baseUrl + 'api/TaskAssinment/GetState', payload)
      .pipe(catchError(() => of([])));
  }

  getCity(searchText: string) {
    if (!searchText || searchText.length <= 0) { return of([]); }
    
    const payload = {
      IriWeek: Number(this.filterForm.get('iriWeek')?.value),
      TerritoryId: Number(this.filterForm.get('territory')?.value),
      SearchText: searchText
    };
    
    return this.http.post<any[]>(this.baseUrl + 'api/TaskAssinment/GetCity', payload)
      .pipe(catchError(() => of([])));
  }

  getCluster(searchText: string) {
    const payload = {
      IriWeek: Number(this.filterForm.get('iriWeek')?.value),
      TerritoryId: Number(this.filterForm.get('territory')?.value),
      SearchText: searchText
    };
    
    return this.http.post<any[]>(this.baseUrl + 'api/TaskAssinment/GetCluster', payload)
      .pipe(catchError(() => of([])));
  }

  getTask(searchText: string) {
    if (!searchText || searchText.length <= 0) { return of([]); }
    
    const payload = {
      IriWeek: Number(this.filterForm.get('iriWeek')?.value),
      TerritoryId: Number(this.filterForm.get('territory')?.value),
      SearchText: searchText
    };
    
    return this.http.post<any[]>(this.baseUrl + 'api/TaskAssinment/GetTask', payload)
      .pipe(catchError(() => of([])));
  }

  getFsr(searchText: string) {
    if (!searchText || searchText.length <= 0) { return of([]); }
    
    const payload = {
      IriWeek: Number(this.filterForm.get('iriWeek')?.value),
      TerritoryId: Number(this.filterForm.get('territory')?.value),
      SearchText: searchText
    };
    
    return this.http.post<any[]>(this.baseUrl + 'api/TaskAssinment/GetFsr', payload)
      .pipe(catchError(() => of([])));
  }

  // Event handlers for IRI Week and Territory changes
  onIriWeekChange(): void {
    // Clear dependent fields when IRI week changes
    this.filterForm.patchValue({
      store: '',
      state: '',
      city: '',
      cluster: '',
      task: '',
      fsr: ''
    });
    this.clearSelectedValues();
  }

  onTerritoryChange(): void {
    // this.areaNBRctrl.setValue(ter.area)
    // Clear dependent fields when territory changes
    this.filterForm.patchValue({
      store: '',
      state: '',
      city: '',
      cluster: '',
      task: '',
      fsr: ''
    });
    this.clearSelectedValues();
  }

  // Selection event handlers
  onStoreSelected(event: any) {
    const selectedStore = this.filteredStores.find(store => store.store_name === event.option.value);
    this.selectedStoreNumber = selectedStore?.store_number || '';
  }

  onStateSelected(event: any) {
    const selectedState = this.filteredState.find(state => state.state === event.option.value);
    this.selectedState = selectedState?.state || '';
  }

  onCitySelected(event: any) {
    const selectedCity = this.filteredCity.find(city => city.city === event.option.value);
    this.selectedCity = selectedCity?.city || '';
  }

  onClusterSelected(event: any) {
    const selectedCluster = this.filteredCluster.find(cluster => cluster.position_name === event.option.value);
    this.selectedCluster = selectedCluster?.position_number || '';
  }

  onTaskSelected(event: any) {
    const selectedTask = this.filteredTask.find(task => task.task_name === event.option.value);
    this.selectedTask = selectedTask?.task_number || '';
  }

  onFsrSelected(event: any) {
    const selectedFsr = this.filteredFSR.find(fsr => fsr.emp_name === event.option.value);
    this.selectedFsrId = selectedFsr?.emp_id || '';
  }

  // Control methods
  toggleAdvancedFilters(): void {
    this.showAdvancedFilters = !this.showAdvancedFilters;
  }


  onApplyFilters(): void {
    this.commonService.show('apply-filters');
     if (!this.formInitialized) {
      console.log('Form not initialized yet, skipping filter application');
      return;
    }

    const currentCountry = this.commonService.getCurrentCountry();
    if (!currentCountry) {
      // console.log('Please select a country first');
      // return;
    }

    // Validate required fields
    const formValue = this.filterForm.value;
    if (!formValue.iriWeek || !formValue.territory) {
      console.log('Required fields not set:', {
        iriWeek: formValue.iriWeek,
        territory: formValue.territory
      });
      return;
    }
    const filters = new GetGridDataFilter();
    filters.countryId = currentCountry||'1';
    filters.lanId = this.loggeduser;
    filters.iriWeek = formValue.iriWeek || '';
    filters.territoryId = formValue.territory || '';
    filters.area = this.areaNBRctrl.value || '23';
    filters.storeNumber = this.selectedStoreNumber;
    filters.storeName = formValue.store || '';
    filters.state = this.selectedState;
    filters.city = this.selectedCity;
    filters.positionNumber = this.selectedCluster;
    filters.taskNumber = this.selectedTask;
    filters.empId = this.selectedFsrId;
    filters.fsrHour = formValue.fsrHour || '';
    filters.fsrHourOperator = formValue.fsrHourOperator || 'NA'; 
    filters.fsrOver25hrs = 'false';
    filters.fsrOver6hrs = 'false';
    filters.temporary = 'false';
    filters.vacation = 'false';
    // Handle radio button selections
    if (formValue.storeAssignment === 'assigned') {
      filters.assignedStores = 'true';
      filters.unassignedStores = 'false';
    } else if (formValue.storeAssignment === 'unassigned') {
      filters.assignedStores = 'false';
      filters.unassignedStores = 'true';
    } else {
      filters.assignedStores = 'false';
      filters.unassignedStores = 'false';
    }

    if (formValue.sampleType === 'sample') {
      filters.sample = 'true';
      filters.nonSample = 'false';
    } else if (formValue.sampleType === 'nonSample') {
      filters.sample = 'false';
      filters.nonSample = 'true';
    } else {
      filters.sample = 'false';
      filters.nonSample = 'false';
    }

    filters.multiFsrStore = formValue.multiFsrStore ? 'true' : 'false';
  setTimeout(() => this.commonService.hide('apply-filters'), 100);
    this.filtersChanged.emit(filters);
  }

  // MISSING FUNCTION: Clear Filters
  onClearFilters(): void {
    this.filterForm.reset({
      iriWeek: this.iriWeeks.length > 1 ? this.iriWeeks?.[0]?.['iri_week'] : '',
      territory: this.employeedata?.['fieldTerritoryNumber'] == 0 || 
                              !this.employeedata?.['fieldTerritoryNumber']
                              ? this.territories?.[0]?.['territory_id']
                              : this.employeedata?.['territory_id'],
        storeAssignment: 'all',
      sampleType: 'all',
      multiFsrStore: false,
      fsrHourOperator: 'NA'
    });
    this.clearSelectedValues();
    this.clearFilters.emit();
  }

  // Apply Default Filters on Load
  private applyDefaultFilters(): void {
    if (!this.formInitialized || !this.allDataLoaded()) {
      console.log('Form not ready for default filters');
      return;
    }

    console.log('Applying default filters - all data loaded');
    setTimeout(() => {
      this.onApplyFilters();
    }, 500);
  }

  private allDataLoaded(): boolean {
    return this.dataLoaded.iriWeek && 
           this.dataLoaded.territory && 
           this.dataLoaded.employee;
  }

  private clearSelectedValues(): void {
    this.selectedStoreNumber = '';
    this.selectedState = '';
    this.selectedCity = '';
    this.selectedCluster = '';
    this.selectedTask = '';
    this.selectedFsrId = '';
  }

  // Clear individual controls
  clearStrCtrl() { 
    this.filterForm.get('store')?.reset(); 
    this.selectedStoreNumber = '';
  }
  clearStaCtrl() { 
    this.filterForm.get('state')?.reset(); 
    this.selectedState = '';
  }
  clearcityCtrl() { 
    this.filterForm.get('city')?.reset(); 
    this.selectedCity = '';
  }
  clearTaskCtrl() { 
    this.filterForm.get('task')?.reset(); 
    this.selectedTask = '';
  }
  clearFsrCtrl() { 
    this.filterForm.get('fsr')?.reset(); 
    this.selectedFsrId = '';
  }

   onFsrHourOperatorChange(): void {
    const operator = this.filterForm.get('fsrHourOperator')?.value;
    const fsrHourControl = this.filterForm.get('fsrHour');
    
    if (operator === 'NA') {
      fsrHourControl?.setValue('');
      fsrHourControl?.disable();
    } else {
      fsrHourControl?.enable();
    }
  }

  onFsrHourChange(): void {
    const fsrHour = this.filterForm.get('fsrHour')?.value;
    if (fsrHour && fsrHour.trim() !== '') {
      // Reset multi FSR store if user enters FSR hours
      this.filterForm.get('multiFsrStore')?.setValue(false);
    }
  }
  onMultiFsrStoreChange(): void {
    const multiFsrStore = this.filterForm.get('multiFsrStore')?.value;
    if (multiFsrStore) {
      this.filterForm.get('fsrHourOperator')?.setValue('NA');
      this.filterForm.get('fsrHour')?.setValue('');
      this.filterForm.get('fsrHour')?.disable();
    }
  }


   private async loadAllData(): Promise<void> {
    try {
      this.showSpinner = true;
      
      // Load all data in parallel
      const [iriWeeks, territories, employeeData] = await Promise.all([
        firstValueFrom(this.http.get<any[]>(this.baseUrl + 'api/TaskAssinment/GetIriWeek')),
        firstValueFrom(this.http.get<any[]>(this.baseUrl + 'api/TaskAssinment/GetTerritory')),
        firstValueFrom(this.commonService.getEmployee(this.loggeduser))
      ]);

      this.iriWeeks = iriWeeks;
      this.territories = territories;
      this.employeedata = employeeData;
      
      this.applyDefaultFilters();
      this.setupFormSubscriptions();
      
    } catch (error) {
      console.error('Error loading data:', error);
    } finally {
      this.showSpinner = false;
    }
  }

  // Generic autocomplete method
  private setupAutocomplete<T>(controlName: string, apiEndpoint: string): void {
    this.filterForm.get(controlName)?.valueChanges.pipe(
      debounceTime(300),
      distinctUntilChanged(),
      tap(() => this.showSpinner = true),
      switchMap(searchText => this.genericSearch<T>(apiEndpoint, searchText)),
      takeUntil(this.unsubscribe$)
    ).subscribe(results => {
      this[`filtered${controlName.charAt(0).toUpperCase() + controlName.slice(1)}`] = results;
      this.showSpinner = false;
    });
  }

  // Generic search method
  private genericSearch<T>(endpoint: string, searchText: string): Observable<T[]> {
    if (!searchText || searchText.length < 2) return of([]);
    
    const payload = {
      IriWeek: Number(this.filterForm.get('iriWeek')?.value),
      TerritoryId: Number(this.filterForm.get('territory')?.value),
      SearchText: searchText
    };
    
    return this.http.post<T[]>(this.baseUrl + endpoint, payload)
      .pipe(catchError(() => of([])));
  }

   onColumnSelectionChange(): void {
    // Ensure required columns are always selected
    const requiredColumns = this.availableColumns
      .filter(col => col.required)
      .map(col => col.key);
      
    this.selectedColumns = [...new Set([...this.selectedColumns, ...requiredColumns])];
    this.columnsChanged.emit(this.selectedColumns);
  }

  isColumnRequired(columnKey: string): boolean {
    return this.availableColumns.find(col => col.key === columnKey)?.required || false;
  }

  ngOnDestroy(): void {
    this.unsubscribe$.next();
    this.unsubscribe$.complete();
  }
}
