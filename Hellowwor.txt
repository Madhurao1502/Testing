<!-- app.component.html -->
<form [formGroup]="fileUploadForm" (ngSubmit)="uploadFile()">
  <label for="file">Choose a file:</label>
  <input type="file" id="file" (change)="onFileSelected($event)" />
  <button type="submit" [disabled]="fileUploadForm.invalid">Upload</button>
</form>



// app.component.ts
import { Component, ElementRef, ViewChild } from '@angular/core';
import { FormBuilder, FormGroup, Validators } from '@angular/forms';
import { HttpClient } from '@angular/common/http';

@Component({
  selector: 'app-root',
  templateUrl: './app.component.html',
  styleUrls: ['./app.component.css']
})
export class AppComponent {
  @ViewChild('fileInput') fileInput: ElementRef;

  fileUploadForm: FormGroup;

  constructor(private fb: FormBuilder, private http: HttpClient) {
    this.fileUploadForm = this.fb.group({
      file: [null, Validators.required]
    });
  }

  onFileSelected(event: any) {
    const file = event.target.files[0];
    this.fileUploadForm.patchValue({ file });

    // Perform validation on file content (Example: Check if it's a CSV file)
    if (file.type !== 'application/vnd.ms-excel') {
      console.error('Invalid file type. Please upload a CSV file.');
      this.fileInput.nativeElement.value = ''; // Clear file input
      this.fileUploadForm.reset();
    }
  }

  uploadFile() {
    const formData = new FormData();
    formData.append('file', this.fileUploadForm.get('file').value);

    // You can also include additional data in the FormData
    // formData.append('additionalData', this.fileUploadForm.get('additionalData').value);

    this.http.post('/api/upload', formData)
      .subscribe(response => {
        // Handle successful upload
        console.log('File uploaded successfully:', response);
      }, error => {
        // Handle upload errors
        console.error('Error uploading file:', error);
      });
  }
}
















<!-- app.component.html -->
<form [formGroup]="fileUploadForm" (ngSubmit)="uploadFile()">
  <label for="file">Choose a file:</label>
  <input type="file" id="file" (change)="onFileSelected($event)" />
  <button type="submit" [disabled]="fileUploadForm.invalid">Upload</button>
</form>







// app.component.ts
import { Component, ElementRef, ViewChild } from '@angular/core';
import { FormBuilder, FormGroup, Validators } from '@angular/forms';
import { HttpClient } from '@angular/common/http';
import * as Papa from 'papaparse';

@Component({
  selector: 'app-root',
  templateUrl: './app.component.html',
  styleUrls: ['./app.component.css']
})
export class AppComponent {
  @ViewChild('fileInput') fileInput: ElementRef;

  fileUploadForm: FormGroup;

  constructor(private fb: FormBuilder, private http: HttpClient) {
    this.fileUploadForm = this.fb.group({
      file: [null, Validators.required]
    });
  }

  onFileSelected(event: any) {
    const file = event.target.files[0];
    this.fileUploadForm.patchValue({ file });

    // Perform validation on file content (Example: Check if it's a CSV file)
    if (file.type !== 'application/vnd.ms-excel') {
      console.error('Invalid file type. Please upload a CSV file.');
      this.fileInput.nativeElement.value = ''; // Clear file input
      this.fileUploadForm.reset();
    } else {
      this.validateCSV(file);
    }
  }

  validateCSV(file: File) {
    Papa.parse(file, {
      complete: (result) => {
        // You can perform custom validation on the parsed CSV data
        const csvData = result.data;
        if (!this.isValidCSVData(csvData)) {
          console.error('Invalid CSV data. Please check the file content.');
          this.fileInput.nativeElement.value = ''; // Clear file input
          this.fileUploadForm.reset();
        }
      },
      header: true // Assumes the first row is a header
    });
  }

  isValidCSVData(csvData: any[]): boolean {
    // Add your custom validation logic here
    // For example, check if the CSV data has the required columns, etc.
    return true; // Replace with your validation logic
  }

  uploadFile() {
    const formData = new FormData();
    formData.append('file', this.fileUploadForm.get('file').value);

    // You can also include additional data in the FormData
    // formData.append('additionalData', this.fileUploadForm.get('additionalData').value);

    this.http.post('/api/upload', formData)
      .subscribe(response => {
        // Handle successful upload
        console.log('File uploaded successfully:', response);
      }, error => {
        // Handle upload errors
        console.error('Error uploading file:', error);
      });
  }
}
