<ng-container matColumnDef="selectSample">
  <th mat-header-cell *matHeaderCellDef> Select Sample </th>
  <td mat-cell *matCellDef="let row; let i = index">
    <mat-form-field appearance="fill" *ngIf="!isSelectSampleDisabled(row)">
      <input matInput (input)="onInputChange($event.target.value, i)" placeholder="Filter samples">
      <mat-select [value]="row.selectSample" (selectionChange)="onSampleChange($event.value, i)">
        <mat-option *ngFor="let sample of filteredOptions[i]" [value]="sample" [disabled]="isSampleDisabled(sample, row)">
          {{ sample }}
        </mat-option>
      </mat-select>
    </mat-form-field>
    <span *ngIf="isSelectSampleDisabled(row)">
      {{ row.selectSample }}
    </span>
  </td>
</ng-container>

filteredOptions: { [key: number]: string[] } = {};
originalOptions: { [key: number]: string[] } = {};

// Initialize the filtered options with the original options from generateTable
generateTable() {
  const { scheduleType, startWeek, endWeek, noEndWeek, vendor, sampleType, selectedWeeks, scheduleEvery } = this.scheduleForm.value;
  const waveNumberMap: { [Key: string]: number | null } = {};
  this.tableData.forEach(r => { if (r.waveNumber != null) { waveNumberMap[r.startWeek] = r.waveNumber } });

  this.tableData = [];
  let selectedWeekObjects: Week[] = [];

  // Existing logic to populate selectedWeekObjects...

  vendor.forEach((vendorId: number) => {
    let rotationCounter = 0;
    selectedWeekObjects.forEach((week, index) => {
      let sampleName = '';
      let sampleOptions: string[] = [];

      if (sampleType === 'FIX') {
        sampleName = this.selectedFixedSamples[vendorId] || '';
        sampleOptions = this.samples.map(s => s.SampleName);
      } else if (sampleType === 'ROT') {
        const rotationName = this.selectedRotations[vendorId];

        if (rotationName) {
          const rotationSamples = this.rotation.filter(rot => rot.RotationName === rotationName);
          if (rotationSamples.length > 0) {
            sampleName = rotationSamples[rotationCounter % rotationSamples.length].SampleName;
            sampleOptions = rotationSamples.map(rs => rs.SampleName);
            rotationCounter++;
          }
        }
      } else if (sampleType === 'MAN') {
        sampleOptions = this.samples.map(s => s.SampleName);
      }

      this.tableData.push({
        monthYear: week.mothnYear,
        startWeek: week.StartWeek,
        startDate: week.StartDate,
        endDate: week.endDate,
        selectSample: sampleName,
        sampleOptions: sampleOptions,
        selectedVendor: vendorId,
        waveNumber: null,
      });
    });
  });

  this.leftGridData = new MatTableDataSource<any>(this.tableData);

  // Initialize originalOptions and filteredOptions
  this.originalOptions = this.tableData.reduce((acc, row, index) => {
    acc[index] = row.sampleOptions; // Store original options
    return acc;
  }, {} as { [key: number]: string[] });
  
  this.filteredOptions = { ...this.originalOptions };
  
  this.validateSampleSelections();
}

// Filter options based on input
filterOptions(rowIndex: number, inputValue: string) {
  const allOptions = this.originalOptions[rowIndex];
  this.filteredOptions[rowIndex] = allOptions.filter(option => option.toLowerCase().includes(inputValue.toLowerCase()));
}

// Input change event handler
onInputChange(value: string, rowIndex: number) {
  this.filterOptions(rowIndex, value);
}

// Sample selection change event
onSampleChange(selectedSample: string, rowIndex: number) {
  this.tableData[rowIndex].selectSample = selectedSample;
}
