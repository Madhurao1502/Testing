public static async Task<Root> GetDDTAsync(string _oPlaceid, string _dPlaceid)
{
    var root = new Root();
    using var httpClient = new HttpClient();

    try
    {
        string url = AppSettings.GetValue(AppSettings.DDTCalculUrl);

        var jsonData = new
        {
            oPlace_id = _oPlaceid,
            dPlace_id = _dPlaceid
        };
        
        var jsonPayload = JsonConvert.SerializeObject(jsonData);
        var content = new StringContent(jsonPayload, Encoding.UTF8, "application/json");

        // Set credentials using NetworkCredential
        var domain = AppSettings.GetValue(AppSettings.Domain);
        var username = AppSettings.GetValue(AppSettings.DomainUserName);
        var password = AppSettings.GetValue(AppSettings.DomainPassword);
        var credentials = new NetworkCredential(username, password, domain);

        httpClient.DefaultRequestHeaders.Authorization = 
            new System.Net.Http.Headers.AuthenticationHeaderValue("Basic", Convert.ToBase64String(Encoding.ASCII.GetBytes($"{username}:{password}")));

        var response = await httpClient.PostAsync(url, content);
        response.EnsureSuccessStatusCode();

        var result = await response.Content.ReadAsStringAsync();
        if (!string.IsNullOrWhiteSpace(result))
        {
            root = JsonConvert.DeserializeObject<Root>(result);
        }
        else
        {
            throw new Exception("Received an empty response from the server.");
        }
    }
    catch (HttpRequestException ex)
    {
        throw new Exception($"HTTP Request error: {ex.Message}", ex);
    }
    catch (JsonException ex)
    {
        throw new Exception("Error parsing the JSON response.", ex);
    }
    catch (Exception ex)
    {
        throw new Exception($"An error occurred: {ex.Message}", ex);
    }

    return root;
}
