public static Root GetDDT(string _oPlaceid, string _dPlaceid)
{
    var root = new Root();
    
    try
    {
        string url = string.Format(AppSettings.GetValue(AppSettings.DDTCalculUrl));
        
        // Build POST data with proper encoding
        var postData = $"oPlace_id={Uri.EscapeDataString(_oPlaceid)}&dPlace_id={Uri.EscapeDataString(_dPlaceid)}";
        byte[] data = Encoding.ASCII.GetBytes(postData);

        // Initialize the request
        var request = (HttpWebRequest)WebRequest.Create(url);
        request.Method = "POST";
        request.ContentType = "application/x-www-form-urlencoded";
        request.ContentLength = data.Length;

        // Enable Windows Authentication (use the current user's Windows credentials)
        request.UseDefaultCredentials = true;

        // Write data to request stream
        using (var stream = request.GetRequestStream())
        {
            stream.Write(data, 0, data.Length);
        }

        // Get and process the response
        using (var response = (HttpWebResponse)request.GetResponse())
        {
            if (response.StatusCode != HttpStatusCode.OK)
            {
                throw new Exception($"Server returned error code: {response.StatusCode}");
            }
            
            using (var streamReader = new StreamReader(response.GetResponseStream()))
            {
                string result = streamReader.ReadToEnd();
                
                // Check if the response contains data
                if (!string.IsNullOrWhiteSpace(result))
                {
                    root = JsonConvert.DeserializeObject<Root>(result);
                }
                else
                {
                    throw new Exception("Received an empty response from the server.");
                }
            }
        }
    }
    catch (WebException webEx)
    {
        // Handle Web-specific errors, such as connection timeouts or server not found
        if (webEx.Response is HttpWebResponse errorResponse)
        {
            throw new Exception($"HTTP Error: {errorResponse.StatusCode} - {errorResponse.StatusDescription}", webEx);
        }
        throw new Exception("WebException occurred. Check network connection or URL.", webEx);
    }
    catch (JsonException jsonEx)
    {
        // Handle JSON parsing errors
        throw new Exception("Error parsing the JSON response.", jsonEx);
    }
    catch (Exception ex)
    {
        // Log the error with more detail for troubleshooting
        throw new Exception($"An error occurred: {ex.Message}", ex);
    }

    return root;
}
