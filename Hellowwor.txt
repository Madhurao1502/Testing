removeWave(wave: any) {
  // Find the start and end weeks in the original left grid data
  const startWeekIndex = this.leftGridData.findIndex(
    d => d.Start_Week === wave.Start_Week
  );
  
  const endWeekIndex = this.leftGridData.findIndex(
    d => d.Start_Week === wave.End_Week
  );

  // Get the original rows based on start and end weeks
  const originalRows = this.date.slice(startWeekIndex, endWeekIndex + 1);

  // Re-insert each original row back into the left grid data in its original position
  originalRows.forEach((row, index) => {
    const insertIndex = startWeekIndex + index;
    this.leftGridData.splice(insertIndex, 0, {
      MMYY: row.monthYear,
      Start_Week: row.StartWeek,
      Start_Date: row.StartDate,
      End_Date: row.endDate
    });
  });

  // Remove the wave from the right grid
  this.rightGridData = this.rightGridData.filter(w => w !== wave);
}
createWave() {
  // Check if the number of selected weeks is less than 2
  if (this.selection.selected.length < 2) {
    this.errorMessage = 'Please select at least two weeks to create a wave.';
    return;
  }

  // Get the selected weeks
  const selectedWeeks = this.selection.selected.map(row => ({
    MMYY: row.MMYY,
    Start_Week: row.Start_Week,
    Start_Date: row.Start_Date,
    End_Date: row.End_Date,
  }));

  // Sort the selected weeks by Start_Week to check for consecutive selection
  selectedWeeks.sort((a, b) => a.Start_Week - b.Start_Week);

  // Check for consecutive weeks
  for (let i = 1; i < selectedWeeks.length; i++) {
    if (selectedWeeks[i].Start_Week !== selectedWeeks[i - 1].Start_Week + 1) {
      this.errorMessage = 'Please select consecutive weeks only to create a wave.';
      return;
    }
  }

  // Calculate min and max week
  const minWeek = selectedWeeks[0].Start_Week;
  const maxWeek = selectedWeeks[selectedWeeks.length - 1].Start_Week;

  // Get min and max dates for the selected weeks
  const minDate = new Date(selectedWeeks[0].Start_Date);
  const maxDate = new Date(selectedWeeks[selectedWeeks.length - 1].End_Date);

  // Create a new wave object
  const newWave = {
    Start_Week: minWeek,
    End_Week: maxWeek,
    Due_Date: '',
    minDate: new Date(minDate.setDate(minDate.getDate() - 7)),
    maxDate: new Date(maxDate.setDate(maxDate.getDate() + 7))
  };

  // Add the new wave to the right grid
  this.rightGridData.push(newWave);

  // Remove the selected weeks from the left grid
  this.leftGridData = this.leftGridData.filter(week => !this.selection.selected.includes(week));

  // Clear the selection and reset the error message
  this.selection.clear();
  this.errorMessage = '';
}
