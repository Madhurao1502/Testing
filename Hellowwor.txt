public static Root GetDDT(string _oPlaceid, string _dPlaceid)
{
    var root = new Root();

    try
    {
        // URL from AppSettings
        string url = string.Format(AppSettings.GetValue(AppSettings.DDTCalculUrl));

        // Build JSON payload
        var jsonData = new
        {
            oPlace_id = _oPlaceid,
            dPlace_id = _dPlaceid
        };
        
        // Serialize the payload to JSON format
        var jsonPayload = JsonConvert.SerializeObject(jsonData);
        byte[] data = Encoding.UTF8.GetBytes(jsonPayload);

        // Initialize the request
        var request = (HttpWebRequest)WebRequest.Create(url);
        request.Method = "POST";
        request.ContentType = "application/json"; // Set content type to JSON
        request.ContentLength = data.Length;

        // Set credentials using NetworkCredential
        string domain = AppSettings.GetValue(AppSettings.Domain);
        string username = AppSettings.GetValue(AppSettings.DomainUserName);
        string password = AppSettings.GetValue(AppSettings.DomainPassword);

        // Use the credentials
        request.Credentials = new NetworkCredential(username, password, domain);

        // PreAuthenticate and make sure default credentials are not used
        request.PreAuthenticate = true;
        request.UseDefaultCredentials = false;

        // Write data to the request stream
        using (var stream = request.GetRequestStream())
        {
            stream.Write(data, 0, data.Length);
        }

        // Get and process the response
        using (var response = (HttpWebResponse)request.GetResponse())
        {
            if (response.StatusCode != HttpStatusCode.OK)
            {
                throw new Exception($"Server returned error code: {response.StatusCode}");
            }

            using (var streamReader = new StreamReader(response.GetResponseStream()))
            {
                string result = streamReader.ReadToEnd();

                // Check if the response contains data
                if (!string.IsNullOrWhiteSpace(result))
                {
                    root = JsonConvert.DeserializeObject<Root>(result);
                }
                else
                {
                    throw new Exception("Received an empty response from the server.");
                }
            }
        }
    }
    catch (WebException webEx)
    {
        if (webEx.Response is HttpWebResponse errorResponse)
        {
            throw new Exception($"HTTP Error: {errorResponse.StatusCode} - {errorResponse.StatusDescription}", webEx);
        }
        throw new Exception("WebException occurred. Check network connection or URL.", webEx);
    }
    catch (JsonException jsonEx)
    {
        throw new Exception("Error parsing the JSON response.", jsonEx);
    }
    catch (Exception ex)
    {
        throw new Exception($"An error occurred: {ex.Message}", ex);
    }

    return root;
}
