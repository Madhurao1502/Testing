/ shelf-tree.component.ts
import {
  Component,
  Input,
  OnInit,
  HostListener
} from '@angular/core';
import { NestedTreeControl } from '@angular/cdk/tree';
import { MatTreeNestedDataSource } from '@angular/material/tree';

interface ShelfNode {
  id: number;
  pId: number;
  name: string;
  level?: number;
  mainMin?: string;
  mainMax?: string;
  mainSoftCheck?: string;
  mainHardCheck?: string;
  retired_date?: string;
  optional?: string;
  isNewlyAdded?: string;
  children?: ShelfNode[];
}

@Component({
  selector: 'app-shelf-tree',
  templateUrl: './shelf-tree.component.html',
  styleUrls: ['./shelf-tree.component.scss']
})
export class ShelfTreeComponent implements OnInit {
  @Input() group!: number;
  @Input() title!: string;

  treeControl = new NestedTreeControl<ShelfNode>(node => node.children);
  dataSource = new MatTreeNestedDataSource<ShelfNode>();

  selectedNode: ShelfNode | null = null;
  rightClickedNode: ShelfNode | null = null;

  showLimits = false;
  showChecks = false;

  contextMenuVisible = false;
  contextX = 0;
  contextY = 0;

  showDialog = false;
  dialogMode: 'add' | 'edit' = 'add';
  dialogNodeName = '';

  ngOnInit(): void {
    // Load your sample data statically or via service
    this.dataSource.data = [];
  }

  hasChild = (_: number, node: ShelfNode) => !!node.children && node.children.length > 0;

  onSelect(node: ShelfNode): void {
    this.selectedNode = node;
    this.configureDisplayFields(node);
  }

  onRightClick(event: MouseEvent, node: ShelfNode): void {
    event.preventDefault();
    this.contextX = event.clientX;
    this.contextY = event.clientY;
    this.contextMenuVisible = true;
    this.rightClickedNode = node;
  }

  @HostListener('document:click')
  hideContextMenu() {
    this.contextMenuVisible = false;
  }

  configureDisplayFields(node: ShelfNode): void {
    const limitIds = [11160, 14825, 15490, 15995, 16910, 22700];
    const checkIds = [10100, 20000, 30100];

    this.showLimits = !checkIds.includes(node.id);
    this.showChecks = !limitIds.includes(node.id);
  }

  updateValue(type: 'min' | 'max' | 'soft' | 'hard', val: string) {
    if (!this.selectedNode) return;
    const keyMap: any = {
      min: 'mainMin',
      max: 'mainMax',
      soft: 'mainSoftCheck',
      hard: 'mainHardCheck'
    };
    (this.selectedNode as any)[keyMap[type]] = val;
    this.selectedNode.isNewlyAdded = 'U';
  }

  openAddDialog(): void {
    this.hideContextMenu();
    this.dialogMode = 'add';
    this.dialogNodeName = '';
    this.showDialog = true;
  }

  openEditDialog(): void {
    if (!this.rightClickedNode) return;
    this.hideContextMenu();
    this.dialogMode = 'edit';
    this.dialogNodeName = this.rightClickedNode.name;
    this.showDialog = true;
  }

  confirmDialog(): void {
    if (this.dialogMode === 'add') {
      const newNode: ShelfNode = {
        id: Math.floor(Math.random() * 100000),
        pId: this.rightClickedNode!.id,
        name: this.dialogNodeName,
        optional: 'Y',
        isNewlyAdded: 'N',
        children: []
      };
      this.rightClickedNode!.children = this.rightClickedNode!.children || [];
      this.rightClickedNode!.children.push(newNode);
      this.treeControl.expand(this.rightClickedNode!);
    } else if (this.dialogMode === 'edit') {
      this.rightClickedNode!.name = this.dialogNodeName;
      this.rightClickedNode!.isNewlyAdded = 'U';
    }
    this.showDialog = false;
  }

  cancelDialog(): void {
    this.showDialog = false;
  }

  deleteNode(): void {
    if (!this.rightClickedNode) return;
    const parent = this.findParent(this.dataSource.data, this.rightClickedNode);
    if (parent) {
      parent.children = parent.children?.filter(c => c.id !== this.rightClickedNode!.id);
    } else {
      this.dataSource.data = this.dataSource.data.filter(c => c.id !== this.rightClickedNode!.id);
    }
    this.contextMenuVisible = false;
  }

  retireNode(): void {
    if (!this.rightClickedNode) return;
    this.rightClickedNode.name += ' (Retired)';
    this.rightClickedNode.retired_date = new Date().toLocaleDateString();
    this.rightClickedNode.isNewlyAdded = 'U';
    this.contextMenuVisible = false;
  }

  unretireNode(): void {
    if (!this.rightClickedNode) return;
    this.rightClickedNode.name = this.rightClickedNode.name.replace(' (Retired)', '');
    this.rightClickedNode.retired_date = '';
    this.rightClickedNode.isNewlyAdded = 'U';
    this.contextMenuVisible = false;
  }

  private findParent(nodes: ShelfNode[], target: ShelfNode): ShelfNode | null {
    for (const node of nodes) {
      if (node.children?.some(child => child.id === target.id)) {
        return node;
      }
      const parent = node.children ? this.findParent(node.children, target) : null;
      if (parent) return parent;
    }
    return null;
  }
}


<!-- shelf-tree.component.html -->
<div class="shelf-wrapper">
  <div class="tree-panel">
    <h3>{{ title }}</h3>

    <mat-tree [dataSource]="dataSource" [treeControl]="treeControl">
      <!-- Leaf node -->
      <mat-tree-node *matTreeNodeDef="let node">
        <div
          class="node-line compact-node"
          [ngStyle]="{ 'padding-left.px': (node.level || 0) * 20 }"
          (click)="onSelect(node)"
          (contextmenu)="onRightClick($event, node)"
        >
          <button mat-icon-button disabled></button>
          <mat-icon class="node-icon">insert_drive_file</mat-icon>
          {{ node.name }}
        </div>
      </mat-tree-node>

      <!-- Expandable node -->
      <mat-nested-tree-node *matTreeNodeDef="let node; when: hasChild">
        <div
          class="node-line compact-node"
          [ngStyle]="{ 'padding-left.px': (node.level || 0) * 20 }"
          (click)="onSelect(node)"
          (contextmenu)="onRightClick($event, node)"
        >
          <button mat-icon-button matTreeNodeToggle>
            <mat-icon>
              {{ treeControl.isExpanded(node) ? 'expand_more' : 'chevron_right' }}
            </mat-icon>
          </button>
          <mat-icon class="node-icon">folder</mat-icon>
          {{ node.name }}
        </div>
        <div *ngIf="treeControl.isExpanded(node)">
          <ng-container matTreeNodeOutlet></ng-container>
        </div>
      </mat-nested-tree-node>
    </mat-tree>
  </div>

  <div *ngIf="selectedNode?.level === 0 && (showLimits || showChecks)" class="form-panel">
    <h4>Checks / Limits</h4>

    <div *ngIf="showLimits" class="form-section">
      <mat-form-field appearance="outline">
        <mat-label>Min</mat-label>
        <input matInput [(ngModel)]="selectedNode.mainMin" (change)="updateValue('min', selectedNode.mainMin)" />
      </mat-form-field>
      <mat-form-field appearance="outline">
        <mat-label>Max</mat-label>
        <input matInput [(ngModel)]="selectedNode.mainMax" (change)="updateValue('max', selectedNode.mainMax)" />
      </mat-form-field>
    </div>

    <div *ngIf="showChecks" class="form-section">
      <mat-form-field appearance="outline">
        <mat-label>Soft</mat-label>
        <input matInput [(ngModel)]="selectedNode.mainSoftCheck" (change)="updateValue('soft', selectedNode.mainSoftCheck)" />
      </mat-form-field>
      <mat-form-field appearance="outline">
        <mat-label>Hard</mat-label>
        <input matInput [(ngModel)]="selectedNode.mainHardCheck" (change)="updateValue('hard', selectedNode.mainHardCheck)" />
      </mat-form-field>
    </div>
  </div>
</div>

<!-- Right-click context menu -->
<div class="rMenu" *ngIf="contextMenuVisible" [ngStyle]="{ top: contextY + 'px', left: contextX + 'px' }">
  <ul>
    <li><button [disabled]="!canAdd()" (click)="openAddDialog()">Add Variable</button></li>
    <li><button [disabled]="!canEdit()" (click)="openEditDialog()">Edit Variable</button></li>
    <li><button [disabled]="!canDelete()" (click)="deleteNode()">Delete Variable</button></li>
    <li><button [disabled]="!canRetire()" (click)="retireNode()">Retire</button></li>
    <li><button [disabled]="!canUnretire()" (click)="unretireNode()">Unretire</button></li>
  </ul>
</div>

<!-- Add/Edit inline dialog -->
<div class="dialog" *ngIf="showDialog">
  <h3>{{ dialogMode === 'add' ? 'Add' : 'Edit' }} Shelf Variable</h3>
  <mat-form-field appearance="fill">
    <mat-label>Name</mat-label>
    <input matInput [(ngModel)]="dialogNodeName" />
  </mat-form-field>
  <div class="actions">
    <button mat-button (click)="confirmDialog()">{{ dialogMode === 'add' ? 'Add' : 'Save' }}</button>
    <button mat-button (click)="cancelDialog()">Cancel</button>
  </div>
</div>


canAdd(): boolean {
  return this.group === 1 && (this.rightClickedNode?.level ?? 0) < 2;
}

canEdit(): boolean {
  return !!this.rightClickedNode && this.rightClickedNode.level !== 0;
}

canDelete(): boolean {
  return this.rightClickedNode?.isNewlyAdded === 'N';
}

canRetire(): boolean {
  return !!this.rightClickedNode && !this.rightClickedNode.name.includes('(Retired)');
}

canUnretire(): boolean {
  return this.rightClickedNode?.name.includes('(Retired)') ?? false;
}
